<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="TodoLists.TodoListMacro" locale="">
  <web>TodoLists</web>
  <name>TodoListMacro</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1388527200000</creationDate>
  <parent>TodoLists.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1388527200000</date>
  <contentUpdateDate>1388527200000</contentUpdateDate>
  <version>1.1</version>
  <title>Todolist Macro</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>
Macro to display todo-lists using emberjs. This code is based on the emberjs demo. You can see an example below

{{todolist width="50%" center="1" }}
Install todolists extension|1
Try todo list demo|0
Create a todo list|0
Close on tasks on this todo list|0
{{/todolist}}</content>
  <attachment>
    <filename>ember-data.js</filename>
    <author>XWiki.Admin</author>
    <date>1498975668000</date>
    <version>1.1</version>
    <comment/>
    <content>LyohCiAqIEBvdmVydmlldyAgRW1iZXIgRGF0YQogKiBAY29weXJpZ2h0IENvcHlyaWdodCAyMDExLTIwMTQgVGlsZGUgSW5jLiBhbmQgY29udHJpYnV0b3JzLgogKiAgICAgICAgICAgIFBvcnRpb25zIENvcHlyaWdodCAyMDExIExpdmluZ1NvY2lhbCBJbmMuCiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2UgKHNlZSBsaWNlbnNlLmpzKQogKiBAdmVyc2lvbiAgIDEuMC4wLWJldGEuNQogKi8KCgooZnVuY3Rpb24oKSB7CnZhciBkZWZpbmUsIHJlcXVpcmVNb2R1bGU7CgooZnVuY3Rpb24oKSB7CiAgdmFyIHJlZ2lzdHJ5ID0ge30sIHNlZW4gPSB7fTsKCiAgZGVmaW5lID0gZnVuY3Rpb24obmFtZSwgZGVwcywgY2FsbGJhY2spIHsKICAgIHJlZ2lzdHJ5W25hbWVdID0geyBkZXBzOiBkZXBzLCBjYWxsYmFjazogY2FsbGJhY2sgfTsKICB9OwoKICByZXF1aXJlTW9kdWxlID0gZnVuY3Rpb24obmFtZSkgewogICAgaWYgKHNlZW5bbmFtZV0pIHsgcmV0dXJuIHNlZW5bbmFtZV07IH0KICAgIHNlZW5bbmFtZV0gPSB7fTsKCiAgICB2YXIgbW9kLCBkZXBzLCBjYWxsYmFjaywgcmVpZmllZCAsIGV4cG9ydHM7CgogICAgbW9kID0gcmVnaXN0cnlbbmFtZV07CgogICAgaWYgKCFtb2QpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJNb2R1bGUgJyIgKyBuYW1lICsgIicgbm90IGZvdW5kLiIpOwogICAgfQoKICAgIGRlcHMgPSBtb2QuZGVwczsKICAgIGNhbGxiYWNrID0gbW9kLmNhbGxiYWNrOwogICAgcmVpZmllZCA9IFtdOwogICAgZXhwb3J0czsKCiAgICBmb3IgKHZhciBpPTAsIGw9ZGVwcy5sZW5ndGg7IGk8bDsgaSsrKSB7CiAgICAgIGlmIChkZXBzW2ldID09PSAnZXhwb3J0cycpIHsKICAgICAgICByZWlmaWVkLnB1c2goZXhwb3J0cyA9IHt9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZWlmaWVkLnB1c2gocmVxdWlyZU1vZHVsZShkZXBzW2ldKSk7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgdmFsdWUgPSBjYWxsYmFjay5hcHBseSh0aGlzLCByZWlmaWVkKTsKICAgIHJldHVybiBzZWVuW25hbWVdID0gZXhwb3J0cyB8fCB2YWx1ZTsKICB9Owp9KSgpOwooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKLyoqCiAgQWxsIEVtYmVyIERhdGEgbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGFyZSBkZWZpbmVkIGluc2lkZSBvZiB0aGlzIG5hbWVzcGFjZS4KCiAgQGNsYXNzIERTCiAgQHN0YXRpYwoqLwp2YXIgRFM7CmlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIERTKSB7CiAgLyoqCiAgICBAcHJvcGVydHkgVkVSU0lPTgogICAgQHR5cGUgU3RyaW5nCiAgICBAZGVmYXVsdCAnMS4wLjAtYmV0YS41JwogICAgQHN0YXRpYwogICovCiAgRFMgPSBFbWJlci5OYW1lc3BhY2UuY3JlYXRlKHsKICAgIFZFUlNJT046ICcxLjAuMC1iZXRhLjUnCiAgfSk7CgogIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHdpbmRvdykgewogICAgd2luZG93LkRTID0gRFM7CiAgfQoKICBpZiAoRW1iZXIubGlicmFyaWVzKSB7CiAgICBFbWJlci5saWJyYXJpZXMucmVnaXN0ZXJDb3JlTGlicmFyeSgnRW1iZXIgRGF0YScsIERTLlZFUlNJT04pOwogIH0KfQoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQsIGlzTm9uZSA9IEVtYmVyLmlzTm9uZTsKCi8vIFNpbXBsZSBkaXNwYXRjaGVyIHRvIHN1cHBvcnQgb3ZlcnJpZGluZyB0aGUgYWxpYXNlZAovLyBtZXRob2QgaW4gc3ViY2xhc3Nlcy4KZnVuY3Rpb24gYWxpYXNNZXRob2QobWV0aG9kTmFtZSkgewogIHJldHVybiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfQoKLyoqCiAgSW4gRW1iZXIgRGF0YSBhIFNlcmlhbGl6ZXIgaXMgdXNlZCB0byBzZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplCiAgcmVjb3JkcyB3aGVuIHRoZXkgYXJlIHRyYW5zZmVyZWQgaW4gYW5kIG91dCBvZiBhbiBleHRlcm5hbCBzb3VyY2UuCiAgVGhpcyBwcm9jZXNzIGludm9sdmVzIG5vcm1hbGl6aW5nIHByb3BlcnR5IG5hbWVzLCB0cmFuc2Zvcm1pbmcKICBhdHRyaWJ1dGUgdmFsdWVzIGFuZCBzZXJpYWxpemVpbmcgcmVsYXRpb25zaGlwcy4KCiAgRm9yIG1heGltdW0gcGVyZm9ybWFuY2UgRW1iZXIgRGF0YSByZWNvbWVuZHMgeW91IHVzZSB0aGUKICBbUkVTVFNlcmlhbGl6ZXJdKERTLlJFU1RTZXJpYWxpemVyLmh0bWwpIG9yIG9uZSBvZiBpdHMgc3ViY2xhc3Nlcy4KCiAgYEpTT05TZXJpYWxpemVyYCBpcyB1c2VmdWwgZm9yIHNpbXBsZXIgb3IgbGVnYWN5IGJhY2tlbmRzIHRoYXQgbWF5CiAgbm90IHN1cHBvcnQgdGhlIGh0dHA6Ly9qc29uYXBpLm9yZy8gc3BlYy4KCiAgQGNsYXNzIEpTT05TZXJpYWxpemVyCiAgQG5hbWVzcGFjZSBEUwoqLwpEUy5KU09OU2VyaWFsaXplciA9IEVtYmVyLk9iamVjdC5leHRlbmQoewogIC8qKgogICAgVGhlIHByaW1hcnlLZXkgaXMgdXNlZCB3aGVuIHNlcmlhbGl6aW5nIGFuZCBkZXNlcmlhbGl6aW5nCiAgICBkYXRhLiBFbWJlciBEYXRhIGFsd2F5cyB1c2VzIHRoZSBgaWRgIHByb3BlcnkgdG8gc3RvcmUgdGhlIGlkIG9mCiAgICB0aGUgcmVjb3JkLiBUaGUgZXh0ZXJuYWwgc291cmNlIG1heSBub3QgYWx3YXlzIGZvbGxvdyB0aGlzCiAgICBjb252ZW50aW9uLiBJbiB0aGVzZSBjYXNlcyBpdCBpcyB1c2VzZnVsIHRvIG92ZXJyaWRlIHRoZQogICAgcHJpbWFyeUtleSBwcm9wZXJ0eSB0byBtYXRjaCB0aGUgcHJpbWFyeUtleSBvZiB5b3VyIGV4dGVybmFsCiAgICBzdG9yZS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLkFwcGxpY2F0aW9uU2VyaWFsaXplciA9IERTLkpTT05TZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIHByaW1hcnlLZXk6ICdfaWQnCiAgICB9KTsKICAgIGBgYAoKICAgIEBwcm9wZXJ0eSBwcmltYXJ5S2V5CiAgICBAdHlwZSB7U3RyaW5nfQogICAgQGRlZmF1bHQgJ2lkJwogICovCiAgcHJpbWFyeUtleTogJ2lkJywKCiAgLyoqCiAgIEdpdmVuIGEgc3ViY2xhc3Mgb2YgYERTLk1vZGVsYCBhbmQgYSBKU09OIG9iamVjdCB0aGlzIG1ldGhvZCB3aWxsCiAgIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIGF0dHJpYnV0ZSBvZiB0aGUgYERTLk1vZGVsYCBhbmQgaW52b2tlIHRoZQogICBgRFMuVHJhbnNmb3JtI2Rlc2VyaWFsaXplYCBtZXRob2Qgb24gdGhlIG1hdGNoaW5nIHByb3BlcnR5IG9mIHRoZQogICBKU09OIG9iamVjdC4gIFRoaXMgbWV0aG9kIGlzIHR5cGljYWxseSBjYWxsZWQgYWZ0ZXIgdGhlCiAgIHNlcmlhbGl6ZXIncyBgbm9ybWFsaXplYCBtZXRob2QuCgogICBAbWV0aG9kIGFwcGx5VHJhbnNmb3JtcwogICBAcHJpdmF0ZQogICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBkYXRhIHRvIHRyYW5zZm9ybQogICBAcmV0dXJuIHtPYmplY3R9IGRhdGEgVGhlIHRyYW5zZm9ybWVkIGRhdGEgb2JqZWN0CiAgKi8KICBhcHBseVRyYW5zZm9ybXM6IGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHsKICAgIHR5cGUuZWFjaFRyYW5zZm9ybWVkQXR0cmlidXRlKGZ1bmN0aW9uKGtleSwgdHlwZSkgewogICAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy50cmFuc2Zvcm1Gb3IodHlwZSk7CiAgICAgIGRhdGFba2V5XSA9IHRyYW5zZm9ybS5kZXNlcmlhbGl6ZShkYXRhW2tleV0pOwogICAgfSwgdGhpcyk7CgogICAgcmV0dXJuIGRhdGE7CiAgfSwKCiAgLyoqCiAgICBOb3JtYWxpemVzIGEgcGFydCBvZiB0aGUgSlNPTiBwYXlsb2FkIHJldHVybmVkIGJ5CiAgICB0aGUgc2VydmVyLiBZb3Ugc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kLCBtdW5nZSB0aGUgaGFzaAogICAgYW5kIGNhbGwgc3VwZXIgaWYgeW91IGhhdmUgZ2VuZXJpYyBub3JtYWxpemF0aW9uIHRvIGRvLgoKICAgIEl0IHRha2VzIHRoZSB0eXBlIG9mIHRoZSByZWNvcmQgdGhhdCBpcyBiZWluZyBub3JtYWxpemVkCiAgICAoYXMgYSBEUy5Nb2RlbCBjbGFzcyksIHRoZSBwcm9wZXJ0eSB3aGVyZSB0aGUgaGFzaCB3YXMKICAgIG9yaWdpbmFsbHkgZm91bmQsIGFuZCB0aGUgaGFzaCB0byBub3JtYWxpemUuCgogICAgWW91IGNhbiB1c2UgdGhpcyBtZXRob2QsIGZvciBleGFtcGxlLCB0byBub3JtYWxpemUgdW5kZXJzY29yZWQga2V5cyB0byBjYW1lbGl6ZWQKICAgIG9yIG90aGVyIGdlbmVyYWwtcHVycG9zZSBub3JtYWxpemF0aW9ucy4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLkFwcGxpY2F0aW9uU2VyaWFsaXplciA9IERTLkpTT05TZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIG5vcm1hbGl6ZTogZnVuY3Rpb24odHlwZSwgaGFzaCkgewogICAgICAgIHZhciBmaWVsZHMgPSBFbWJlci5nZXQodHlwZSwgJ2ZpZWxkcycpOwogICAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKSB7CiAgICAgICAgICB2YXIgcGF5bG9hZEZpZWxkID0gRW1iZXIuU3RyaW5nLnVuZGVyc2NvcmUoZmllbGQpOwogICAgICAgICAgaWYgKGZpZWxkID09PSBwYXlsb2FkRmllbGQpIHsgcmV0dXJuOyB9CgogICAgICAgICAgaGFzaFtmaWVsZF0gPSBoYXNoW3BheWxvYWRGaWVsZF07CiAgICAgICAgICBkZWxldGUgaGFzaFtwYXlsb2FkRmllbGRdOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2Qgbm9ybWFsaXplCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gaGFzaAogICAgQHJldHVybiB7T2JqZWN0fQogICovCiAgbm9ybWFsaXplOiBmdW5jdGlvbih0eXBlLCBoYXNoKSB7CiAgICBpZiAoIWhhc2gpIHsgcmV0dXJuIGhhc2g7IH0KCiAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0eXBlLCBoYXNoKTsKICAgIHJldHVybiBoYXNoOwogIH0sCgogIC8vIFNFUklBTElaRQogIC8qKgogICAgQ2FsbGVkIHdoZW4gYSByZWNvcmQgaXMgc2F2ZWQgaW4gb3JkZXIgdG8gY29udmVydCB0aGUKICAgIHJlY29yZCBpbnRvIEpTT04uCgogICAgQnkgZGVmYXVsdCwgaXQgY3JlYXRlcyBhIEpTT04gb2JqZWN0IHdpdGggYSBrZXkgZm9yCiAgICBlYWNoIGF0dHJpYnV0ZSBhbmQgYmVsb25nc1RvIHJlbGF0aW9uc2hpcC4KCiAgICBGb3IgZXhhbXBsZSwgY29uc2lkZXIgdGhpcyBtb2RlbDoKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuQ29tbWVudCA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICAgIHRpdGxlOiBEUy5hdHRyKCksCiAgICAgIGJvZHk6IERTLmF0dHIoKSwKCiAgICAgIGF1dGhvcjogRFMuYmVsb25nc1RvKCd1c2VyJykKICAgIH0pOwogICAgYGBgCgogICAgVGhlIGRlZmF1bHQgc2VyaWFsaXphdGlvbiB3b3VsZCBjcmVhdGUgYSBKU09OIG9iamVjdCBsaWtlOgoKICAgIGBgYGphdmFzY3JpcHQKICAgIHsKICAgICAgInRpdGxlIjogIlJhaWxzIGlzIHVuYWdpIiwKICAgICAgImJvZHkiOiAiUmFpbHM/IE9tYWthc2U/IE9fTyIsCiAgICAgICJhdXRob3IiOiAxMgogICAgfQogICAgYGBgCgogICAgQnkgZGVmYXVsdCwgYXR0cmlidXRlcyBhcmUgcGFzc2VkIHRocm91Z2ggYXMtaXMsIHVubGVzcwogICAgeW91IHNwZWNpZmllZCBhbiBhdHRyaWJ1dGUgdHlwZSAoYERTLmF0dHIoJ2RhdGUnKWApLiBJZgogICAgeW91IHNwZWNpZnkgYSB0cmFuc2Zvcm0sIHRoZSBKYXZhU2NyaXB0IHZhbHVlIHdpbGwgYmUKICAgIHNlcmlhbGl6ZWQgd2hlbiBpbnNlcnRlZCBpbnRvIHRoZSBKU09OIGhhc2guCgogICAgQnkgZGVmYXVsdCwgYmVsb25ncy10byByZWxhdGlvbnNoaXBzIGFyZSBjb252ZXJ0ZWQgaW50bwogICAgSURzIHdoZW4gaW5zZXJ0ZWQgaW50byB0aGUgSlNPTiBoYXNoLgoKICAgICMjIElEcwoKICAgIGBzZXJpYWxpemVgIHRha2VzIGFuIG9wdGlvbnMgaGFzaCB3aXRoIGEgc2luZ2xlIG9wdGlvbjoKICAgIGBpbmNsdWRlSWRgLiBJZiB0aGlzIG9wdGlvbiBpcyBgdHJ1ZWAsIGBzZXJpYWxpemVgIHdpbGwsCiAgICBieSBkZWZhdWx0IGluY2x1ZGUgdGhlIElEIGluIHRoZSBKU09OIG9iamVjdCBpdCBidWlsZHMuCgogICAgVGhlIGFkYXB0ZXIgcGFzc2VzIGluIGBpbmNsdWRlSWQ6IHRydWVgIHdoZW4gc2VyaWFsaXppbmcKICAgIGEgcmVjb3JkIGZvciBgY3JlYXRlUmVjb3JkYCwgYnV0IG5vdCBmb3IgYHVwZGF0ZVJlY29yZGAuCgogICAgIyMgQ3VzdG9taXphdGlvbgoKICAgIFlvdXIgc2VydmVyIG1heSBleHBlY3QgYSBkaWZmZXJlbnQgSlNPTiBmb3JtYXQgdGhhbiB0aGUKICAgIGJ1aWx0LWluIHNlcmlhbGl6YXRpb24gZm9ybWF0LgoKICAgIEluIHRoYXQgY2FzZSwgeW91IGNhbiBpbXBsZW1lbnQgYHNlcmlhbGl6ZWAgeW91cnNlbGYgYW5kCiAgICByZXR1cm4gYSBKU09OIGhhc2ggb2YgeW91ciBjaG9vc2luZy4KCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuUG9zdFNlcmlhbGl6ZXIgPSBEUy5KU09OU2VyaWFsaXplci5leHRlbmQoewogICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKHBvc3QsIG9wdGlvbnMpIHsKICAgICAgICB2YXIganNvbiA9IHsKICAgICAgICAgIFBPU1RfVFRMOiBwb3N0LmdldCgndGl0bGUnKSwKICAgICAgICAgIFBPU1RfQkRZOiBwb3N0LmdldCgnYm9keScpLAogICAgICAgICAgUE9TVF9DTVM6IHBvc3QuZ2V0KCdjb21tZW50cycpLm1hcFByb3BlcnR5KCdpZCcpCiAgICAgICAgfQoKICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlSWQpIHsKICAgICAgICAgIGpzb24uUE9TVF9JRF8gPSBwb3N0LmdldCgnaWQnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBqc29uOwogICAgICB9CiAgICB9KTsKICAgIGBgYAoKICAgICMjIEN1c3RvbWl6aW5nIGFuIEFwcC1XaWRlIFNlcmlhbGl6ZXIKCiAgICBJZiB5b3Ugd2FudCB0byBkZWZpbmUgYSBzZXJpYWxpemVyIGZvciB5b3VyIGVudGlyZQogICAgYXBwbGljYXRpb24sIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZSBgZWFjaEF0dHJpYnV0ZWAKICAgIGFuZCBgZWFjaFJlbGF0aW9uc2hpcGAgb24gdGhlIHJlY29yZC4KCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuQXBwbGljYXRpb25TZXJpYWxpemVyID0gRFMuSlNPTlNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihyZWNvcmQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIganNvbiA9IHt9OwoKICAgICAgICByZWNvcmQuZWFjaEF0dHJpYnV0ZShmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICBqc29uW3NlcnZlckF0dHJpYnV0ZU5hbWUobmFtZSldID0gcmVjb3JkLmdldChuYW1lKTsKICAgICAgICB9KQoKICAgICAgICByZWNvcmQuZWFjaFJlbGF0aW9uc2hpcChmdW5jdGlvbihuYW1lLCByZWxhdGlvbnNoaXApIHsKICAgICAgICAgIGlmIChyZWxhdGlvbnNoaXAua2luZCA9PT0gJ2hhc01hbnknKSB7CiAgICAgICAgICAgIGpzb25bc2VydmVySGFzTWFueU5hbWUobmFtZSldID0gcmVjb3JkLmdldChuYW1lKS5tYXBCeSgnaWQnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZUlkKSB7CiAgICAgICAgICBqc29uLklEXyA9IHJlY29yZC5nZXQoJ2lkJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4ganNvbjsKICAgICAgfQogICAgfSk7CgogICAgZnVuY3Rpb24gc2VydmVyQXR0cmlidXRlTmFtZShhdHRyaWJ1dGUpIHsKICAgICAgcmV0dXJuIGF0dHJpYnV0ZS51bmRlcnNjb3JlKCkudG9VcHBlckNhc2UoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXJ2ZXJIYXNNYW55TmFtZShuYW1lKSB7CiAgICAgIHJldHVybiBzZXJ2ZXJBdHRyaWJ1dGVOYW1lKG5hbWUuc2luZ3VsYXJpemUoKSkgKyAiX0lEUyI7CiAgICB9CiAgICBgYGAKCiAgICBUaGlzIHNlcmlhbGl6ZXIgd2lsbCBnZW5lcmF0ZSBKU09OIHRoYXQgbG9va3MgbGlrZSB0aGlzOgoKICAgIGBgYGphdmFzY3JpcHQKICAgIHsKICAgICAgIlRJVExFIjogIlJhaWxzIGlzIG9tYWthc2UiLAogICAgICAiQk9EWSI6ICJZZXAuIE9tYWthc2UuIiwKICAgICAgIkNPTU1FTlRfSURTIjogWyAxLCAyLCAzIF0KICAgIH0KICAgIGBgYAoKICAgICMjIFR3ZWFraW5nIHRoZSBEZWZhdWx0IEpTT04KCiAgICBJZiB5b3UganVzdCB3YW50IHRvIGRvIHNvbWUgc21hbGwgdHdlYWtzIG9uIHRoZSBkZWZhdWx0IEpTT04sCiAgICB5b3UgY2FuIGNhbGwgc3VwZXIgZmlyc3QgYW5kIG1ha2UgdGhlIHR3ZWFrcyBvbiB0aGUgcmV0dXJuZWQKICAgIEpTT04uCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLlBvc3RTZXJpYWxpemVyID0gRFMuSlNPTlNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihyZWNvcmQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIganNvbiA9IHRoaXMuX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogICAgICAgIGpzb24uc3ViamVjdCA9IGpzb24udGl0bGU7CiAgICAgICAgZGVsZXRlIGpzb24udGl0bGU7CgogICAgICAgIHJldHVybiBqc29uOwogICAgICB9CiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2Qgc2VyaWFsaXplCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSByZWNvcmQKICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAgICBAcmV0dXJuIHtPYmplY3R9IGpzb24KICAqLwogIHNlcmlhbGl6ZTogZnVuY3Rpb24ocmVjb3JkLCBvcHRpb25zKSB7CiAgICB2YXIganNvbiA9IHt9OwoKICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZUlkKSB7CiAgICAgIHZhciBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgICAgaWYgKGlkKSB7CiAgICAgICAganNvbltnZXQodGhpcywgJ3ByaW1hcnlLZXknKV0gPSBpZDsKICAgICAgfQogICAgfQoKICAgIHJlY29yZC5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKGtleSwgYXR0cmlidXRlKSB7CiAgICAgIHRoaXMuc2VyaWFsaXplQXR0cmlidXRlKHJlY29yZCwganNvbiwga2V5LCBhdHRyaWJ1dGUpOwogICAgfSwgdGhpcyk7CgogICAgcmVjb3JkLmVhY2hSZWxhdGlvbnNoaXAoZnVuY3Rpb24oa2V5LCByZWxhdGlvbnNoaXApIHsKICAgICAgaWYgKHJlbGF0aW9uc2hpcC5raW5kID09PSAnYmVsb25nc1RvJykgewogICAgICAgIHRoaXMuc2VyaWFsaXplQmVsb25nc1RvKHJlY29yZCwganNvbiwgcmVsYXRpb25zaGlwKTsKICAgICAgfSBlbHNlIGlmIChyZWxhdGlvbnNoaXAua2luZCA9PT0gJ2hhc01hbnknKSB7CiAgICAgICAgdGhpcy5zZXJpYWxpemVIYXNNYW55KHJlY29yZCwganNvbiwgcmVsYXRpb25zaGlwKTsKICAgICAgfQogICAgfSwgdGhpcyk7CgogICAgcmV0dXJuIGpzb247CiAgfSwKCiAgLyoqCiAgIGBzZXJpYWxpemVBdHRyaWJ1dGVgIGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSBob3cgYERTLmF0dHJgCiAgIHByb3BlcnRpZXMgYXJlIHNlcmlhbGl6ZWQKCiAgIEZvciBleGFtcGxlIGlmIHlvdSB3YW50ZWQgdG8gZW5zdXJlIGFsbCB5b3UgYXR0cmlidXRlcyB3ZXJlIGFsd2F5cwogICBzZXJpYWxpemVkIGFzIHByb3BlcnRpZXMgb24gYW4gYGF0dHJpYnV0ZXNgIG9iamVjdCB5b3UgY291bGQKICAgd3JpdGU6CgogICBgYGBqYXZhc2NyaXB0CiAgIEFwcC5BcHBsaWNhdGlvblNlcmlhbGl6ZXIgPSBEUy5KU09OU2VyaWFsaXplci5leHRlbmQoewogICAgIHNlcmlhbGl6ZUF0dHJpYnV0ZTogZnVuY3Rpb24ocmVjb3JkLCBqc29uLCBrZXksIGF0dHJpYnV0ZXMpIHsKICAgICAgIGpzb24uYXR0cmlidXRlcyA9IGpzb24uYXR0cmlidXRlcyB8fCB7fTsKICAgICAgIHRoaXMuX3N1cGVyKHJlY29yZCwganNvbi5hdHRyaWJ1dGVzLCBrZXksIGF0dHJpYnV0ZXMpOwogICAgIH0KICAgfSk7CiAgIGBgYAoKICAgQG1ldGhvZCBzZXJpYWxpemVBdHRyaWJ1dGUKICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgIEBwYXJhbSB7T2JqZWN0fSBqc29uCiAgIEBwYXJhbSB7U3RyaW5nfSBrZXkKICAgQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZQogICovCiAgc2VyaWFsaXplQXR0cmlidXRlOiBmdW5jdGlvbihyZWNvcmQsIGpzb24sIGtleSwgYXR0cmlidXRlKSB7CiAgICB2YXIgYXR0cnMgPSBnZXQodGhpcywgJ2F0dHJzJyk7CiAgICB2YXIgdmFsdWUgPSBnZXQocmVjb3JkLCBrZXkpLCB0eXBlID0gYXR0cmlidXRlLnR5cGU7CgogICAgaWYgKHR5cGUpIHsKICAgICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtRm9yKHR5cGUpOwogICAgICB2YWx1ZSA9IHRyYW5zZm9ybS5zZXJpYWxpemUodmFsdWUpOwogICAgfQoKICAgIC8vIGlmIHByb3ZpZGVkLCB1c2UgdGhlIG1hcHBpbmcgcHJvdmlkZWQgYnkgYGF0dHJzYCBpbgogICAgLy8gdGhlIHNlcmlhbGl6ZXIKICAgIGtleSA9IGF0dHJzICYmIGF0dHJzW2tleV0gfHwgKHRoaXMua2V5Rm9yQXR0cmlidXRlID8gdGhpcy5rZXlGb3JBdHRyaWJ1dGUoa2V5KSA6IGtleSk7CgogICAganNvbltrZXldID0gdmFsdWU7CiAgfSwKCiAgLyoqCiAgIGBzZXJpYWxpemVCZWxvbmdzVG9gIGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSBob3cgYERTLmJlbG9uZ3NUb2AKICAgcHJvcGVydGllcyBhcmUgc2VyaWFsaXplZC4KCiAgIEV4YW1wbGUKCiAgIGBgYGphdmFzY3JpcHQKICAgQXBwLlBvc3RTZXJpYWxpemVyID0gRFMuSlNPTlNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICBzZXJpYWxpemVCZWxvbmdzVG86IGZ1bmN0aW9uKHJlY29yZCwganNvbiwgcmVsYXRpb25zaGlwKSB7CiAgICAgICB2YXIga2V5ID0gcmVsYXRpb25zaGlwLmtleTsKCiAgICAgICB2YXIgYmVsb25nc1RvID0gZ2V0KHJlY29yZCwga2V5KTsKCiAgICAgICBrZXkgPSB0aGlzLmtleUZvclJlbGF0aW9uc2hpcCA/IHRoaXMua2V5Rm9yUmVsYXRpb25zaGlwKGtleSwgImJlbG9uZ3NUbyIpIDoga2V5OwoKICAgICAgIGpzb25ba2V5XSA9IEVtYmVyLmlzTm9uZShiZWxvbmdzVG8pID8gYmVsb25nc1RvIDogYmVsb25nc1RvLnRvSlNPTigpOwogICAgIH0KICAgfSk7CiAgIGBgYAoKICAgQG1ldGhvZCBzZXJpYWxpemVCZWxvbmdzVG8KICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgIEBwYXJhbSB7T2JqZWN0fSBqc29uCiAgIEBwYXJhbSB7T2JqZWN0fSByZWxhdGlvbnNoaXAKICAqLwogIHNlcmlhbGl6ZUJlbG9uZ3NUbzogZnVuY3Rpb24ocmVjb3JkLCBqc29uLCByZWxhdGlvbnNoaXApIHsKICAgIHZhciBrZXkgPSByZWxhdGlvbnNoaXAua2V5OwoKICAgIHZhciBiZWxvbmdzVG8gPSBnZXQocmVjb3JkLCBrZXkpOwoKICAgIGtleSA9IHRoaXMua2V5Rm9yUmVsYXRpb25zaGlwID8gdGhpcy5rZXlGb3JSZWxhdGlvbnNoaXAoa2V5LCAiYmVsb25nc1RvIikgOiBrZXk7CgogICAgaWYgKGlzTm9uZShiZWxvbmdzVG8pKSB7CiAgICAgIGpzb25ba2V5XSA9IGJlbG9uZ3NUbzsKICAgIH0gZWxzZSB7CiAgICAgIGpzb25ba2V5XSA9IGdldChiZWxvbmdzVG8sICdpZCcpOwogICAgfQoKICAgIGlmIChyZWxhdGlvbnNoaXAub3B0aW9ucy5wb2x5bW9ycGhpYykgewogICAgICB0aGlzLnNlcmlhbGl6ZVBvbHltb3JwaGljVHlwZShyZWNvcmQsIGpzb24sIHJlbGF0aW9uc2hpcCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgIGBzZXJpYWxpemVIYXNNYW55YCBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgaG93IGBEUy5oYXNNYW55YAogICBwcm9wZXJ0aWVzIGFyZSBzZXJpYWxpemVkLgoKICAgRXhhbXBsZQoKICAgYGBgamF2YXNjcmlwdAogICBBcHAuUG9zdFNlcmlhbGl6ZXIgPSBEUy5KU09OU2VyaWFsaXplci5leHRlbmQoewogICAgIHNlcmlhbGl6ZUhhc01hbnk6IGZ1bmN0aW9uKHJlY29yZCwganNvbiwgcmVsYXRpb25zaGlwKSB7CiAgICAgICB2YXIga2V5ID0gcmVsYXRpb25zaGlwLmtleTsKICAgICAgIGlmIChrZXkgPT09ICdjb21tZW50cycpIHsKICAgICAgICAgcmV0dXJuOwogICAgICAgfSBlbHNlIHsKICAgICAgICAgdGhpcy5fc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgIH0KICAgICB9CiAgIH0pOwogICBgYGAKCiAgIEBtZXRob2Qgc2VyaWFsaXplSGFzTWFueQogICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgQHBhcmFtIHtPYmplY3R9IGpzb24KICAgQHBhcmFtIHtPYmplY3R9IHJlbGF0aW9uc2hpcAogICovCiAgc2VyaWFsaXplSGFzTWFueTogZnVuY3Rpb24ocmVjb3JkLCBqc29uLCByZWxhdGlvbnNoaXApIHsKICAgIHZhciBrZXkgPSByZWxhdGlvbnNoaXAua2V5OwoKICAgIHZhciByZWxhdGlvbnNoaXBUeXBlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmRldGVybWluZVJlbGF0aW9uc2hpcFR5cGUocmVjb3JkLmNvbnN0cnVjdG9yLCByZWxhdGlvbnNoaXApOwoKICAgIGlmIChyZWxhdGlvbnNoaXBUeXBlID09PSAnbWFueVRvTm9uZScgfHwgcmVsYXRpb25zaGlwVHlwZSA9PT0gJ21hbnlUb01hbnknKSB7CiAgICAgIGpzb25ba2V5XSA9IGdldChyZWNvcmQsIGtleSkubWFwQnkoJ2lkJyk7CiAgICAgIC8vIFRPRE8gc3VwcG9ydCBmb3IgcG9seW1vcnBoaWMgbWFueVRvTm9uZSBhbmQgbWFueVRvTWFueSByZWxhdGlvbnNoaXBzCiAgICB9CiAgfSwKCiAgLyoqCiAgICBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBjdXN0b21pemUgaG93IHBvbHltb3JwaGljIG9iamVjdHMgYXJlCiAgICBzZXJpYWxpemVkLiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIHRvIGJlIHBvbHltb3JwaGljIGlmCiAgICBge3BvbHltb3JwaGljOiB0cnVlfWAgaXMgcGFzcyBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIHRoZQogICAgYERTLmJlbG9uZ3NUb2AgZnVuY3Rpb24uCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5Db21tZW50U2VyaWFsaXplciA9IERTLkpTT05TZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIHNlcmlhbGl6ZVBvbHltb3JwaGljVHlwZTogZnVuY3Rpb24ocmVjb3JkLCBqc29uLCByZWxhdGlvbnNoaXApIHsKICAgICAgICB2YXIga2V5ID0gcmVsYXRpb25zaGlwLmtleSwKICAgICAgICAgICAgYmVsb25nc1RvID0gZ2V0KHJlY29yZCwga2V5KTsKICAgICAgICBrZXkgPSB0aGlzLmtleUZvckF0dHJpYnV0ZSA/IHRoaXMua2V5Rm9yQXR0cmlidXRlKGtleSkgOiBrZXk7CiAgICAgICAganNvbltrZXkgKyAiX3R5cGUiXSA9IGJlbG9uZ3NUby5jb25zdHJ1Y3Rvci50eXBlS2V5OwogICAgICB9CiAgICB9KTsKICAgYGBgCgogICAgQG1ldGhvZCBzZXJpYWxpemVQb2x5bW9ycGhpY1R5cGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBhcmFtIHtPYmplY3R9IGpzb24KICAgIEBwYXJhbSB7T2JqZWN0fSByZWxhdGlvbnNoaXAKICAqLwogIHNlcmlhbGl6ZVBvbHltb3JwaGljVHlwZTogRW1iZXIuSywKCiAgLy8gRVhUUkFDVAoKICAvKioKICAgIFRoZSBgZXh0cmFjdGAgbWV0aG9kIGlzIHVzZWQgdG8gZGVzZXJpYWxpemUgcGF5bG9hZCBkYXRhIGZyb20gdGhlCiAgICBzZXJ2ZXIuIEJ5IGRlZmF1bHQgdGhlIGBKU09OU2VyaWFsaXplcmAgZG9lcyBub3QgcHVzaCB0aGUgcmVjb3JkcwogICAgaW50byB0aGUgc3RvcmUuIEhvd2V2ZXIgcmVjb3JkcyB0aGF0IHN1YmNsYXNzIGBKU09OU2VyaWFsaXplcmAKICAgIHN1Y2ggYXMgdGhlIGBSRVNUU2VyaWFsaXplcmAgbWF5IHB1c2ggcmVjb3JkcyBpbnRvIHRoZSBzdG9yZSBhcwogICAgcGFydCBvZiB0aGUgZXh0cmFjdCBjYWxsLgoKICAgIFRoaXMgbWV0aG9kIGRlbGV0ZWdhdGVzIHRvIGEgbW9yZSBzcGVjaWZpYyBleHRyYWN0IG1ldGhvZCBiYXNlZCBvbgogICAgdGhlIGByZXF1ZXN0VHlwZWAuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIHZhciBnZXQgPSBFbWJlci5nZXQ7CiAgICBzb2NrZXQub24oJ21lc3NhZ2UnLCBmdW5jdGlvbihtZXNzYWdlKSB7CiAgICAgIHZhciBtb2RlbE5hbWUgPSBtZXNzYWdlLm1vZGVsOwogICAgICB2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YTsKICAgICAgdmFyIHR5cGUgPSBzdG9yZS5tb2RlbEZvcihtb2RlbE5hbWUpOwogICAgICB2YXIgc2VyaWFsaXplciA9IHN0b3JlLnNlcmlhbGl6ZXJGb3IodHlwZS50eXBlS2V5KTsKICAgICAgdmFyIHJlY29yZCA9IHNlcmlhbGl6ZXIuZXh0cmFjdChzdG9yZSwgdHlwZSwgZGF0YSwgZ2V0KGRhdGEsICdpZCcpLCAnc2luZ2xlJyk7CiAgICAgIHN0b3JlLnB1c2gobW9kZWxOYW1lLCByZWNvcmQpOwogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIGV4dHJhY3QKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICAgQHBhcmFtIHtTdHJpbmcgb3IgTnVtYmVyfSBpZAogICAgQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RUeXBlCiAgICBAcmV0dXJuIHtPYmplY3R9IGpzb24gVGhlIGRlc2VyaWFsaXplZCBwYXlsb2FkCiAgKi8KICBleHRyYWN0OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9hZCwgaWQsIHJlcXVlc3RUeXBlKSB7CiAgICB0aGlzLmV4dHJhY3RNZXRhKHN0b3JlLCB0eXBlLCBwYXlsb2FkKTsKCiAgICB2YXIgc3BlY2lmaWNFeHRyYWN0ID0gImV4dHJhY3QiICsgcmVxdWVzdFR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXF1ZXN0VHlwZS5zdWJzdHIoMSk7CiAgICByZXR1cm4gdGhpc1tzcGVjaWZpY0V4dHJhY3RdKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBpZCwgcmVxdWVzdFR5cGUpOwogIH0sCgogIC8qKgogICAgYGV4dHJhY3RGaW5kQWxsYCBpcyBhIGhvb2sgaW50byB0aGUgZXh0cmFjdCBtZXRob2QgdXNlZCB3aGVuIGEKICAgIGNhbGwgaXMgbWFkZSB0byBgRFMuU3RvcmUjZmluZEFsbGAuIEJ5IGRlZmF1bHQgdGhpcyBtZXRob2QgaXMgYW4KICAgIGFsaWFzIGZvciBbZXh0cmFjdEFycmF5XSgjbWV0aG9kX2V4dHJhY3RBcnJheSkuCgogICAgQG1ldGhvZCBleHRyYWN0RmluZEFsbAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkCiAgICBAcmV0dXJuIHtBcnJheX0gYXJyYXkgQW4gYXJyYXkgb2YgZGVzZXJpYWxpemVkIG9iamVjdHMKICAqLwogIGV4dHJhY3RGaW5kQWxsOiBhbGlhc01ldGhvZCgnZXh0cmFjdEFycmF5JyksCiAgLyoqCiAgICBgZXh0cmFjdEZpbmRRdWVyeWAgaXMgYSBob29rIGludG8gdGhlIGV4dHJhY3QgbWV0aG9kIHVzZWQgd2hlbiBhCiAgICBjYWxsIGlzIG1hZGUgdG8gYERTLlN0b3JlI2ZpbmRRdWVyeWAuIEJ5IGRlZmF1bHQgdGhpcyBtZXRob2QgaXMgYW4KICAgIGFsaWFzIGZvciBbZXh0cmFjdEFycmF5XSgjbWV0aG9kX2V4dHJhY3RBcnJheSkuCgogICAgQG1ldGhvZCBleHRyYWN0RmluZFF1ZXJ5CiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IHBheWxvYWQKICAgIEByZXR1cm4ge0FycmF5fSBhcnJheSBBbiBhcnJheSBvZiBkZXNlcmlhbGl6ZWQgb2JqZWN0cwogICovCiAgZXh0cmFjdEZpbmRRdWVyeTogYWxpYXNNZXRob2QoJ2V4dHJhY3RBcnJheScpLAogIC8qKgogICAgYGV4dHJhY3RGaW5kTWFueWAgaXMgYSBob29rIGludG8gdGhlIGV4dHJhY3QgbWV0aG9kIHVzZWQgd2hlbiBhCiAgICBjYWxsIGlzIG1hZGUgdG8gYERTLlN0b3JlI2ZpbmRNYW55YC4gQnkgZGVmYXVsdCB0aGlzIG1ldGhvZCBpcwogICAgYWxpYXMgZm9yIFtleHRyYWN0QXJyYXldKCNtZXRob2RfZXh0cmFjdEFycmF5KS4KCiAgICBAbWV0aG9kIGV4dHJhY3RGaW5kTWFueQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkCiAgICBAcmV0dXJuIHtBcnJheX0gYXJyYXkgQW4gYXJyYXkgb2YgZGVzZXJpYWxpemVkIG9iamVjdHMKICAqLwogIGV4dHJhY3RGaW5kTWFueTogYWxpYXNNZXRob2QoJ2V4dHJhY3RBcnJheScpLAogIC8qKgogICAgYGV4dHJhY3RGaW5kSGFzTWFueWAgaXMgYSBob29rIGludG8gdGhlIGV4dHJhY3QgbWV0aG9kIHVzZWQgd2hlbiBhCiAgICBjYWxsIGlzIG1hZGUgdG8gYERTLlN0b3JlI2ZpbmRIYXNNYW55YC4gQnkgZGVmYXVsdCB0aGlzIG1ldGhvZCBpcwogICAgYWxpYXMgZm9yIFtleHRyYWN0QXJyYXldKCNtZXRob2RfZXh0cmFjdEFycmF5KS4KCiAgICBAbWV0aG9kIGV4dHJhY3RGaW5kSGFzTWFueQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkCiAgICBAcmV0dXJuIHtBcnJheX0gYXJyYXkgQW4gYXJyYXkgb2YgZGVzZXJpYWxpemVkIG9iamVjdHMKICAqLwogIGV4dHJhY3RGaW5kSGFzTWFueTogYWxpYXNNZXRob2QoJ2V4dHJhY3RBcnJheScpLAoKICAvKioKICAgIGBleHRyYWN0Q3JlYXRlUmVjb3JkYCBpcyBhIGhvb2sgaW50byB0aGUgZXh0cmFjdCBtZXRob2QgdXNlZCB3aGVuIGEKICAgIGNhbGwgaXMgbWFkZSB0byBgRFMuU3RvcmUjY3JlYXRlUmVjb3JkYC4gQnkgZGVmYXVsdCB0aGlzIG1ldGhvZCBpcwogICAgYWxpYXMgZm9yIFtleHRyYWN0U2F2ZV0oI21ldGhvZF9leHRyYWN0U2F2ZSkuCgogICAgQG1ldGhvZCBleHRyYWN0Q3JlYXRlUmVjb3JkCiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IHBheWxvYWQKICAgIEByZXR1cm4ge09iamVjdH0ganNvbiBUaGUgZGVzZXJpYWxpemVkIHBheWxvYWQKICAqLwogIGV4dHJhY3RDcmVhdGVSZWNvcmQ6IGFsaWFzTWV0aG9kKCdleHRyYWN0U2F2ZScpLAogIC8qKgogICAgYGV4dHJhY3RVcGRhdGVSZWNvcmRgIGlzIGEgaG9vayBpbnRvIHRoZSBleHRyYWN0IG1ldGhvZCB1c2VkIHdoZW4KICAgIGEgY2FsbCBpcyBtYWRlIHRvIGBEUy5TdG9yZSN1cGRhdGVgLiBCeSBkZWZhdWx0IHRoaXMgbWV0aG9kIGlzIGFsaWFzCiAgICBmb3IgW2V4dHJhY3RTYXZlXSgjbWV0aG9kX2V4dHJhY3RTYXZlKS4KCiAgICBAbWV0aG9kIGV4dHJhY3RVcGRhdGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICAgQHJldHVybiB7T2JqZWN0fSBqc29uIFRoZSBkZXNlcmlhbGl6ZWQgcGF5bG9hZAogICovCiAgZXh0cmFjdFVwZGF0ZVJlY29yZDogYWxpYXNNZXRob2QoJ2V4dHJhY3RTYXZlJyksCiAgLyoqCiAgICBgZXh0cmFjdERlbGV0ZVJlY29yZGAgaXMgYSBob29rIGludG8gdGhlIGV4dHJhY3QgbWV0aG9kIHVzZWQgd2hlbgogICAgYSBjYWxsIGlzIG1hZGUgdG8gYERTLlN0b3JlI2RlbGV0ZVJlY29yZGAuIEJ5IGRlZmF1bHQgdGhpcyBtZXRob2QgaXMKICAgIGFsaWFzIGZvciBbZXh0cmFjdFNhdmVdKCNtZXRob2RfZXh0cmFjdFNhdmUpLgoKICAgIEBtZXRob2QgZXh0cmFjdERlbGV0ZVJlY29yZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkCiAgICBAcmV0dXJuIHtPYmplY3R9IGpzb24gVGhlIGRlc2VyaWFsaXplZCBwYXlsb2FkCiAgKi8KICBleHRyYWN0RGVsZXRlUmVjb3JkOiBhbGlhc01ldGhvZCgnZXh0cmFjdFNhdmUnKSwKCiAgLyoqCiAgICBgZXh0cmFjdEZpbmRgIGlzIGEgaG9vayBpbnRvIHRoZSBleHRyYWN0IG1ldGhvZCB1c2VkIHdoZW4KICAgIGEgY2FsbCBpcyBtYWRlIHRvIGBEUy5TdG9yZSNmaW5kYC4gQnkgZGVmYXVsdCB0aGlzIG1ldGhvZCBpcwogICAgYWxpYXMgZm9yIFtleHRyYWN0U2luZ2xlXSgjbWV0aG9kX2V4dHJhY3RTaW5nbGUpLgoKICAgIEBtZXRob2QgZXh0cmFjdEZpbmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICAgQHJldHVybiB7T2JqZWN0fSBqc29uIFRoZSBkZXNlcmlhbGl6ZWQgcGF5bG9hZAogICovCiAgZXh0cmFjdEZpbmQ6IGFsaWFzTWV0aG9kKCdleHRyYWN0U2luZ2xlJyksCiAgLyoqCiAgICBgZXh0cmFjdEZpbmRCZWxvbmdzVG9gIGlzIGEgaG9vayBpbnRvIHRoZSBleHRyYWN0IG1ldGhvZCB1c2VkIHdoZW4KICAgIGEgY2FsbCBpcyBtYWRlIHRvIGBEUy5TdG9yZSNmaW5kQmVsb25nc1RvYC4gQnkgZGVmYXVsdCB0aGlzIG1ldGhvZCBpcwogICAgYWxpYXMgZm9yIFtleHRyYWN0U2luZ2xlXSgjbWV0aG9kX2V4dHJhY3RTaW5nbGUpLgoKICAgIEBtZXRob2QgZXh0cmFjdEZpbmRCZWxvbmdzVG8KICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICAgQHJldHVybiB7T2JqZWN0fSBqc29uIFRoZSBkZXNlcmlhbGl6ZWQgcGF5bG9hZAogICovCiAgZXh0cmFjdEZpbmRCZWxvbmdzVG86IGFsaWFzTWV0aG9kKCdleHRyYWN0U2luZ2xlJyksCiAgLyoqCiAgICBgZXh0cmFjdFNhdmVgIGlzIGEgaG9vayBpbnRvIHRoZSBleHRyYWN0IG1ldGhvZCB1c2VkIHdoZW4gYSBjYWxsCiAgICBpcyBtYWRlIHRvIGBEUy5Nb2RlbCNzYXZlYC4gQnkgZGVmYXVsdCB0aGlzIG1ldGhvZCBpcyBhbGlhcwogICAgZm9yIFtleHRyYWN0U2luZ2xlXSgjbWV0aG9kX2V4dHJhY3RTaW5nbGUpLgoKICAgIEBtZXRob2QgZXh0cmFjdFNhdmUKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICAgQHJldHVybiB7T2JqZWN0fSBqc29uIFRoZSBkZXNlcmlhbGl6ZWQgcGF5bG9hZAogICovCiAgZXh0cmFjdFNhdmU6IGFsaWFzTWV0aG9kKCdleHRyYWN0U2luZ2xlJyksCgogIC8qKgogICAgYGV4dHJhY3RTaW5nbGVgIGlzIHVzZWQgdG8gZGVzZXJpYWxpemUgYSBzaW5nbGUgcmVjb3JkIHJldHVybmVkCiAgICBmcm9tIHRoZSBhZGFwdGVyLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuUG9zdFNlcmlhbGl6ZXIgPSBEUy5KU09OU2VyaWFsaXplci5leHRlbmQoewogICAgICBleHRyYWN0U2luZ2xlOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9hZCkgewogICAgICAgIHBheWxvYWQuY29tbWVudHMgPSBwYXlsb2FkLl9lbWJlZGRlZC5jb21tZW50OwogICAgICAgIGRlbGV0ZSBwYXlsb2FkLl9lbWJlZGRlZDsKCiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyKHN0b3JlLCB0eXBlLCBwYXlsb2FkKTsKICAgICAgfSwKICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBleHRyYWN0U2luZ2xlCiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IHBheWxvYWQKICAgIEByZXR1cm4ge09iamVjdH0ganNvbiBUaGUgZGVzZXJpYWxpemVkIHBheWxvYWQKICAqLwogIGV4dHJhY3RTaW5nbGU6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCBwYXlsb2FkKSB7CiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUodHlwZSwgcGF5bG9hZCk7CiAgfSwKCiAgLyoqCiAgICBgZXh0cmFjdEFycmF5YCBpcyB1c2VkIHRvIGRlc2VyaWFsaXplIGFuIGFycmF5IG9mIHJlY29yZHMKICAgIHJldHVybmVkIGZyb20gdGhlIGFkYXB0ZXIuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5Qb3N0U2VyaWFsaXplciA9IERTLkpTT05TZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIGV4dHJhY3RBcnJheTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHBheWxvYWQpIHsKICAgICAgICByZXR1cm4gcGF5bG9hZC5tYXAoZnVuY3Rpb24oanNvbikgewogICAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdFNpbmdsZShqc29uKTsKICAgICAgICB9LCB0aGlzKTsKICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIGV4dHJhY3RBcnJheQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkCiAgICBAcmV0dXJuIHtBcnJheX0gYXJyYXkgQW4gYXJyYXkgb2YgZGVzZXJpYWxpemVkIG9iamVjdHMKICAqLwogIGV4dHJhY3RBcnJheTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHBheWxvYWQpIHsKICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZSh0eXBlLCBwYXlsb2FkKTsKICB9LAoKICAvKioKICAgIGBleHRyYWN0TWV0YWAgaXMgdXNlZCB0byBkZXNlcmlhbGl6ZSBhbnkgbWV0YSBpbmZvcm1hdGlvbiBpbiB0aGUKICAgIGFkYXB0ZXIgcGF5bG9hZC4gQnkgZGVmYXVsdCBFbWJlciBEYXRhIGV4cGVjdHMgbWV0YSBpbmZvcm1hdGlvbiB0bwogICAgYmUgbG9jYXRlZCBvbiB0aGUgYG1ldGFgIHByb3BlcnR5IG9mIHRoZSBwYXlsb2FkIG9iamVjdC4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLlBvc3RTZXJpYWxpemVyID0gRFMuSlNPTlNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgZXh0cmFjdE1ldGE6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCBwYXlsb2FkKSB7CiAgICAgICAgaWYgKHBheWxvYWQgJiYgcGF5bG9hZC5fcGFnaW5hdGlvbikgewogICAgICAgICAgc3RvcmUubWV0YUZvclR5cGUodHlwZSwgcGF5bG9hZC5fcGFnaW5hdGlvbik7CiAgICAgICAgICBkZWxldGUgcGF5bG9hZC5fcGFnaW5hdGlvbjsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBleHRyYWN0TWV0YQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkCiAgKi8KICBleHRyYWN0TWV0YTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHBheWxvYWQpIHsKICAgIGlmIChwYXlsb2FkICYmIHBheWxvYWQubWV0YSkgewogICAgICBzdG9yZS5tZXRhRm9yVHlwZSh0eXBlLCBwYXlsb2FkLm1ldGEpOwogICAgICBkZWxldGUgcGF5bG9hZC5tZXRhOwogICAgfQogIH0sCgogIC8qKgogICBga2V5Rm9yQXR0cmlidXRlYCBjYW4gYmUgdXNlZCB0byBkZWZpbmUgcnVsZXMgZm9yIGhvdyB0byBjb252ZXJ0IGFuCiAgIGF0dHJpYnV0ZSBuYW1lIGluIHlvdXIgbW9kZWwgdG8gYSBrZXkgaW4geW91ciBKU09OLgoKICAgRXhhbXBsZQoKICAgYGBgamF2YXNjcmlwdAogICBBcHAuQXBwbGljYXRpb25TZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICBrZXlGb3JBdHRyaWJ1dGU6IGZ1bmN0aW9uKGF0dHIpIHsKICAgICAgIHJldHVybiBFbWJlci5TdHJpbmcudW5kZXJzY29yZShhdHRyKS50b1VwcGVyQ2FzZSgpOwogICAgIH0KICAgfSk7CiAgIGBgYAoKICAgQG1ldGhvZCBrZXlGb3JBdHRyaWJ1dGUKICAgQHBhcmFtIHtTdHJpbmd9IGtleQogICBAcmV0dXJuIHtTdHJpbmd9IG5vcm1hbGl6ZWQga2V5CiAgKi8KCgogIC8qKgogICBga2V5Rm9yUmVsYXRpb25zaGlwYCBjYW4gYmUgdXNlZCB0byBkZWZpbmUgYSBjdXN0b20ga2V5IHdoZW4KICAgc2VyaWFsaXplaW5nIHJlbGF0aW9uc2hpcCBwcm9wZXJ0aWVzLiBCeSBkZWZhdWx0IGBKU09OU2VyaWFsaXplcmAKICAgZG9lcyBub3QgcHJvdmlkZSBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG1ldGhvZC4KCiAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuUG9zdFNlcmlhbGl6ZXIgPSBEUy5KU09OU2VyaWFsaXplci5leHRlbmQoewogICAgICBrZXlGb3JSZWxhdGlvbnNoaXA6IGZ1bmN0aW9uKGtleSwgcmVsYXRpb25zaGlwKSB7CiAgICAgICAgIHJldHVybiAncmVsXycgKyBFbWJlci5TdHJpbmcudW5kZXJzY29yZShrZXkpOwogICAgICB9CiAgICB9KTsKICAgIGBgYAoKICAgQG1ldGhvZCBrZXlGb3JSZWxhdGlvbnNoaXAKICAgQHBhcmFtIHtTdHJpbmd9IGtleQogICBAcGFyYW0ge1N0cmluZ30gcmVsYXRpb25zaGlwIHR5cGUKICAgQHJldHVybiB7U3RyaW5nfSBub3JtYWxpemVkIGtleQogICovCgogIC8vIEhFTFBFUlMKCiAgLyoqCiAgIEBtZXRob2QgdHJhbnNmb3JtRm9yCiAgIEBwcml2YXRlCiAgIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVUeXBlCiAgIEBwYXJhbSB7Qm9vbGVhbn0gc2tpcEFzc2VydGlvbgogICBAcmV0dXJuIHtEUy5UcmFuc2Zvcm19IHRyYW5zZm9ybQogICovCiAgdHJhbnNmb3JtRm9yOiBmdW5jdGlvbihhdHRyaWJ1dGVUeXBlLCBza2lwQXNzZXJ0aW9uKSB7CiAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5jb250YWluZXIubG9va3VwKCd0cmFuc2Zvcm06JyArIGF0dHJpYnV0ZVR5cGUpOwogICAgRW1iZXIuYXNzZXJ0KCJVbmFibGUgdG8gZmluZCB0cmFuc2Zvcm0gZm9yICciICsgYXR0cmlidXRlVHlwZSArICInIiwgc2tpcEFzc2VydGlvbiB8fCAhIXRyYW5zZm9ybSk7CiAgICByZXR1cm4gdHJhbnNmb3JtOwogIH0KfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBjYXBpdGFsaXplID0gRW1iZXIuU3RyaW5nLmNhcGl0YWxpemUsIHVuZGVyc2NvcmUgPSBFbWJlci5TdHJpbmcudW5kZXJzY29yZSwgRFMgPSB3aW5kb3cuRFMgOwoKLyoqCiAgRXh0ZW5kIGBFbWJlci5EYXRhQWRhcHRlcmAgd2l0aCBFRCBzcGVjaWZpYyBjb2RlLgoKICBAY2xhc3MgRGVidWdBZGFwdGVyCiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRzIEVtYmVyLkRhdGFBZGFwdGVyCiAgQHByaXZhdGUKKi8KRFMuRGVidWdBZGFwdGVyID0gRW1iZXIuRGF0YUFkYXB0ZXIuZXh0ZW5kKHsKICBnZXRGaWx0ZXJzOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiBbCiAgICAgIHsgbmFtZTogJ2lzTmV3JywgZGVzYzogJ05ldycgfSwKICAgICAgeyBuYW1lOiAnaXNNb2RpZmllZCcsIGRlc2M6ICdNb2RpZmllZCcgfSwKICAgICAgeyBuYW1lOiAnaXNDbGVhbicsIGRlc2M6ICdDbGVhbicgfQogICAgXTsKICB9LAoKICBkZXRlY3Q6IGZ1bmN0aW9uKGtsYXNzKSB7CiAgICByZXR1cm4ga2xhc3MgIT09IERTLk1vZGVsICYmIERTLk1vZGVsLmRldGVjdChrbGFzcyk7CiAgfSwKCiAgY29sdW1uc0ZvclR5cGU6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIHZhciBjb2x1bW5zID0gW3sgbmFtZTogJ2lkJywgZGVzYzogJ0lkJyB9XSwgY291bnQgPSAwLCBzZWxmID0gdGhpczsKICAgIGdldCh0eXBlLCAnYXR0cmlidXRlcycpLmZvckVhY2goZnVuY3Rpb24obmFtZSwgbWV0YSkgewogICAgICAgIGlmIChjb3VudCsrID4gc2VsZi5hdHRyaWJ1dGVMaW1pdCkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICB2YXIgZGVzYyA9IGNhcGl0YWxpemUodW5kZXJzY29yZShuYW1lKS5yZXBsYWNlKCdfJywgJyAnKSk7CiAgICAgICAgY29sdW1ucy5wdXNoKHsgbmFtZTogbmFtZSwgZGVzYzogZGVzYyB9KTsKICAgIH0pOwogICAgcmV0dXJuIGNvbHVtbnM7CiAgfSwKCiAgZ2V0UmVjb3JkczogZnVuY3Rpb24odHlwZSkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdzdG9yZScpLmFsbCh0eXBlKTsKICB9LAoKICBnZXRSZWNvcmRDb2x1bW5WYWx1ZXM6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgdmFyIHNlbGYgPSB0aGlzLCBjb3VudCA9IDAsCiAgICAgICAgY29sdW1uVmFsdWVzID0geyBpZDogZ2V0KHJlY29yZCwgJ2lkJykgfTsKCiAgICByZWNvcmQuZWFjaEF0dHJpYnV0ZShmdW5jdGlvbihrZXkpIHsKICAgICAgaWYgKGNvdW50KysgPiBzZWxmLmF0dHJpYnV0ZUxpbWl0KSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHZhciB2YWx1ZSA9IGdldChyZWNvcmQsIGtleSk7CiAgICAgIGNvbHVtblZhbHVlc1trZXldID0gdmFsdWU7CiAgICB9KTsKICAgIHJldHVybiBjb2x1bW5WYWx1ZXM7CiAgfSwKCiAgZ2V0UmVjb3JkS2V5d29yZHM6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgdmFyIGtleXdvcmRzID0gW10sIGtleXMgPSBFbWJlci5BKFsnaWQnXSk7CiAgICByZWNvcmQuZWFjaEF0dHJpYnV0ZShmdW5jdGlvbihrZXkpIHsKICAgICAga2V5cy5wdXNoKGtleSk7CiAgICB9KTsKICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAga2V5d29yZHMucHVzaChnZXQocmVjb3JkLCBrZXkpKTsKICAgIH0pOwogICAgcmV0dXJuIGtleXdvcmRzOwogIH0sCgogIGdldFJlY29yZEZpbHRlclZhbHVlczogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICByZXR1cm4gewogICAgICBpc05ldzogcmVjb3JkLmdldCgnaXNOZXcnKSwKICAgICAgaXNNb2RpZmllZDogcmVjb3JkLmdldCgnaXNEaXJ0eScpICYmICFyZWNvcmQuZ2V0KCdpc05ldycpLAogICAgICBpc0NsZWFuOiAhcmVjb3JkLmdldCgnaXNEaXJ0eScpCiAgICB9OwogIH0sCgogIGdldFJlY29yZENvbG9yOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgIHZhciBjb2xvciA9ICdibGFjayc7CiAgICBpZiAocmVjb3JkLmdldCgnaXNOZXcnKSkgewogICAgICBjb2xvciA9ICdncmVlbic7CiAgICB9IGVsc2UgaWYgKHJlY29yZC5nZXQoJ2lzRGlydHknKSkgewogICAgICBjb2xvciA9ICdibHVlJzsKICAgIH0KICAgIHJldHVybiBjb2xvcjsKICB9LAoKICBvYnNlcnZlUmVjb3JkOiBmdW5jdGlvbihyZWNvcmQsIHJlY29yZFVwZGF0ZWQpIHsKICAgIHZhciByZWxlYXNlTWV0aG9kcyA9IEVtYmVyLkEoKSwgc2VsZiA9IHRoaXMsCiAgICAgICAga2V5c1RvT2JzZXJ2ZSA9IEVtYmVyLkEoWydpZCcsICdpc05ldycsICdpc0RpcnR5J10pOwoKICAgIHJlY29yZC5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKGtleSkgewogICAgICBrZXlzVG9PYnNlcnZlLnB1c2goa2V5KTsKICAgIH0pOwoKICAgIGtleXNUb09ic2VydmUuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICByZWNvcmRVcGRhdGVkKHNlbGYud3JhcFJlY29yZChyZWNvcmQpKTsKICAgICAgfTsKICAgICAgRW1iZXIuYWRkT2JzZXJ2ZXIocmVjb3JkLCBrZXksIGhhbmRsZXIpOwogICAgICByZWxlYXNlTWV0aG9kcy5wdXNoKGZ1bmN0aW9uKCkgewogICAgICAgIEVtYmVyLnJlbW92ZU9ic2VydmVyKHJlY29yZCwga2V5LCBoYW5kbGVyKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICB2YXIgcmVsZWFzZSA9IGZ1bmN0aW9uKCkgewogICAgICByZWxlYXNlTWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7IGZuKCk7IH0gKTsKICAgIH07CgogICAgcmV0dXJuIHJlbGVhc2U7CiAgfQoKfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIFRoZSBgRFMuVHJhbnNmb3JtYCBjbGFzcyBpcyB1c2VkIHRvIHNlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgbW9kZWwKICBhdHRyaWJ1dGVzIHdoZW4gdGhleSBhcmUgc2F2ZWQgb3IgbG9hZGVkIGZyb20gYW4KICBhZGFwdGVyLiBTdWJjbGFzc2luZyBgRFMuVHJhbnNmb3JtYCBpcyB1c2VmdWwgZm9yIGNyZWF0aW5nIGN1c3RvbQogIGF0dHJpYnV0ZXMuIEFsbCBzdWJjbGFzc2VzIG9mIGBEUy5UcmFuc2Zvcm1gIG11c3QgaW1wbGVtZW50IGEKICBgc2VyaWFsaXplYCBhbmQgYSBgZGVzZXJpYWxpemVgIG1ldGhvZC4KCiAgRXhhbXBsZQoKICBgYGBqYXZhc2NyaXB0CiAgQXBwLlJhd1RyYW5zZm9ybSA9IERTLlRyYW5zZm9ybS5leHRlbmQoewogICAgZGVzZXJpYWxpemU6IGZ1bmN0aW9uKHNlcmlhbGl6ZWQpIHsKICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7CiAgICB9LAogICAgc2VyaWFsaXplOiBmdW5jdGlvbihkZXNlcmlhbGl6ZWQpIHsKICAgICAgcmV0dXJuIGRlc2VyaWFsaXplZDsKICAgIH0KICB9KTsKICBgYGAKCiAgVXNhZ2UKCiAgYGBgamF2YXNjcmlwdAogIHZhciBhdHRyID0gRFMuYXR0cjsKICBBcHAuUmVxdWlyZW1lbnQgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgbmFtZTogYXR0cignc3RyaW5nJyksCiAgICBvcHRpb25zQXJyYXk6IGF0dHIoJ3JhdycpCiAgfSk7CiAgYGBgCgogIEBjbGFzcyBUcmFuc2Zvcm0KICBAbmFtZXNwYWNlIERTCiAqLwpEUy5UcmFuc2Zvcm0gPSBFbWJlci5PYmplY3QuZXh0ZW5kKHsKICAvKioKICAgIFdoZW4gZ2l2ZW4gYSBkZXNlcmlhbGl6ZWQgdmFsdWUgZnJvbSBhIHJlY29yZCBhdHRyaWJ1dGUgdGhpcwogICAgbWV0aG9kIG11c3QgcmV0dXJuIHRoZSBzZXJpYWxpemVkIHZhbHVlLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKGRlc2VyaWFsaXplZCkgewogICAgICByZXR1cm4gRW1iZXIuaXNFbXB0eShkZXNlcmlhbGl6ZWQpID8gbnVsbCA6IE51bWJlcihkZXNlcmlhbGl6ZWQpOwogICAgfQogICAgYGBgCgogICAgQG1ldGhvZCBzZXJpYWxpemUKICAgIEBwYXJhbSBkZXNlcmlhbGl6ZWQgVGhlIGRlc2VyaWFsaXplZCB2YWx1ZQogICAgQHJldHVybiBUaGUgc2VyaWFsaXplZCB2YWx1ZQogICovCiAgc2VyaWFsaXplOiBFbWJlci5yZXF1aXJlZCgpLAoKICAvKioKICAgIFdoZW4gZ2l2ZW4gYSBzZXJpYWxpemUgdmFsdWUgZnJvbSBhIEpTT04gb2JqZWN0IHRoaXMgbWV0aG9kIG11c3QKICAgIHJldHVybiB0aGUgZGVzZXJpYWxpemVkIHZhbHVlIGZvciB0aGUgcmVjb3JkIGF0dHJpYnV0ZS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgZGVzZXJpYWxpemU6IGZ1bmN0aW9uKHNlcmlhbGl6ZWQpIHsKICAgICAgcmV0dXJuIGVtcHR5KHNlcmlhbGl6ZWQpID8gbnVsbCA6IE51bWJlcihzZXJpYWxpemVkKTsKICAgIH0KICAgIGBgYAoKICAgIEBtZXRob2QgZGVzZXJpYWxpemUKICAgIEBwYXJhbSBzZXJpYWxpemVkIFRoZSBzZXJpYWxpemVkIHZhbHVlCiAgICBAcmV0dXJuIFRoZSBkZXNlcmlhbGl6ZWQgdmFsdWUKICAqLwogIGRlc2VyaWFsaXplOiBFbWJlci5yZXF1aXJlZCgpCgp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKCi8qKgogIFRoZSBgRFMuQm9vbGVhblRyYW5zZm9ybWAgY2xhc3MgaXMgdXNlZCB0byBzZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplCiAgYm9vbGVhbiBhdHRyaWJ1dGVzIG9uIEVtYmVyIERhdGEgcmVjb3JkIG9iamVjdHMuIFRoaXMgdHJhbnNmb3JtIGlzCiAgdXNlZCB3aGVuIGBib29sZWFuYCBpcyBwYXNzZWQgYXMgdGhlIHR5cGUgcGFyYW1ldGVyIHRvIHRoZQogIFtEUy5hdHRyXSguLi8uLi9kYXRhI21ldGhvZF9hdHRyKSBmdW5jdGlvbi4KCiAgVXNhZ2UKCiAgYGBgamF2YXNjcmlwdAogIHZhciBhdHRyID0gRFMuYXR0cjsKICBBcHAuVXNlciA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICBpc0FkbWluOiBhdHRyKCdib29sZWFuJyksCiAgICBuYW1lOiBhdHRyKCdzdHJpbmcnKSwKICAgIGVtYWlsOiBhdHRyKCdzdHJpbmcnKQogIH0pOwogIGBgYAoKICBAY2xhc3MgQm9vbGVhblRyYW5zZm9ybQogIEBleHRlbmRzIERTLlRyYW5zZm9ybQogIEBuYW1lc3BhY2UgRFMKICovCkRTLkJvb2xlYW5UcmFuc2Zvcm0gPSBEUy5UcmFuc2Zvcm0uZXh0ZW5kKHsKICBkZXNlcmlhbGl6ZTogZnVuY3Rpb24oc2VyaWFsaXplZCkgewogICAgdmFyIHR5cGUgPSB0eXBlb2Ygc2VyaWFsaXplZDsKCiAgICBpZiAodHlwZSA9PT0gImJvb2xlYW4iKSB7CiAgICAgIHJldHVybiBzZXJpYWxpemVkOwogICAgfSBlbHNlIGlmICh0eXBlID09PSAic3RyaW5nIikgewogICAgICByZXR1cm4gc2VyaWFsaXplZC5tYXRjaCgvXnRydWUkfF50JHxeMSQvaSkgIT09IG51bGw7CiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICJudW1iZXIiKSB7CiAgICAgIHJldHVybiBzZXJpYWxpemVkID09PSAxOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sCgogIHNlcmlhbGl6ZTogZnVuY3Rpb24oZGVzZXJpYWxpemVkKSB7CiAgICByZXR1cm4gQm9vbGVhbihkZXNlcmlhbGl6ZWQpOwogIH0KfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIFRoZSBgRFMuRGF0ZVRyYW5zZm9ybWAgY2xhc3MgaXMgdXNlZCB0byBzZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplCiAgZGF0ZSBhdHRyaWJ1dGVzIG9uIEVtYmVyIERhdGEgcmVjb3JkIG9iamVjdHMuIFRoaXMgdHJhbnNmb3JtIGlzIHVzZWQKICB3aGVuIGBkYXRlYCBpcyBwYXNzZWQgYXMgdGhlIHR5cGUgcGFyYW1ldGVyIHRvIHRoZQogIFtEUy5hdHRyXSguLi8uLi9kYXRhI21ldGhvZF9hdHRyKSBmdW5jdGlvbi4KCiAgYGBgamF2YXNjcmlwdAogIHZhciBhdHRyID0gRFMuYXR0cjsKICBBcHAuU2NvcmUgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgdmFsdWU6IGF0dHIoJ251bWJlcicpLAogICAgcGxheWVyOiBEUy5iZWxvbmdzVG8oJ3BsYXllcicpLAogICAgZGF0ZTogYXR0cignZGF0ZScpCiAgfSk7CiAgYGBgCgogIEBjbGFzcyBEYXRlVHJhbnNmb3JtCiAgQGV4dGVuZHMgRFMuVHJhbnNmb3JtCiAgQG5hbWVzcGFjZSBEUwogKi8KRFMuRGF0ZVRyYW5zZm9ybSA9IERTLlRyYW5zZm9ybS5leHRlbmQoewoKICBkZXNlcmlhbGl6ZTogZnVuY3Rpb24oc2VyaWFsaXplZCkgewogICAgdmFyIHR5cGUgPSB0eXBlb2Ygc2VyaWFsaXplZDsKCiAgICBpZiAodHlwZSA9PT0gInN0cmluZyIpIHsKICAgICAgcmV0dXJuIG5ldyBEYXRlKEVtYmVyLkRhdGUucGFyc2Uoc2VyaWFsaXplZCkpOwogICAgfSBlbHNlIGlmICh0eXBlID09PSAibnVtYmVyIikgewogICAgICByZXR1cm4gbmV3IERhdGUoc2VyaWFsaXplZCk7CiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6ZWQgPT09IG51bGwgfHwgc2VyaWFsaXplZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBub3QgcHJlc2VudCBpbiB0aGUgZGF0YSwKICAgICAgLy8gcmV0dXJuIHVuZGVmaW5lZCwgbm90IG51bGwuCiAgICAgIHJldHVybiBzZXJpYWxpemVkOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSwKCiAgc2VyaWFsaXplOiBmdW5jdGlvbihkYXRlKSB7CiAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHsKICAgICAgdmFyIGRheXMgPSBbIlN1biIsICJNb24iLCAiVHVlIiwgIldlZCIsICJUaHUiLCAiRnJpIiwgIlNhdCJdOwogICAgICB2YXIgbW9udGhzID0gWyJKYW4iLCAiRmViIiwgIk1hciIsICJBcHIiLCAiTWF5IiwgIkp1biIsICJKdWwiLCAiQXVnIiwgIlNlcCIsICJPY3QiLCAiTm92IiwgIkRlYyJdOwoKICAgICAgdmFyIHBhZCA9IGZ1bmN0aW9uKG51bSkgewogICAgICAgIHJldHVybiBudW0gPCAxMCA/ICIwIitudW0gOiAiIitudW07CiAgICAgIH07CgogICAgICB2YXIgdXRjWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwKICAgICAgICAgIHV0Y01vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpLAogICAgICAgICAgdXRjRGF5T2ZNb250aCA9IGRhdGUuZ2V0VVRDRGF0ZSgpLAogICAgICAgICAgdXRjRGF5ID0gZGF0ZS5nZXRVVENEYXkoKSwKICAgICAgICAgIHV0Y0hvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpLAogICAgICAgICAgdXRjTWludXRlcyA9IGRhdGUuZ2V0VVRDTWludXRlcygpLAogICAgICAgICAgdXRjU2Vjb25kcyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpOwoKCiAgICAgIHZhciBkYXlPZldlZWsgPSBkYXlzW3V0Y0RheV07CiAgICAgIHZhciBkYXlPZk1vbnRoID0gcGFkKHV0Y0RheU9mTW9udGgpOwogICAgICB2YXIgbW9udGggPSBtb250aHNbdXRjTW9udGhdOwoKICAgICAgcmV0dXJuIGRheU9mV2VlayArICIsICIgKyBkYXlPZk1vbnRoICsgIiAiICsgbW9udGggKyAiICIgKyB1dGNZZWFyICsgIiAiICsKICAgICAgICAgICAgIHBhZCh1dGNIb3VycykgKyAiOiIgKyBwYWQodXRjTWludXRlcykgKyAiOiIgKyBwYWQodXRjU2Vjb25kcykgKyAiIEdNVCI7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9IAoKfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7CnZhciBlbXB0eSA9IEVtYmVyLmlzRW1wdHk7Ci8qKgogIFRoZSBgRFMuTnVtYmVyVHJhbnNmb3JtYCBjbGFzcyBpcyB1c2VkIHRvIHNlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUKICBudW1lcmljIGF0dHJpYnV0ZXMgb24gRW1iZXIgRGF0YSByZWNvcmQgb2JqZWN0cy4gVGhpcyB0cmFuc2Zvcm0gaXMKICB1c2VkIHdoZW4gYG51bWJlcmAgaXMgcGFzc2VkIGFzIHRoZSB0eXBlIHBhcmFtZXRlciB0byB0aGUKICBbRFMuYXR0cl0oLi4vLi4vZGF0YSNtZXRob2RfYXR0cikgZnVuY3Rpb24uCgogIFVzYWdlCgogIGBgYGphdmFzY3JpcHQKICB2YXIgYXR0ciA9IERTLmF0dHI7CiAgQXBwLlNjb3JlID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIHZhbHVlOiBhdHRyKCdudW1iZXInKSwKICAgIHBsYXllcjogRFMuYmVsb25nc1RvKCdwbGF5ZXInKSwKICAgIGRhdGU6IGF0dHIoJ2RhdGUnKQogIH0pOwogIGBgYAoKICBAY2xhc3MgTnVtYmVyVHJhbnNmb3JtCiAgQGV4dGVuZHMgRFMuVHJhbnNmb3JtCiAgQG5hbWVzcGFjZSBEUwogKi8KRFMuTnVtYmVyVHJhbnNmb3JtID0gRFMuVHJhbnNmb3JtLmV4dGVuZCh7CgogIGRlc2VyaWFsaXplOiBmdW5jdGlvbihzZXJpYWxpemVkKSB7CiAgICByZXR1cm4gZW1wdHkoc2VyaWFsaXplZCkgPyBudWxsIDogTnVtYmVyKHNlcmlhbGl6ZWQpOwogIH0sCgogIHNlcmlhbGl6ZTogZnVuY3Rpb24oZGVzZXJpYWxpemVkKSB7CiAgICByZXR1cm4gZW1wdHkoZGVzZXJpYWxpemVkKSA/IG51bGwgOiBOdW1iZXIoZGVzZXJpYWxpemVkKTsKICB9Cn0pOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewp2YXIgbm9uZSA9IEVtYmVyLmlzTm9uZTsKCi8qKgogIFRoZSBgRFMuU3RyaW5nVHJhbnNmb3JtYCBjbGFzcyBpcyB1c2VkIHRvIHNlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUKICBzdHJpbmcgYXR0cmlidXRlcyBvbiBFbWJlciBEYXRhIHJlY29yZCBvYmplY3RzLiBUaGlzIHRyYW5zZm9ybSBpcwogIHVzZWQgd2hlbiBgc3RyaW5nYCBpcyBwYXNzZWQgYXMgdGhlIHR5cGUgcGFyYW1ldGVyIHRvIHRoZQogIFtEUy5hdHRyXSguLi8uLi9kYXRhI21ldGhvZF9hdHRyKSBmdW5jdGlvbi4KCiAgVXNhZ2UKCiAgYGBgamF2YXNjcmlwdAogIHZhciBhdHRyID0gRFMuYXR0cjsKICBBcHAuVXNlciA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICBpc0FkbWluOiBhdHRyKCdib29sZWFuJyksCiAgICBuYW1lOiBhdHRyKCdzdHJpbmcnKSwKICAgIGVtYWlsOiBhdHRyKCdzdHJpbmcnKQogIH0pOwogIGBgYAoKICBAY2xhc3MgU3RyaW5nVHJhbnNmb3JtCiAgQGV4dGVuZHMgRFMuVHJhbnNmb3JtCiAgQG5hbWVzcGFjZSBEUwogKi8KRFMuU3RyaW5nVHJhbnNmb3JtID0gRFMuVHJhbnNmb3JtLmV4dGVuZCh7CgogIGRlc2VyaWFsaXplOiBmdW5jdGlvbihzZXJpYWxpemVkKSB7CiAgICByZXR1cm4gbm9uZShzZXJpYWxpemVkKSA/IG51bGwgOiBTdHJpbmcoc2VyaWFsaXplZCk7CiAgfSwKCiAgc2VyaWFsaXplOiBmdW5jdGlvbihkZXNlcmlhbGl6ZWQpIHsKICAgIHJldHVybiBub25lKGRlc2VyaWFsaXplZCkgPyBudWxsIDogU3RyaW5nKGRlc2VyaWFsaXplZCk7CiAgfQoKfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFyIHNldCA9IEVtYmVyLnNldDsKCi8qCiAgVGhpcyBjb2RlIHJlZ2lzdGVycyBhbiBpbmplY3Rpb24gZm9yIEVtYmVyLkFwcGxpY2F0aW9uLgoKICBJZiBhbiBFbWJlci5qcyBkZXZlbG9wZXIgZGVmaW5lcyBhIHN1YmNsYXNzIG9mIERTLlN0b3JlIG9uIHRoZWlyIGFwcGxpY2F0aW9uLAogIHRoaXMgY29kZSB3aWxsIGF1dG9tYXRpY2FsbHkgaW5zdGFudGlhdGUgaXQgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIG9uIHRoZQogIHJvdXRlci4KCiAgQWRkaXRpb25hbGx5LCBhZnRlciBhbiBhcHBsaWNhdGlvbidzIGNvbnRyb2xsZXJzIGhhdmUgYmVlbiBpbmplY3RlZCwgdGhleSB3aWxsCiAgZWFjaCBoYXZlIHRoZSBzdG9yZSBtYWRlIGF2YWlsYWJsZSB0byB0aGVtLgoKICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhbiBFbWJlci5qcyBhcHBsaWNhdGlvbiB3aXRoIHRoZSBmb2xsb3dpbmcgY2xhc3NlczoKCiAgQXBwLlN0b3JlID0gRFMuU3RvcmUuZXh0ZW5kKHsKICAgIGFkYXB0ZXI6ICdjdXN0b20nCiAgfSk7CgogIEFwcC5Qb3N0c0NvbnRyb2xsZXIgPSBFbWJlci5BcnJheUNvbnRyb2xsZXIuZXh0ZW5kKHsKICAgIC8vIC4uLgogIH0pOwoKICBXaGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBpbml0aWFsaXplZCwgYEFwcC5TdG9yZWAgd2lsbCBhdXRvbWF0aWNhbGx5IGJlCiAgaW5zdGFudGlhdGVkLCBhbmQgdGhlIGluc3RhbmNlIG9mIGBBcHAuUG9zdHNDb250cm9sbGVyYCB3aWxsIGhhdmUgaXRzIGBzdG9yZWAKICBwcm9wZXJ0eSBzZXQgdG8gdGhhdCBpbnN0YW5jZS4KCiAgTm90ZSB0aGF0IHRoaXMgY29kZSB3aWxsIG9ubHkgYmUgcnVuIGlmIHRoZSBgZW1iZXItYXBwbGljYXRpb25gIHBhY2thZ2UgaXMKICBsb2FkZWQuIElmIEVtYmVyIERhdGEgaXMgYmVpbmcgdXNlZCBpbiBhbiBlbnZpcm9ubWVudCBvdGhlciB0aGFuIGEKICB0eXBpY2FsIGFwcGxpY2F0aW9uIChlLmcuLCBub2RlLmpzIHdoZXJlIG9ubHkgYGVtYmVyLXJ1bnRpbWVgIGlzIGF2YWlsYWJsZSksCiAgdGhpcyBjb2RlIHdpbGwgYmUgaWdub3JlZC4KKi8KCkVtYmVyLm9uTG9hZCgnRW1iZXIuQXBwbGljYXRpb24nLCBmdW5jdGlvbihBcHBsaWNhdGlvbikgewogIEFwcGxpY2F0aW9uLmluaXRpYWxpemVyKHsKICAgIG5hbWU6ICJzdG9yZSIsCgogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY29udGFpbmVyLCBhcHBsaWNhdGlvbikgewogICAgICBhcHBsaWNhdGlvbi5yZWdpc3Rlcignc3RvcmU6bWFpbicsIGFwcGxpY2F0aW9uLlN0b3JlIHx8IERTLlN0b3JlKTsKICAgICAgYXBwbGljYXRpb24ucmVnaXN0ZXIoJ3NlcmlhbGl6ZXI6X2RlZmF1bHQnLCBEUy5KU09OU2VyaWFsaXplcik7CiAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKCdzZXJpYWxpemVyOl9yZXN0JywgRFMuUkVTVFNlcmlhbGl6ZXIpOwogICAgICBhcHBsaWNhdGlvbi5yZWdpc3RlcignYWRhcHRlcjpfcmVzdCcsIERTLlJFU1RBZGFwdGVyKTsKCiAgICAgIC8vIEVhZ2VybHkgZ2VuZXJhdGUgdGhlIHN0b3JlIHNvIGRlZmF1bHRTdG9yZSBpcyBwb3B1bGF0ZWQuCiAgICAgIC8vIFRPRE86IERvIHRoaXMgaW4gYSBmaW5pc2hlciBob29rCiAgICAgIGNvbnRhaW5lci5sb29rdXAoJ3N0b3JlOm1haW4nKTsKICAgIH0KICB9KTsKCiAgQXBwbGljYXRpb24uaW5pdGlhbGl6ZXIoewogICAgbmFtZTogInRyYW5zZm9ybXMiLAogICAgYmVmb3JlOiAic3RvcmUiLAoKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGNvbnRhaW5lciwgYXBwbGljYXRpb24pIHsKICAgICAgYXBwbGljYXRpb24ucmVnaXN0ZXIoJ3RyYW5zZm9ybTpib29sZWFuJywgRFMuQm9vbGVhblRyYW5zZm9ybSk7CiAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKCd0cmFuc2Zvcm06ZGF0ZScsIERTLkRhdGVUcmFuc2Zvcm0pOwogICAgICBhcHBsaWNhdGlvbi5yZWdpc3RlcigndHJhbnNmb3JtOm51bWJlcicsIERTLk51bWJlclRyYW5zZm9ybSk7CiAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKCd0cmFuc2Zvcm06c3RyaW5nJywgRFMuU3RyaW5nVHJhbnNmb3JtKTsKICAgIH0KICB9KTsKCiAgQXBwbGljYXRpb24uaW5pdGlhbGl6ZXIoewogICAgbmFtZTogImRhdGFBZGFwdGVyIiwKICAgIGJlZm9yZTogInN0b3JlIiwKCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihjb250YWluZXIsIGFwcGxpY2F0aW9uKSB7CiAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKCdkYXRhQWRhcHRlcjptYWluJywgRFMuRGVidWdBZGFwdGVyKTsKICAgIH0KICB9KTsKCiAgQXBwbGljYXRpb24uaW5pdGlhbGl6ZXIoewogICAgbmFtZTogImluamVjdFN0b3JlIiwKICAgIGJlZm9yZTogInN0b3JlIiwKCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihjb250YWluZXIsIGFwcGxpY2F0aW9uKSB7CiAgICAgIGFwcGxpY2F0aW9uLmluamVjdCgnY29udHJvbGxlcicsICdzdG9yZScsICdzdG9yZTptYWluJyk7CiAgICAgIGFwcGxpY2F0aW9uLmluamVjdCgncm91dGUnLCAnc3RvcmUnLCAnc3RvcmU6bWFpbicpOwogICAgICBhcHBsaWNhdGlvbi5pbmplY3QoJ3NlcmlhbGl6ZXInLCAnc3RvcmUnLCAnc3RvcmU6bWFpbicpOwogICAgICBhcHBsaWNhdGlvbi5pbmplY3QoJ2RhdGFBZGFwdGVyJywgJ3N0b3JlJywgJ3N0b3JlOm1haW4nKTsKICAgIH0KICB9KTsKCn0pOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCi8qKgogIERhdGUucGFyc2Ugd2l0aCBwcm9ncmVzc2l2ZSBlbmhhbmNlbWVudCBmb3IgSVNPIDg2MDEgPGh0dHBzOi8vZ2l0aHViLmNvbS9jc25vdmVyL2pzLWlzbzg2MDE+CgogIMKpIDIwMTEgQ29saW4gU25vdmVyIDxodHRwOi8vemV0YWZsZWV0LmNvbT4KCiAgUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuCgogIEBjbGFzcyBEYXRlCiAgQG5hbWVzcGFjZSBFbWJlcgogIEBzdGF0aWMKKi8KRW1iZXIuRGF0ZSA9IEVtYmVyLkRhdGUgfHwge307Cgp2YXIgb3JpZ1BhcnNlID0gRGF0ZS5wYXJzZSwgbnVtZXJpY0tleXMgPSBbIDEsIDQsIDUsIDYsIDcsIDEwLCAxMSBdOwoKLyoqCiAgQG1ldGhvZCBwYXJzZQogIEBwYXJhbSBkYXRlCiovCkVtYmVyLkRhdGUucGFyc2UgPSBmdW5jdGlvbiAoZGF0ZSkgewogICAgdmFyIHRpbWVzdGFtcCwgc3RydWN0LCBtaW51dGVzT2Zmc2V0ID0gMDsKCiAgICAvLyBFUzUgwqcxNS45LjQuMiBzdGF0ZXMgdGhhdCB0aGUgc3RyaW5nIHNob3VsZCBhdHRlbXB0IHRvIGJlIHBhcnNlZCBhcyBhIERhdGUgVGltZSBTdHJpbmcgRm9ybWF0IHN0cmluZwogICAgLy8gYmVmb3JlIGZhbGxpbmcgYmFjayB0byBhbnkgaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgZGF0ZSBwYXJzaW5nLCBzbyB0aGF04oCZcyB3aGF0IHdlIGRvLCBldmVuIGlmIG5hdGl2ZQogICAgLy8gaW1wbGVtZW50YXRpb25zIGNvdWxkIGJlIGZhc3RlcgogICAgLy8gICAgICAgICAgICAgIDEgWVlZWSAgICAgICAgICAgICAgICAyIE1NICAgICAgIDMgREQgICAgICAgICAgIDQgSEggICAgNSBtbSAgICAgICA2IHNzICAgICAgICA3IG1zZWMgICAgICAgIDggWiA5IMKxICAgIDEwIHR6SEggICAgMTEgdHptbQogICAgaWYgKChzdHJ1Y3QgPSAvXihcZHs0fXxbK1wtXVxkezZ9KSg/Oi0oXGR7Mn0pKD86LShcZHsyfSkpPyk/KD86VChcZHsyfSk6KFxkezJ9KSg/OjooXGR7Mn0pKD86XC4oXGR7M30pKT8pPyg/OihaKXwoWytcLV0pKFxkezJ9KSg/OjooXGR7Mn0pKT8pPyk/JC8uZXhlYyhkYXRlKSkpIHsKICAgICAgICAvLyBhdm9pZCBOYU4gdGltZXN0YW1wcyBjYXVzZWQgYnkg4oCcdW5kZWZpbmVk4oCdIHZhbHVlcyBiZWluZyBwYXNzZWQgdG8gRGF0ZS5VVEMKICAgICAgICBmb3IgKHZhciBpID0gMCwgazsgKGsgPSBudW1lcmljS2V5c1tpXSk7ICsraSkgewogICAgICAgICAgICBzdHJ1Y3Rba10gPSArc3RydWN0W2tdIHx8IDA7CiAgICAgICAgfQoKICAgICAgICAvLyBhbGxvdyB1bmRlZmluZWQgZGF5cyBhbmQgbW9udGhzCiAgICAgICAgc3RydWN0WzJdID0gKCtzdHJ1Y3RbMl0gfHwgMSkgLSAxOwogICAgICAgIHN0cnVjdFszXSA9ICtzdHJ1Y3RbM10gfHwgMTsKCiAgICAgICAgaWYgKHN0cnVjdFs4XSAhPT0gJ1onICYmIHN0cnVjdFs5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG1pbnV0ZXNPZmZzZXQgPSBzdHJ1Y3RbMTBdICogNjAgKyBzdHJ1Y3RbMTFdOwoKICAgICAgICAgICAgaWYgKHN0cnVjdFs5XSA9PT0gJysnKSB7CiAgICAgICAgICAgICAgICBtaW51dGVzT2Zmc2V0ID0gMCAtIG1pbnV0ZXNPZmZzZXQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRpbWVzdGFtcCA9IERhdGUuVVRDKHN0cnVjdFsxXSwgc3RydWN0WzJdLCBzdHJ1Y3RbM10sIHN0cnVjdFs0XSwgc3RydWN0WzVdICsgbWludXRlc09mZnNldCwgc3RydWN0WzZdLCBzdHJ1Y3RbN10pOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgdGltZXN0YW1wID0gb3JpZ1BhcnNlID8gb3JpZ1BhcnNlKGRhdGUpIDogTmFOOwogICAgfQoKICAgIHJldHVybiB0aW1lc3RhbXA7Cn07CgppZiAoRW1iZXIuRVhURU5EX1BST1RPVFlQRVMgPT09IHRydWUgfHwgRW1iZXIuRVhURU5EX1BST1RPVFlQRVMuRGF0ZSkgewogIERhdGUucGFyc2UgPSBFbWJlci5EYXRlLnBhcnNlOwp9Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0OwoKLyoqCiAgQSByZWNvcmQgYXJyYXkgaXMgYW4gYXJyYXkgdGhhdCBjb250YWlucyByZWNvcmRzIG9mIGEgY2VydGFpbiB0eXBlLiBUaGUgcmVjb3JkCiAgYXJyYXkgbWF0ZXJpYWxpemVzIHJlY29yZHMgYXMgbmVlZGVkIHdoZW4gdGhleSBhcmUgcmV0cmlldmVkIGZvciB0aGUgZmlyc3QKICB0aW1lLiBZb3Ugc2hvdWxkIG5vdCBjcmVhdGUgcmVjb3JkIGFycmF5cyB5b3Vyc2VsZi4gSW5zdGVhZCwgYW4gaW5zdGFuY2Ugb2YKICBgRFMuUmVjb3JkQXJyYXlgIG9yIGl0cyBzdWJjbGFzc2VzIHdpbGwgYmUgcmV0dXJuZWQgYnkgeW91ciBhcHBsaWNhdGlvbidzIHN0b3JlCiAgaW4gcmVzcG9uc2UgdG8gcXVlcmllcy4KCiAgQGNsYXNzIFJlY29yZEFycmF5CiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRzIEVtYmVyLkFycmF5UHJveHkKICBAdXNlcyBFbWJlci5FdmVudGVkCiovCgpEUy5SZWNvcmRBcnJheSA9IEVtYmVyLkFycmF5UHJveHkuZXh0ZW5kKEVtYmVyLkV2ZW50ZWQsIHsKICAvKioKICAgIFRoZSBtb2RlbCB0eXBlIGNvbnRhaW5lZCBieSB0aGlzIHJlY29yZCBhcnJheS4KCiAgICBAcHJvcGVydHkgdHlwZQogICAgQHR5cGUgRFMuTW9kZWwKICAqLwogIHR5cGU6IG51bGwsCgogIC8qKgogICAgVGhlIGFycmF5IG9mIGNsaWVudCBpZHMgYmFja2luZyB0aGUgcmVjb3JkIGFycmF5LiBXaGVuIGEKICAgIHJlY29yZCBpcyByZXF1ZXN0ZWQgZnJvbSB0aGUgcmVjb3JkIGFycmF5LCB0aGUgcmVjb3JkCiAgICBmb3IgdGhlIGNsaWVudCBpZCBhdCB0aGUgc2FtZSBpbmRleCBpcyBtYXRlcmlhbGl6ZWQsIGlmCiAgICBuZWNlc3NhcnksIGJ5IHRoZSBzdG9yZS4KCiAgICBAcHJvcGVydHkgY29udGVudAogICAgQHByaXZhdGUKICAgIEB0eXBlIEVtYmVyLkFycmF5CiAgKi8KICBjb250ZW50OiBudWxsLAoKICAvKioKICAgIFRoZSBmbGFnIHRvIHNpZ25hbCBhIGBSZWNvcmRBcnJheWAgaXMgY3VycmVudGx5IGxvYWRpbmcgZGF0YS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIHBlb3BsZSA9IHN0b3JlLmFsbChBcHAuUGVyc29uKTsKICAgIHBlb3BsZS5nZXQoJ2lzTG9hZGVkJyk7IC8vIHRydWUKICAgIGBgYAoKICAgIEBwcm9wZXJ0eSBpc0xvYWRlZAogICAgQHR5cGUgQm9vbGVhbgogICovCiAgaXNMb2FkZWQ6IGZhbHNlLAogIC8qKgogICAgVGhlIGZsYWcgdG8gc2lnbmFsIGEgYFJlY29yZEFycmF5YCBpcyBjdXJyZW50bHkgbG9hZGluZyBkYXRhLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICB2YXIgcGVvcGxlID0gc3RvcmUuYWxsKEFwcC5QZXJzb24pOwogICAgcGVvcGxlLmdldCgnaXNVcGRhdGluZycpOyAvLyBmYWxzZQogICAgcGVvcGxlLnVwZGF0ZSgpOwogICAgcGVvcGxlLmdldCgnaXNVcGRhdGluZycpOyAvLyB0cnVlCiAgICBgYGAKCiAgICBAcHJvcGVydHkgaXNVcGRhdGluZwogICAgQHR5cGUgQm9vbGVhbgogICovCiAgaXNVcGRhdGluZzogZmFsc2UsCgogIC8qKgogICAgVGhlIHN0b3JlIHRoYXQgY3JlYXRlZCB0aGlzIHJlY29yZCBhcnJheS4KCiAgICBAcHJvcGVydHkgc3RvcmUKICAgIEBwcml2YXRlCiAgICBAdHlwZSBEUy5TdG9yZQogICovCiAgc3RvcmU6IG51bGwsCgogIC8qKgogICAgUmV0cmlldmVzIGFuIG9iamVjdCBmcm9tIHRoZSBjb250ZW50IGJ5IGluZGV4LgoKICAgIEBtZXRob2Qgb2JqZWN0QXRDb250ZW50CiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtOdW1iZXJ9IGluZGV4CiAgICBAcmV0dXJuIHtEUy5Nb2RlbH0gcmVjb3JkCiAgKi8KICBvYmplY3RBdENvbnRlbnQ6IGZ1bmN0aW9uKGluZGV4KSB7CiAgICB2YXIgY29udGVudCA9IGdldCh0aGlzLCAnY29udGVudCcpOwoKICAgIHJldHVybiBjb250ZW50Lm9iamVjdEF0KGluZGV4KTsKICB9LAoKICAvKioKICAgIFVzZWQgdG8gZ2V0IHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBhbGwgb2YgdGhlIHJlY29yZHMgaW4gdGhpcyBhcnJheQogICAgZnJvbSB0aGUgYWRhcHRlci4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIHBlb3BsZSA9IHN0b3JlLmFsbChBcHAuUGVyc29uKTsKICAgIHBlb3BsZS5nZXQoJ2lzVXBkYXRpbmcnKTsgLy8gZmFsc2UKICAgIHBlb3BsZS51cGRhdGUoKTsKICAgIHBlb3BsZS5nZXQoJ2lzVXBkYXRpbmcnKTsgLy8gdHJ1ZQogICAgYGBgCgogICAgQG1ldGhvZCB1cGRhdGUKICAqLwogIHVwZGF0ZTogZnVuY3Rpb24oKSB7CiAgICBpZiAoZ2V0KHRoaXMsICdpc1VwZGF0aW5nJykpIHsgcmV0dXJuOyB9CgogICAgdmFyIHN0b3JlID0gZ2V0KHRoaXMsICdzdG9yZScpLAogICAgICAgIHR5cGUgPSBnZXQodGhpcywgJ3R5cGUnKTsKCiAgICBzdG9yZS5mZXRjaEFsbCh0eXBlLCB0aGlzKTsKICB9LAoKICAvKioKICAgIEFkZHMgYSByZWNvcmQgdG8gdGhlIGBSZWNvcmRBcnJheWAuCgogICAgQG1ldGhvZCBhZGRSZWNvcmQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAqLwogIGFkZFJlY29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICBnZXQodGhpcywgJ2NvbnRlbnQnKS5hZGRPYmplY3QocmVjb3JkKTsKICB9LAoKICAvKioKICAgIFJlbW92ZXMgYSByZWNvcmQgdG8gdGhlIGBSZWNvcmRBcnJheWAuCgogICAgQG1ldGhvZCByZW1vdmVSZWNvcmQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAqLwogIHJlbW92ZVJlY29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICBnZXQodGhpcywgJ2NvbnRlbnQnKS5yZW1vdmVPYmplY3QocmVjb3JkKTsKICB9LAoKICAvKioKICAgIFNhdmVzIGFsbCBvZiB0aGUgcmVjb3JkcyBpbiB0aGUgYFJlY29yZEFycmF5YC4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIG1lc3NhZ2VzID0gc3RvcmUuYWxsKEFwcC5NZXNzYWdlKTsKICAgIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24obWVzc2FnZSkgewogICAgICBtZXNzYWdlLnNldCgnaGFzQmVlblNlZW4nLCB0cnVlKTsKICAgIH0pOwogICAgbWVzc2FnZXMuc2F2ZSgpOwogICAgYGBgCgogICAgQG1ldGhvZCBzYXZlCiAgICBAcmV0dXJuIHtEUy5Qcm9taXNlQXJyYXl9IHByb21pc2UKICAqLwogIHNhdmU6IGZ1bmN0aW9uKCkgewogICAgdmFyIHByb21pc2VMYWJlbCA9ICJEUzogUmVjb3JkQXJyYXkjc2F2ZSAiICsgZ2V0KHRoaXMsICd0eXBlJyk7CiAgICB2YXIgcHJvbWlzZSA9IEVtYmVyLlJTVlAuYWxsKHRoaXMuaW52b2tlKCJzYXZlIiksIHByb21pc2VMYWJlbCkudGhlbihmdW5jdGlvbihhcnJheSkgewogICAgICByZXR1cm4gRW1iZXIuQShhcnJheSk7CiAgICB9LCBudWxsLCAiRFM6IFJlY29yZEFycmF5I3NhdmUgYXBwbHkgRW1iZXIuTmF0aXZlQXJyYXkiKTsKCiAgICByZXR1cm4gRFMuUHJvbWlzZUFycmF5LmNyZWF0ZSh7IHByb21pc2U6IHByb21pc2UgfSk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0OwoKLyoqCiAgUmVwcmVzZW50cyBhIGxpc3Qgb2YgcmVjb3JkcyB3aG9zZSBtZW1iZXJzaGlwIGlzIGRldGVybWluZWQgYnkgdGhlCiAgc3RvcmUuIEFzIHJlY29yZHMgYXJlIGNyZWF0ZWQsIGxvYWRlZCwgb3IgbW9kaWZpZWQsIHRoZSBzdG9yZQogIGV2YWx1YXRlcyB0aGVtIHRvIGRldGVybWluZSBpZiB0aGV5IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSByZWNvcmQKICBhcnJheS4KCiAgQGNsYXNzIEZpbHRlcmVkUmVjb3JkQXJyYXkKICBAbmFtZXNwYWNlIERTCiAgQGV4dGVuZHMgRFMuUmVjb3JkQXJyYXkKKi8KRFMuRmlsdGVyZWRSZWNvcmRBcnJheSA9IERTLlJlY29yZEFycmF5LmV4dGVuZCh7CiAgLyoqCiAgICBUaGUgZmlsdGVyRnVuY3Rpb24gaXMgYSBmdW5jdGlvbiB1c2VkIHRvIHRlc3QgcmVjb3JkcyBmcm9tIHRoZSBzdG9yZSB0bwogICAgZGV0ZXJtaW5lIGlmIHRoZXkgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIHJlY29yZCBhcnJheS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIGFsbFBlb3BsZSA9IHN0b3JlLmFsbCgncGVyc29uJyk7CiAgICBhbGxQZW9wbGUubWFwQnkoJ25hbWUnKTsgLy8gWyJUb20gRGFsZSIsICJZZWh1ZGEgS2F0eiIsICJUcmVrIEdsb3dhY2tpIl0KCiAgICB2YXIgcGVvcGxlID0gc3RvcmUuZmlsdGVyKCdwZXJzb24nLCBmdW5jdGlvbihwZXJzb24pIHsKICAgICAgaWYgKHBlcnNvbi5nZXQoJ25hbWUnKS5tYXRjaCgvS2F0eiQvKSkgeyByZXR1cm4gdHJ1ZTsgfQogICAgfSk7CiAgICBwZW9wbGUubWFwQnkoJ25hbWUnKTsgLy8gWyJZZWh1ZGEgS2F0eiJdCgogICAgdmFyIG5vdEthdHpGaWx0ZXIgPSBmdW5jdGlvbihwZXJzb24pIHsKICAgICAgcmV0dXJuICFwZXJzb24uZ2V0KCduYW1lJykubWF0Y2goL0thdHokLyk7CiAgICB9OwogICAgcGVvcGxlLnNldCgnZmlsdGVyRnVuY3Rpb24nLCBub3RLYXR6RmlsdGVyKTsKICAgIHBlb3BsZS5tYXBCeSgnbmFtZScpOyAvLyBbIlRvbSBEYWxlIiwgIlRyZWsgR2xvd2Fja2kiXQogICAgYGBgCgogICAgQG1ldGhvZCBmaWx0ZXJGdW5jdGlvbgogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIHJlY29yZCBzaG91bGQgYmUgaW4gdGhlIGFycmF5CiAgKi8KICBmaWx0ZXJGdW5jdGlvbjogbnVsbCwKICBpc0xvYWRlZDogdHJ1ZSwKCiAgcmVwbGFjZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgdHlwZSA9IGdldCh0aGlzLCAndHlwZScpLnRvU3RyaW5nKCk7CiAgICB0aHJvdyBuZXcgRXJyb3IoIlRoZSByZXN1bHQgb2YgYSBjbGllbnQtc2lkZSBmaWx0ZXIgKG9uICIgKyB0eXBlICsgIikgaXMgaW1tdXRhYmxlLiIpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCB1cGRhdGVGaWx0ZXIKICAgIEBwcml2YXRlCiAgKi8KICB1cGRhdGVGaWx0ZXI6IEVtYmVyLm9ic2VydmVyKGZ1bmN0aW9uKCkgewogICAgdmFyIG1hbmFnZXIgPSBnZXQodGhpcywgJ21hbmFnZXInKTsKICAgIG1hbmFnZXIudXBkYXRlRmlsdGVyKHRoaXMsIGdldCh0aGlzLCAndHlwZScpLCBnZXQodGhpcywgJ2ZpbHRlckZ1bmN0aW9uJykpOwogIH0sICdmaWx0ZXJGdW5jdGlvbicpCn0pOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCnZhciBnZXQgPSBFbWJlci5nZXQsIHNldCA9IEVtYmVyLnNldDsKCi8qKgogIFJlcHJlc2VudHMgYW4gb3JkZXJlZCBsaXN0IG9mIHJlY29yZHMgd2hvc2Ugb3JkZXIgYW5kIG1lbWJlcnNoaXAgaXMKICBkZXRlcm1pbmVkIGJ5IHRoZSBhZGFwdGVyLiBGb3IgZXhhbXBsZSwgYSBxdWVyeSBzZW50IHRvIHRoZSBhZGFwdGVyCiAgbWF5IHRyaWdnZXIgYSBzZWFyY2ggb24gdGhlIHNlcnZlciwgd2hvc2UgcmVzdWx0cyB3b3VsZCBiZSBsb2FkZWQKICBpbnRvIGFuIGluc3RhbmNlIG9mIHRoZSBgQWRhcHRlclBvcHVsYXRlZFJlY29yZEFycmF5YC4KCiAgQGNsYXNzIEFkYXB0ZXJQb3B1bGF0ZWRSZWNvcmRBcnJheQogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBEUy5SZWNvcmRBcnJheQoqLwpEUy5BZGFwdGVyUG9wdWxhdGVkUmVjb3JkQXJyYXkgPSBEUy5SZWNvcmRBcnJheS5leHRlbmQoewogIHF1ZXJ5OiBudWxsLAoKICByZXBsYWNlOiBmdW5jdGlvbigpIHsKICAgIHZhciB0eXBlID0gZ2V0KHRoaXMsICd0eXBlJykudG9TdHJpbmcoKTsKICAgIHRocm93IG5ldyBFcnJvcigiVGhlIHJlc3VsdCBvZiBhIHNlcnZlciBxdWVyeSAob24gIiArIHR5cGUgKyAiKSBpcyBpbW11dGFibGUuIik7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGxvYWQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0FycmF5fSBkYXRhCiAgKi8KICBsb2FkOiBmdW5jdGlvbihkYXRhKSB7CiAgICB2YXIgc3RvcmUgPSBnZXQodGhpcywgJ3N0b3JlJyksCiAgICAgICAgdHlwZSA9IGdldCh0aGlzLCAndHlwZScpLAogICAgICAgIHJlY29yZHMgPSBzdG9yZS5wdXNoTWFueSh0eXBlLCBkYXRhKSwKICAgICAgICBtZXRhID0gc3RvcmUubWV0YWRhdGFGb3IodHlwZSk7CgogICAgdGhpcy5zZXRQcm9wZXJ0aWVzKHsKICAgICAgY29udGVudDogRW1iZXIuQShyZWNvcmRzKSwKICAgICAgaXNMb2FkZWQ6IHRydWUsCiAgICAgIG1ldGE6IG1ldGEKICAgIH0pOwoKICAgIC8vIFRPRE86IGRvZXMgdHJpZ2dlcmluZyBkaWRMb2FkIGV2ZW50IHNob3VsZCBiZSB0aGUgbGFzdCBhY3Rpb24gb2YgdGhlIHJ1bkxvb3A/CiAgICBFbWJlci5ydW4ub25jZSh0aGlzLCAndHJpZ2dlcicsICdkaWRMb2FkJyk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQ7CnZhciBtYXAgPSBFbWJlci5FbnVtZXJhYmxlVXRpbHMubWFwOwoKLyoqCiAgQSBgTWFueUFycmF5YCBpcyBhIGBSZWNvcmRBcnJheWAgdGhhdCByZXByZXNlbnRzIHRoZSBjb250ZW50cyBvZiBhIGhhcy1tYW55CiAgcmVsYXRpb25zaGlwLgoKICBUaGUgYE1hbnlBcnJheWAgaXMgaW5zdGFudGlhdGVkIGxhemlseSB0aGUgZmlyc3QgdGltZSB0aGUgcmVsYXRpb25zaGlwIGlzCiAgcmVxdWVzdGVkLgoKICAjIyMgSW52ZXJzZXMKCiAgT2Z0ZW4sIHRoZSByZWxhdGlvbnNoaXBzIGluIEVtYmVyIERhdGEgYXBwbGljYXRpb25zIHdpbGwgaGF2ZQogIGFuIGludmVyc2UuIEZvciBleGFtcGxlLCBpbWFnaW5lIHRoZSBmb2xsb3dpbmcgbW9kZWxzIGFyZQogIGRlZmluZWQ6CgogIGBgYGphdmFzY3JpcHQKICBBcHAuUG9zdCA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICBjb21tZW50czogRFMuaGFzTWFueSgnY29tbWVudCcpCiAgfSk7CgogIEFwcC5Db21tZW50ID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIHBvc3Q6IERTLmJlbG9uZ3NUbygncG9zdCcpCiAgfSk7CiAgYGBgCgogIElmIHlvdSBjcmVhdGVkIGEgbmV3IGluc3RhbmNlIG9mIGBBcHAuUG9zdGAgYW5kIGFkZGVkCiAgYSBgQXBwLkNvbW1lbnRgIHJlY29yZCB0byBpdHMgYGNvbW1lbnRzYCBoYXMtbWFueQogIHJlbGF0aW9uc2hpcCwgeW91IHdvdWxkIGV4cGVjdCB0aGUgY29tbWVudCdzIGBwb3N0YAogIHByb3BlcnR5IHRvIGJlIHNldCB0byB0aGUgcG9zdCB0aGF0IGNvbnRhaW5lZAogIHRoZSBoYXMtbWFueS4KCiAgV2UgY2FsbCB0aGUgcmVjb3JkIHRvIHdoaWNoIGEgcmVsYXRpb25zaGlwIGJlbG9uZ3MgdGhlCiAgcmVsYXRpb25zaGlwJ3MgX293bmVyXy4KCiAgQGNsYXNzIE1hbnlBcnJheQogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBEUy5SZWNvcmRBcnJheQoqLwpEUy5NYW55QXJyYXkgPSBEUy5SZWNvcmRBcnJheS5leHRlbmQoewogIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5fc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIHRoaXMuX2NoYW5nZXNUb1N5bmMgPSBFbWJlci5PcmRlcmVkU2V0LmNyZWF0ZSgpOwogIH0sCgogIC8qKgogICAgVGhlIHByb3BlcnR5IG5hbWUgb2YgdGhlIHJlbGF0aW9uc2hpcAoKICAgIEBwcm9wZXJ0eSB7U3RyaW5nfSBuYW1lCiAgICBAcHJpdmF0ZQogICovCiAgbmFtZTogbnVsbCwKCiAgLyoqCiAgICBUaGUgcmVjb3JkIHRvIHdoaWNoIHRoaXMgcmVsYXRpb25zaGlwIGJlbG9uZ3MuCgogICAgQHByb3BlcnR5IHtEUy5Nb2RlbH0gb3duZXIKICAgIEBwcml2YXRlCiAgKi8KICBvd25lcjogbnVsbCwKCiAgLyoqCiAgICBgdHJ1ZWAgaWYgdGhlIHJlbGF0aW9uc2hpcCBpcyBwb2x5bW9ycGhpYywgYGZhbHNlYCBvdGhlcndpc2UuCgogICAgQHByb3BlcnR5IHtCb29sZWFufSBpc1BvbHltb3JwaGljCiAgICBAcHJpdmF0ZQogICovCiAgaXNQb2x5bW9ycGhpYzogZmFsc2UsCgogIC8vIExPQURJTkcgU1RBVEUKCiAgaXNMb2FkZWQ6IGZhbHNlLAoKICAvKioKICAgIFVzZWQgZm9yIGFzeW5jIGBoYXNNYW55YCBhcnJheXMKICAgIHRvIGtlZXAgdHJhY2sgb2Ygd2hlbiB0aGV5IHdpbGwgcmVzb2x2ZS4KCiAgICBAcHJvcGVydHkge0VtYmVyLlJTVlAuUHJvbWlzZX0gcHJvbWlzZQogICAgQHByaXZhdGUKICAqLwogIHByb21pc2U6IG51bGwsCgogIC8qKgogICAgQG1ldGhvZCBsb2FkaW5nUmVjb3Jkc0NvdW50CiAgICBAcGFyYW0ge051bWJlcn0gY291bnQKICAgIEBwcml2YXRlCiAgKi8KICBsb2FkaW5nUmVjb3Jkc0NvdW50OiBmdW5jdGlvbihjb3VudCkgewogICAgdGhpcy5sb2FkaW5nUmVjb3Jkc0NvdW50ID0gY291bnQ7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGxvYWRlZFJlY29yZAogICAgQHByaXZhdGUKICAqLwogIGxvYWRlZFJlY29yZDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmxvYWRpbmdSZWNvcmRzQ291bnQtLTsKICAgIGlmICh0aGlzLmxvYWRpbmdSZWNvcmRzQ291bnQgPT09IDApIHsKICAgICAgc2V0KHRoaXMsICdpc0xvYWRlZCcsIHRydWUpOwogICAgICB0aGlzLnRyaWdnZXIoJ2RpZExvYWQnKTsKICAgIH0KICB9LAoKICAvKioKICAgIEBtZXRob2QgZmV0Y2gKICAgIEBwcml2YXRlCiAgKi8KICBmZXRjaDogZnVuY3Rpb24oKSB7CiAgICB2YXIgcmVjb3JkcyA9IGdldCh0aGlzLCAnY29udGVudCcpLAogICAgICAgIHN0b3JlID0gZ2V0KHRoaXMsICdzdG9yZScpLAogICAgICAgIG93bmVyID0gZ2V0KHRoaXMsICdvd25lcicpLAogICAgICAgIHJlc29sdmVyID0gRW1iZXIuUlNWUC5kZWZlcigiRFM6IE1hbnlBcnJheSNmZXRjaCAiICsgZ2V0KHRoaXMsICd0eXBlJykpOwoKICAgIHZhciB1bmxvYWRlZFJlY29yZHMgPSByZWNvcmRzLmZpbHRlclByb3BlcnR5KCdpc0VtcHR5JywgdHJ1ZSk7CiAgICBzdG9yZS5mZXRjaE1hbnkodW5sb2FkZWRSZWNvcmRzLCBvd25lciwgcmVzb2x2ZXIpOwogIH0sCgogIC8vIE92ZXJyaWRlcyBFbWJlci5BcnJheSdzIHJlcGxhY2UgbWV0aG9kIHRvIGltcGxlbWVudAogIHJlcGxhY2VDb250ZW50OiBmdW5jdGlvbihpbmRleCwgcmVtb3ZlZCwgYWRkZWQpIHsKICAgIC8vIE1hcCB0aGUgYXJyYXkgb2YgcmVjb3JkIG9iamVjdHMgaW50byBhbiBhcnJheSBvZiAgY2xpZW50IGlkcy4KICAgIGFkZGVkID0gbWFwKGFkZGVkLCBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgRW1iZXIuYXNzZXJ0KCJZb3UgY2Fubm90IGFkZCAnIiArIHJlY29yZC5jb25zdHJ1Y3Rvci50eXBlS2V5ICsgIicgcmVjb3JkcyB0byB0aGlzIHJlbGF0aW9uc2hpcCAob25seSAnIiArIHRoaXMudHlwZS50eXBlS2V5ICsgIicgYWxsb3dlZCkiLCAhdGhpcy50eXBlIHx8IHJlY29yZCBpbnN0YW5jZW9mIHRoaXMudHlwZSk7CiAgICAgIHJldHVybiByZWNvcmQ7CiAgICB9LCB0aGlzKTsKCiAgICB0aGlzLl9zdXBlcihpbmRleCwgcmVtb3ZlZCwgYWRkZWQpOwogIH0sCgogIGFycmFuZ2VkQ29udGVudERpZENoYW5nZTogZnVuY3Rpb24oKSB7CiAgICBFbWJlci5ydW4ub25jZSh0aGlzLCAnZmV0Y2gnKTsKICB9LAoKICBhcnJheUNvbnRlbnRXaWxsQ2hhbmdlOiBmdW5jdGlvbihpbmRleCwgcmVtb3ZlZCwgYWRkZWQpIHsKICAgIHZhciBvd25lciA9IGdldCh0aGlzLCAnb3duZXInKSwKICAgICAgICBuYW1lID0gZ2V0KHRoaXMsICduYW1lJyk7CgogICAgaWYgKCFvd25lci5fc3VzcGVuZGVkUmVsYXRpb25zaGlwcykgewogICAgICAvLyBUaGlzIGNvZGUgaXMgdGhlIGZpcnN0IGhhbGYgb2YgY29kZSB0aGF0IGNvbnRpbnVlcyBpbnNpZGUKICAgICAgLy8gb2YgYXJyYXlDb250ZW50RGlkQ2hhbmdlLiBJdCBnZXRzIG9yIGNyZWF0ZXMgYSBjaGFuZ2UgZnJvbQogICAgICAvLyB0aGUgY2hpbGQgb2JqZWN0LCBhZGRzIHRoZSBjdXJyZW50IG93bmVyIGFzIHRoZSBvbGQKICAgICAgLy8gcGFyZW50IGlmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIG9iamVjdCB3YXMgcmVtb3ZlZAogICAgICAvLyBmcm9tIGEgTWFueUFycmF5LCBhbmQgc2V0cyBgbmV3UGFyZW50YCB0byBudWxsLgogICAgICAvLwogICAgICAvLyBMYXRlciwgaWYgdGhlIG9iamVjdCBpcyBhZGRlZCB0byBhbm90aGVyIE1hbnlBcnJheSwKICAgICAgLy8gdGhlIGBhcnJheUNvbnRlbnREaWRDaGFuZ2VgIHdpbGwgc2V0IGBuZXdQYXJlbnRgIG9uCiAgICAgIC8vIHRoZSBjaGFuZ2UuCiAgICAgIGZvciAodmFyIGk9aW5kZXg7IGk8aW5kZXgrcmVtb3ZlZDsgaSsrKSB7CiAgICAgICAgdmFyIHJlY29yZCA9IGdldCh0aGlzLCAnY29udGVudCcpLm9iamVjdEF0KGkpOwoKICAgICAgICB2YXIgY2hhbmdlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0ZUNoYW5nZShvd25lciwgcmVjb3JkLCBnZXQodGhpcywgJ3N0b3JlJyksIHsKICAgICAgICAgIHBhcmVudFR5cGU6IG93bmVyLmNvbnN0cnVjdG9yLAogICAgICAgICAgY2hhbmdlVHlwZTogInJlbW92ZSIsCiAgICAgICAgICBraW5kOiAiaGFzTWFueSIsCiAgICAgICAgICBrZXk6IG5hbWUKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5fY2hhbmdlc1RvU3luYy5hZGQoY2hhbmdlKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzLl9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0sCgogIGFycmF5Q29udGVudERpZENoYW5nZTogZnVuY3Rpb24oaW5kZXgsIHJlbW92ZWQsIGFkZGVkKSB7CiAgICB0aGlzLl9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICAgIHZhciBvd25lciA9IGdldCh0aGlzLCAnb3duZXInKSwKICAgICAgICBuYW1lID0gZ2V0KHRoaXMsICduYW1lJyksCiAgICAgICAgc3RvcmUgPSBnZXQodGhpcywgJ3N0b3JlJyk7CgogICAgaWYgKCFvd25lci5fc3VzcGVuZGVkUmVsYXRpb25zaGlwcykgewogICAgICAvLyBUaGlzIGNvZGUgaXMgdGhlIHNlY29uZCBoYWxmIG9mIGNvZGUgdGhhdCBzdGFydGVkIGluCiAgICAgIC8vIGBhcnJheUNvbnRlbnRXaWxsQ2hhbmdlYC4gSXQgZ2V0cyBvciBjcmVhdGVzIGEgY2hhbmdlCiAgICAgIC8vIGZyb20gdGhlIGNoaWxkIG9iamVjdCwgYW5kIGFkZHMgdGhlIGN1cnJlbnQgb3duZXIgYXMKICAgICAgLy8gdGhlIG5ldyBwYXJlbnQuCiAgICAgIGZvciAodmFyIGk9aW5kZXg7IGk8aW5kZXgrYWRkZWQ7IGkrKykgewogICAgICAgIHZhciByZWNvcmQgPSBnZXQodGhpcywgJ2NvbnRlbnQnKS5vYmplY3RBdChpKTsKCiAgICAgICAgdmFyIGNoYW5nZSA9IERTLlJlbGF0aW9uc2hpcENoYW5nZS5jcmVhdGVDaGFuZ2Uob3duZXIsIHJlY29yZCwgc3RvcmUsIHsKICAgICAgICAgIHBhcmVudFR5cGU6IG93bmVyLmNvbnN0cnVjdG9yLAogICAgICAgICAgY2hhbmdlVHlwZTogImFkZCIsCiAgICAgICAgICBraW5kOiJoYXNNYW55IiwKICAgICAgICAgIGtleTogbmFtZQogICAgICAgIH0pOwogICAgICAgIGNoYW5nZS5oYXNNYW55TmFtZSA9IG5hbWU7CgogICAgICAgIHRoaXMuX2NoYW5nZXNUb1N5bmMuYWRkKGNoYW5nZSk7CiAgICAgIH0KCiAgICAgIC8vIFdlIHdhaXQgdW50aWwgdGhlIGFycmF5IGhhcyBmaW5pc2hlZCBiZWluZwogICAgICAvLyBtdXRhdGVkIGJlZm9yZSBzeW5jaW5nIHRoZSBPbmVUb01hbnlDaGFuZ2VzIGNyZWF0ZWQKICAgICAgLy8gaW4gYXJyYXlDb250ZW50V2lsbENoYW5nZSwgc28gdGhhdCB0aGUgYXJyYXkKICAgICAgLy8gbWVtYmVyc2hpcCB0ZXN0IGluIHRoZSBzeW5jKCkgbG9naWMgb3BlcmF0ZXMKICAgICAgLy8gb24gdGhlIGZpbmFsIHJlc3VsdHMuCiAgICAgIHRoaXMuX2NoYW5nZXNUb1N5bmMuZm9yRWFjaChmdW5jdGlvbihjaGFuZ2UpIHsKICAgICAgICBjaGFuZ2Uuc3luYygpOwogICAgICB9KTsKCiAgICAgIHRoaXMuX2NoYW5nZXNUb1N5bmMuY2xlYXIoKTsKICAgIH0KICB9LAoKICAvKioKICAgIENyZWF0ZSBhIGNoaWxkIHJlY29yZCB3aXRoaW4gdGhlIG93bmVyCgogICAgQG1ldGhvZCBjcmVhdGVSZWNvcmQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge09iamVjdH0gaGFzaAogICAgQHJldHVybiB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgY3JlYXRlUmVjb3JkOiBmdW5jdGlvbihoYXNoKSB7CiAgICB2YXIgb3duZXIgPSBnZXQodGhpcywgJ293bmVyJyksCiAgICAgICAgc3RvcmUgPSBnZXQob3duZXIsICdzdG9yZScpLAogICAgICAgIHR5cGUgPSBnZXQodGhpcywgJ3R5cGUnKSwKICAgICAgICByZWNvcmQ7CgogICAgRW1iZXIuYXNzZXJ0KCJZb3UgY2Fubm90IGFkZCAnIiArIHR5cGUudHlwZUtleSArICInIHJlY29yZHMgdG8gdGhpcyBwb2x5bW9ycGhpYyByZWxhdGlvbnNoaXAuIiwgIWdldCh0aGlzLCAnaXNQb2x5bW9ycGhpYycpKTsKCiAgICByZWNvcmQgPSBzdG9yZS5jcmVhdGVSZWNvcmQuY2FsbChzdG9yZSwgdHlwZSwgaGFzaCk7CiAgICB0aGlzLnB1c2hPYmplY3QocmVjb3JkKTsKCiAgICByZXR1cm4gcmVjb3JkOwogIH0KCn0pOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLypnbG9iYWxzIEVtYmVyKi8KLypqc2hpbnQgZXFudWxsOnRydWUqLwovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCnZhciBnZXQgPSBFbWJlci5nZXQsIHNldCA9IEVtYmVyLnNldDsKdmFyIG9uY2UgPSBFbWJlci5ydW4ub25jZTsKdmFyIGlzTm9uZSA9IEVtYmVyLmlzTm9uZTsKdmFyIGZvckVhY2ggPSBFbWJlci5FbnVtZXJhYmxlVXRpbHMuZm9yRWFjaDsKdmFyIGluZGV4T2YgPSBFbWJlci5FbnVtZXJhYmxlVXRpbHMuaW5kZXhPZjsKdmFyIG1hcCA9IEVtYmVyLkVudW1lcmFibGVVdGlscy5tYXA7CnZhciByZXNvbHZlID0gRW1iZXIuUlNWUC5yZXNvbHZlOwp2YXIgY29weSA9IEVtYmVyLmNvcHk7CgovLyBJbXBsZW1lbnRvcnMgTm90ZToKLy8KLy8gICBUaGUgdmFyaWFibGVzIGluIHRoaXMgZmlsZSBhcmUgY29uc2lzdGVudGx5IG5hbWVkIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nCi8vICAgc2NoZW1lOgovLwovLyAgICogK2lkKyBtZWFucyBhbiBpZGVudGlmaWVyIG1hbmFnZWQgYnkgYW4gZXh0ZXJuYWwgc291cmNlLCBwcm92aWRlZCBpbnNpZGUKLy8gICAgIHRoZSBkYXRhIHByb3ZpZGVkIGJ5IHRoYXQgc291cmNlLiBUaGVzZSBhcmUgYWx3YXlzIGNvZXJjZWQgdG8gYmUgc3RyaW5ncwovLyAgICAgYmVmb3JlIGJlaW5nIHVzZWQgaW50ZXJuYWxseS4KLy8gICAqICtjbGllbnRJZCsgbWVhbnMgYSB0cmFuc2llbnQgbnVtZXJpY2FsIGlkZW50aWZpZXIgZ2VuZXJhdGVkIGF0IHJ1bnRpbWUgYnkKLy8gICAgIHRoZSBkYXRhIHN0b3JlLiBJdCBpcyBpbXBvcnRhbnQgcHJpbWFyaWx5IGJlY2F1c2UgbmV3bHkgY3JlYXRlZCBvYmplY3RzIG1heQovLyAgICAgbm90IHlldCBoYXZlIGFuIGV4dGVybmFsbHkgZ2VuZXJhdGVkIGlkLgovLyAgICogK3JlZmVyZW5jZSsgbWVhbnMgYSByZWNvcmQgcmVmZXJlbmNlIG9iamVjdCwgd2hpY2ggaG9sZHMgbWV0YWRhdGEgYWJvdXQgYQovLyAgICAgcmVjb3JkLCBldmVuIGlmIGl0IGhhcyBub3QgeWV0IGJlZW4gZnVsbHkgbWF0ZXJpYWxpemVkLgovLyAgICogK3R5cGUrIG1lYW5zIGEgc3ViY2xhc3Mgb2YgRFMuTW9kZWwuCgovLyBVc2VkIGJ5IHRoZSBzdG9yZSB0byBub3JtYWxpemUgSURzIGVudGVyaW5nIHRoZSBzdG9yZS4gIERlc3BpdGUgdGhlIGZhY3QKLy8gdGhhdCBkZXZlbG9wZXJzIG1heSBwcm92aWRlIElEcyBhcyBudW1iZXJzIChlLmcuLCBgc3RvcmUuZmluZChQZXJzb24sIDEpYCksCi8vIGl0IGlzIGltcG9ydGFudCB0aGF0IGludGVybmFsbHkgd2UgdXNlIHN0cmluZ3MsIHNpbmNlIElEcyBtYXkgYmUgc2VyaWFsaXplZAovLyBhbmQgbG9zZSB0eXBlIGluZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsIEVtYmVyJ3Mgcm91dGVyIG1heSBwdXQgYSByZWNvcmQncwovLyBJRCBpbnRvIHRoZSBVUkwsIGFuZCBpZiB3ZSBsYXRlciB0cnkgdG8gZGVzZXJpYWxpemUgdGhhdCBVUkwgYW5kIGZpbmQgdGhlCi8vIGNvcnJlc3BvbmRpbmcgcmVjb3JkLCB3ZSB3aWxsIG5vdCBrbm93IGlmIGl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyLgp2YXIgY29lcmNlSWQgPSBmdW5jdGlvbihpZCkgewogIHJldHVybiBpZCA9PSBudWxsID8gbnVsbCA6IGlkKycnOwp9OwoKLyoqCiAgVGhlIHN0b3JlIGNvbnRhaW5zIGFsbCBvZiB0aGUgZGF0YSBmb3IgcmVjb3JkcyBsb2FkZWQgZnJvbSB0aGUgc2VydmVyLgogIEl0IGlzIGFsc28gcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGluc3RhbmNlcyBvZiBgRFMuTW9kZWxgIHRoYXQgd3JhcAogIHRoZSBpbmRpdmlkdWFsIGRhdGEgZm9yIGEgcmVjb3JkLCBzbyB0aGF0IHRoZXkgY2FuIGJlIGJvdW5kIHRvIGluIHlvdXIKICBIYW5kbGViYXJzIHRlbXBsYXRlcy4KCiAgRGVmaW5lIHlvdXIgYXBwbGljYXRpb24ncyBzdG9yZSBsaWtlIHRoaXM6CgogIGBgYGphdmFzY3JpcHQKICBNeUFwcC5TdG9yZSA9IERTLlN0b3JlLmV4dGVuZCgpOwogIGBgYAoKICBNb3N0IEVtYmVyLmpzIGFwcGxpY2F0aW9ucyB3aWxsIG9ubHkgaGF2ZSBhIHNpbmdsZSBgRFMuU3RvcmVgIHRoYXQgaXMKICBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgYnkgdGhlaXIgYEVtYmVyLkFwcGxpY2F0aW9uYC4KCiAgWW91IGNhbiByZXRyaWV2ZSBtb2RlbHMgZnJvbSB0aGUgc3RvcmUgaW4gc2V2ZXJhbCB3YXlzLiBUbyByZXRyaWV2ZSBhIHJlY29yZAogIGZvciBhIHNwZWNpZmljIGlkLCB1c2UgYERTLlN0b3JlYCdzIGBmaW5kKClgIG1ldGhvZDoKCiAgYGBgamF2YXNjcmlwdAogIHZhciBwZXJzb24gPSBzdG9yZS5maW5kKCdwZXJzb24nLCAxMjMpOwogIGBgYAoKICBJZiB5b3VyIGFwcGxpY2F0aW9uIGhhcyBtdWx0aXBsZSBgRFMuU3RvcmVgIGluc3RhbmNlcyAoYW4gdW51c3VhbCBjYXNlKSwgeW91IGNhbgogIHNwZWNpZnkgd2hpY2ggc3RvcmUgc2hvdWxkIGJlIHVzZWQ6CgogIGBgYGphdmFzY3JpcHQKICB2YXIgcGVyc29uID0gc3RvcmUuZmluZChBcHAuUGVyc29uLCAxMjMpOwogIGBgYAoKICBCeSBkZWZhdWx0LCB0aGUgc3RvcmUgd2lsbCB0YWxrIHRvIHlvdXIgYmFja2VuZCB1c2luZyBhIHN0YW5kYXJkCiAgUkVTVCBtZWNoYW5pc20uIFlvdSBjYW4gY3VzdG9taXplIGhvdyB0aGUgc3RvcmUgdGFsa3MgdG8geW91cgogIGJhY2tlbmQgYnkgc3BlY2lmeWluZyBhIGN1c3RvbSBhZGFwdGVyOgoKICBgYGBqYXZhc2NyaXB0CiAgIE15QXBwLnN0b3JlID0gRFMuU3RvcmUuY3JlYXRlKHsKICAgICBhZGFwdGVyOiAnTXlBcHAuQ3VzdG9tQWRhcHRlcicKICAgfSk7CiAgIGBgYAoKICBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgd3JpdGluZyBhIGN1c3RvbSBhZGFwdGVyIGJ5IHJlYWRpbmcgdGhlIGBEUy5BZGFwdGVyYAogIGRvY3VtZW50YXRpb24uCgogIEBjbGFzcyBTdG9yZQogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBFbWJlci5PYmplY3QKKi8KRFMuU3RvcmUgPSBFbWJlci5PYmplY3QuZXh0ZW5kKHsKCiAgLyoqCiAgICBAbWV0aG9kIGluaXQKICAgIEBwcml2YXRlCiAgKi8KICBpbml0OiBmdW5jdGlvbigpIHsKICAgIC8vIGludGVybmFsIGJvb2trZWVwaW5nOyBub3Qgb2JzZXJ2YWJsZQogICAgdGhpcy50eXBlTWFwcyA9IHt9OwogICAgdGhpcy5yZWNvcmRBcnJheU1hbmFnZXIgPSBEUy5SZWNvcmRBcnJheU1hbmFnZXIuY3JlYXRlKHsKICAgICAgc3RvcmU6IHRoaXMKICAgIH0pOwogICAgdGhpcy5fcmVsYXRpb25zaGlwQ2hhbmdlcyA9IHt9OwogICAgdGhpcy5fcGVuZGluZ1NhdmUgPSBbXTsKICB9LAoKICAvKioKICAgIFRoZSBhZGFwdGVyIHRvIHVzZSB0byBjb21tdW5pY2F0ZSB0byBhIGJhY2tlbmQgc2VydmVyIG9yIG90aGVyIHBlcnNpc3RlbmNlIGxheWVyLgoKICAgIFRoaXMgY2FuIGJlIHNwZWNpZmllZCBhcyBhbiBpbnN0YW5jZSwgY2xhc3MsIG9yIHN0cmluZy4KCiAgICBJZiB5b3Ugd2FudCB0byBzcGVjaWZ5IGBBcHAuQ3VzdG9tQWRhcHRlcmAgYXMgYSBzdHJpbmcsIGRvOgoKICAgIGBgYGpzCiAgICBhZGFwdGVyOiAnY3VzdG9tJwogICAgYGBgCgogICAgQHByb3BlcnR5IGFkYXB0ZXIKICAgIEBkZWZhdWx0IERTLlJFU1RBZGFwdGVyCiAgICBAdHlwZSB7RFMuQWRhcHRlcnxTdHJpbmd9CiAgKi8KICBhZGFwdGVyOiAnX3Jlc3QnLAoKICAvKioKICAgIFJldHVybnMgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZWNvcmQgdXNpbmcgYSBjdXN0b20KICAgIHR5cGUtc3BlY2lmaWMgc2VyaWFsaXplciwgaWYgb25lIGV4aXN0cy4KCiAgICBUaGUgYXZhaWxhYmxlIG9wdGlvbnMgYXJlOgoKICAgICogYGluY2x1ZGVJZGA6IGB0cnVlYCBpZiB0aGUgcmVjb3JkJ3MgSUQgc2hvdWxkIGJlIGluY2x1ZGVkIGluCiAgICAgIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uCgogICAgQG1ldGhvZCBzZXJpYWxpemUKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQgdGhlIHJlY29yZCB0byBzZXJpYWxpemUKICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGFuIG9wdGlvbnMgaGFzaAogICovCiAgc2VyaWFsaXplOiBmdW5jdGlvbihyZWNvcmQsIG9wdGlvbnMpIHsKICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZXJGb3IocmVjb3JkLmNvbnN0cnVjdG9yLnR5cGVLZXkpLnNlcmlhbGl6ZShyZWNvcmQsIG9wdGlvbnMpOwogIH0sCgogIC8qKgogICAgVGhpcyBwcm9wZXJ0eSByZXR1cm5zIHRoZSBhZGFwdGVyLCBhZnRlciByZXNvbHZpbmcgYSBwb3NzaWJsZQogICAgc3RyaW5nIGtleS4KCiAgICBJZiB0aGUgc3VwcGxpZWQgYGFkYXB0ZXJgIHdhcyBhIGNsYXNzLCBvciBhIFN0cmluZyBwcm9wZXJ0eQogICAgcGF0aCByZXNvbHZlZCB0byBhIGNsYXNzLCB0aGlzIHByb3BlcnR5IHdpbGwgaW5zdGFudGlhdGUgdGhlCiAgICBjbGFzcy4KCiAgICBUaGlzIHByb3BlcnR5IGlzIGNhY2hlYWJsZSwgc28gdGhlIHNhbWUgaW5zdGFuY2Ugb2YgYSBzcGVjaWZpZWQKICAgIGFkYXB0ZXIgY2xhc3Mgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc3RvcmUuCgogICAgQHByb3BlcnR5IGRlZmF1bHRBZGFwdGVyCiAgICBAcHJpdmF0ZQogICAgQHJldHVybnMgRFMuQWRhcHRlcgogICovCiAgZGVmYXVsdEFkYXB0ZXI6IEVtYmVyLmNvbXB1dGVkKCdhZGFwdGVyJywgZnVuY3Rpb24oKSB7CiAgICB2YXIgYWRhcHRlciA9IGdldCh0aGlzLCAnYWRhcHRlcicpOwoKICAgIEVtYmVyLmFzc2VydCgnWW91IHRyaWVkIHRvIHNldCBgYWRhcHRlcmAgcHJvcGVydHkgdG8gYW4gaW5zdGFuY2Ugb2YgYERTLkFkYXB0ZXJgLCB3aGVyZSBpdCBzaG91bGQgYmUgYSBuYW1lIG9yIGEgZmFjdG9yeScsICEoYWRhcHRlciBpbnN0YW5jZW9mIERTLkFkYXB0ZXIpKTsKCiAgICBpZiAodHlwZW9mIGFkYXB0ZXIgPT09ICdzdHJpbmcnKSB7CiAgICAgIGFkYXB0ZXIgPSB0aGlzLmNvbnRhaW5lci5sb29rdXAoJ2FkYXB0ZXI6JyArIGFkYXB0ZXIpIHx8IHRoaXMuY29udGFpbmVyLmxvb2t1cCgnYWRhcHRlcjphcHBsaWNhdGlvbicpIHx8IHRoaXMuY29udGFpbmVyLmxvb2t1cCgnYWRhcHRlcjpfcmVzdCcpOwogICAgfQoKICAgIGlmIChEUy5BZGFwdGVyLmRldGVjdChhZGFwdGVyKSkgewogICAgICBhZGFwdGVyID0gYWRhcHRlci5jcmVhdGUoeyBjb250YWluZXI6IHRoaXMuY29udGFpbmVyIH0pOwogICAgfQoKICAgIHJldHVybiBhZGFwdGVyOwogIH0pLAoKICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4KICAvLyAuIENSRUFURSBORVcgUkVDT1JEIC4KICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBDcmVhdGUgYSBuZXcgcmVjb3JkIGluIHRoZSBjdXJyZW50IHN0b3JlLiBUaGUgcHJvcGVydGllcyBwYXNzZWQKICAgIHRvIHRoaXMgbWV0aG9kIGFyZSBzZXQgb24gdGhlIG5ld2x5IGNyZWF0ZWQgcmVjb3JkLgoKICAgIFRvIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBgQXBwLlBvc3RgOgoKICAgIGBgYGpzCiAgICBzdG9yZS5jcmVhdGVSZWNvcmQoJ3Bvc3QnLCB7CiAgICAgIHRpdGxlOiAiUmFpbHMgaXMgb21ha2FzZSIKICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBjcmVhdGVSZWNvcmQKICAgIEBwYXJhbSB7U3RyaW5nfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBhIGhhc2ggb2YgcHJvcGVydGllcyB0byBzZXQgb24gdGhlCiAgICAgIG5ld2x5IGNyZWF0ZWQgcmVjb3JkLgogICAgQHJldHVybnMge0RTLk1vZGVsfSByZWNvcmQKICAqLwogIGNyZWF0ZVJlY29yZDogZnVuY3Rpb24odHlwZSwgcHJvcGVydGllcykgewogICAgdHlwZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgcHJvcGVydGllcyA9IGNvcHkocHJvcGVydGllcykgfHwge307CgogICAgLy8gSWYgdGhlIHBhc3NlZCBwcm9wZXJ0aWVzIGRvIG5vdCBpbmNsdWRlIGEgcHJpbWFyeSBrZXksCiAgICAvLyBnaXZlIHRoZSBhZGFwdGVyIGFuIG9wcG9ydHVuaXR5IHRvIGdlbmVyYXRlIG9uZS4gVHlwaWNhbGx5LAogICAgLy8gY2xpZW50LXNpZGUgSUQgZ2VuZXJhdG9ycyB3aWxsIHVzZSBzb21ldGhpbmcgbGlrZSB1dWlkLmpzCiAgICAvLyB0byBhdm9pZCBjb25mbGljdHMuCgogICAgaWYgKGlzTm9uZShwcm9wZXJ0aWVzLmlkKSkgewogICAgICBwcm9wZXJ0aWVzLmlkID0gdGhpcy5fZ2VuZXJhdGVJZCh0eXBlKTsKICAgIH0KCiAgICAvLyBDb2VyY2UgSUQgdG8gYSBzdHJpbmcKICAgIHByb3BlcnRpZXMuaWQgPSBjb2VyY2VJZChwcm9wZXJ0aWVzLmlkKTsKCiAgICB2YXIgcmVjb3JkID0gdGhpcy5idWlsZFJlY29yZCh0eXBlLCBwcm9wZXJ0aWVzLmlkKTsKCiAgICAvLyBNb3ZlIHRoZSByZWNvcmQgb3V0IG9mIGl0cyBpbml0aWFsIGBlbXB0eWAgc3RhdGUgaW50bwogICAgLy8gdGhlIGBsb2FkZWRgIHN0YXRlLgogICAgcmVjb3JkLmxvYWRlZERhdGEoKTsKCiAgICAvLyBTZXQgdGhlIHByb3BlcnRpZXMgc3BlY2lmaWVkIG9uIHRoZSByZWNvcmQuCiAgICByZWNvcmQuc2V0UHJvcGVydGllcyhwcm9wZXJ0aWVzKTsKCiAgICByZXR1cm4gcmVjb3JkOwogIH0sCgogIC8qKgogICAgSWYgcG9zc2libGUsIHRoaXMgbWV0aG9kIGFza3MgdGhlIGFkYXB0ZXIgdG8gZ2VuZXJhdGUgYW4gSUQgZm9yCiAgICBhIG5ld2x5IGNyZWF0ZWQgcmVjb3JkLgoKICAgIEBtZXRob2QgX2dlbmVyYXRlSWQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgQHJldHVybnMge1N0cmluZ30gaWYgdGhlIGFkYXB0ZXIgY2FuIGdlbmVyYXRlIG9uZSwgYW4gSUQKICAqLwogIF9nZW5lcmF0ZUlkOiBmdW5jdGlvbih0eXBlKSB7CiAgICB2YXIgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0eXBlKTsKCiAgICBpZiAoYWRhcHRlciAmJiBhZGFwdGVyLmdlbmVyYXRlSWRGb3JSZWNvcmQpIHsKICAgICAgcmV0dXJuIGFkYXB0ZXIuZ2VuZXJhdGVJZEZvclJlY29yZCh0aGlzKTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLi4uLgogIC8vIC4gREVMRVRFIFJFQ09SRCAuCiAgLy8gLi4uLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBGb3Igc3ltbWV0cnksIGEgcmVjb3JkIGNhbiBiZSBkZWxldGVkIHZpYSB0aGUgc3RvcmUuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIHZhciBwb3N0ID0gc3RvcmUuY3JlYXRlUmVjb3JkKCdwb3N0JywgewogICAgICB0aXRsZTogIlJhaWxzIGlzIG9tYWthc2UiCiAgICB9KTsKCiAgICBzdG9yZS5kZWxldGVkUmVjb3JkKHBvc3QpOwogICAgYGBgCgogICAgQG1ldGhvZCBkZWxldGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgZGVsZXRlUmVjb3JkOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgIHJlY29yZC5kZWxldGVSZWNvcmQoKTsKICB9LAoKICAvKioKICAgIEZvciBzeW1tZXRyeSwgYSByZWNvcmQgY2FuIGJlIHVubG9hZGVkIHZpYSB0aGUgc3RvcmUuIE9ubHkKICAgIG5vbi1kaXJ0eSByZWNvcmRzIGNhbiBiZSB1bmxvYWRlZC4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgc3RvcmUuZmluZCgncG9zdCcsIDEpLnRoZW4oZnVuY3Rpb24ocG9zdCkgewogICAgICBzdG9yZS51bmxvYWRSZWNvcmQocG9zdCk7CiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2QgdW5sb2FkUmVjb3JkCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAqLwogIHVubG9hZFJlY29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICByZWNvcmQudW5sb2FkUmVjb3JkKCk7CiAgfSwKCiAgLy8gLi4uLi4uLi4uLi4uLi4uLgogIC8vIC4gRklORCBSRUNPUkRTIC4KICAvLyAuLi4uLi4uLi4uLi4uLi4uCgogIC8qKgogICAgVGhpcyBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBpbnRvIGZpbmRpbmcgcmVjb3Jkcy4gVGhlIGZpcnN0IHBhcmFtZXRlciB0bwogICAgdGhpcyBtZXRob2QgaXMgdGhlIG1vZGVsJ3MgbmFtZSBhcyBhIHN0cmluZy4KCiAgICAtLS0KCiAgICBUbyBmaW5kIGEgcmVjb3JkIGJ5IElELCBwYXNzIHRoZSBgaWRgIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyOgoKICAgIGBgYGphdmFzY3JpcHQKICAgIHN0b3JlLmZpbmQoJ3BlcnNvbicsIDEpOwogICAgYGBgCgogICAgVGhlIGBmaW5kYCBtZXRob2Qgd2lsbCBhbHdheXMgcmV0dXJuIGEgKipwcm9taXNlKiogdGhhdCB3aWxsIGJlIHJlc29sdmVkCiAgICB3aXRoIHRoZSByZWNvcmQuIElmIHRoZSByZWNvcmQgd2FzIGFscmVhZHkgaW4gdGhlIHN0b3JlLCB0aGUgcHJvbWlzZSB3aWxsCiAgICBiZSByZXNvbHZlZCBpbW1lZGlhdGVseS4gT3RoZXJ3aXNlLCB0aGUgc3RvcmUgd2lsbCBhc2sgdGhlIGFkYXB0ZXIncyBgZmluZGAKICAgIG1ldGhvZCB0byBmaW5kIHRoZSBuZWNlc3NhcnkgZGF0YS4KCiAgICBUaGUgYGZpbmRgIG1ldGhvZCB3aWxsIGFsd2F5cyByZXNvbHZlIGl0cyBwcm9taXNlIHdpdGggdGhlIHNhbWUgb2JqZWN0IGZvcgogICAgYSBnaXZlbiB0eXBlIGFuZCBgaWRgLgoKICAgIC0tLQoKICAgIFRvIGZpbmQgYWxsIHJlY29yZHMgZm9yIGEgdHlwZSwgY2FsbCBgZmluZGAgd2l0aCBubyBhZGRpdGlvbmFsIHBhcmFtZXRlcnM6CgogICAgYGBgamF2YXNjcmlwdAogICAgc3RvcmUuZmluZCgncGVyc29uJyk7CiAgICBgYGAKCiAgICBUaGlzIHdpbGwgYXNrIHRoZSBhZGFwdGVyJ3MgYGZpbmRBbGxgIG1ldGhvZCB0byBmaW5kIHRoZSByZWNvcmRzIGZvciB0aGUKICAgIGdpdmVuIHR5cGUsIGFuZCByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBvbmNlIHRoZSBzZXJ2ZXIKICAgIHJldHVybnMgdGhlIHZhbHVlcy4KCiAgICAtLS0KCiAgICBUbyBmaW5kIGEgcmVjb3JkIGJ5IGEgcXVlcnksIGNhbGwgYGZpbmRgIHdpdGggYSBoYXNoIGFzIHRoZSBzZWNvbmQKICAgIHBhcmFtZXRlcjoKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBzdG9yZS5maW5kKEFwcC5QZXJzb24sIHsgcGFnZTogMSB9KTsKICAgIGBgYAoKICAgIFRoaXMgd2lsbCBhc2sgdGhlIGFkYXB0ZXIncyBgZmluZFF1ZXJ5YCBtZXRob2QgdG8gZmluZCB0aGUgcmVjb3JkcyBmb3IKICAgIHRoZSBxdWVyeSwgYW5kIHJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIG9uY2UgdGhlIHNlcnZlcgogICAgcmVzcG9uZHMuCgogICAgQG1ldGhvZCBmaW5kCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R8U3RyaW5nfEludGVnZXJ8bnVsbH0gaWQKICAgIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmQ6IGZ1bmN0aW9uKHR5cGUsIGlkKSB7CiAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gdGhpcy5maW5kQWxsKHR5cGUpOwogICAgfQoKICAgIC8vIFdlIGFyZSBwYXNzZWQgYSBxdWVyeSBpbnN0ZWFkIG9mIGFuIGlkLgogICAgaWYgKEVtYmVyLnR5cGVPZihpZCkgPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiB0aGlzLmZpbmRRdWVyeSh0eXBlLCBpZCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuZmluZEJ5SWQodHlwZSwgY29lcmNlSWQoaWQpKTsKICB9LAoKICAvKioKICAgIFRoaXMgbWV0aG9kIHJldHVybnMgYSByZWNvcmQgZm9yIGEgZ2l2ZW4gdHlwZSBhbmQgaWQgY29tYmluYXRpb24uCgogICAgQG1ldGhvZCBmaW5kQnlJZAogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7U3RyaW5nIG9yIHN1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge1N0cmluZ3xJbnRlZ2VyfSBpZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgZmluZEJ5SWQ6IGZ1bmN0aW9uKHR5cGUsIGlkKSB7CiAgICB0eXBlID0gdGhpcy5tb2RlbEZvcih0eXBlKTsKCiAgICB2YXIgcmVjb3JkID0gdGhpcy5yZWNvcmRGb3JJZCh0eXBlLCBpZCk7CgogICAgdmFyIHByb21pc2UgPSB0aGlzLmZldGNoUmVjb3JkKHJlY29yZCkgfHwgcmVzb2x2ZShyZWNvcmQsICJEUzogU3RvcmUjZmluZEJ5SWQgIiArIHR5cGUgKyAiIHdpdGggaWQ6ICIgKyBpZCk7CiAgICByZXR1cm4gcHJvbWlzZU9iamVjdChwcm9taXNlKTsKICB9LAoKICAvKioKICAgIFRoaXMgbWV0aG9kIG1ha2VzIGEgc2VyaWVzIG9mIHJlcXVlc3RzIHRvIHRoZSBhZGFwdGVyJ3MgYGZpbmRgIG1ldGhvZAogICAgYW5kIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGV5IGFyZSBhbGwgbG9hZGVkLgoKICAgIEBwcml2YXRlCiAgICBAbWV0aG9kIGZpbmRCeUlkcwogICAgQHBhcmFtIHtTdHJpbmd9IHR5cGUKICAgIEBwYXJhbSB7QXJyYXl9IGlkcwogICAgQHJldHVybnMge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmRCeUlkczogZnVuY3Rpb24odHlwZSwgaWRzKSB7CiAgICB2YXIgc3RvcmUgPSB0aGlzOwogICAgdmFyIHByb21pc2VMYWJlbCA9ICJEUzogU3RvcmUjZmluZEJ5SWRzICIgKyB0eXBlOwogICAgcmV0dXJuIHByb21pc2VBcnJheShFbWJlci5SU1ZQLmFsbChtYXAoaWRzLCBmdW5jdGlvbihpZCkgewogICAgICByZXR1cm4gc3RvcmUuZmluZEJ5SWQodHlwZSwgaWQpOwogICAgfSkpLnRoZW4oRW1iZXIuQSwgbnVsbCwgIkRTOiBTdG9yZSNmaW5kQnlJZHMgb2YgIiArIHR5cGUgKyAiIGNvbXBsZXRlIikpOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IGBmaW5kQnlJZGAgaWYgaXQgZGlzY292ZXJzIHRoYXQgYSBwYXJ0aWN1bGFyCiAgICB0eXBlL2lkIHBhaXIgaGFzbid0IGJlZW4gbG9hZGVkIHlldCB0byBraWNrIG9mZiBhIHJlcXVlc3QgdG8gdGhlCiAgICBhZGFwdGVyLgoKICAgIEBtZXRob2QgZmV0Y2hSZWNvcmQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICBmZXRjaFJlY29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICBpZiAoaXNOb25lKHJlY29yZCkpIHsgcmV0dXJuIG51bGw7IH0KICAgIGlmIChyZWNvcmQuX2xvYWRpbmdQcm9taXNlKSB7IHJldHVybiByZWNvcmQuX2xvYWRpbmdQcm9taXNlOyB9CiAgICBpZiAoIWdldChyZWNvcmQsICdpc0VtcHR5JykpIHsgcmV0dXJuIG51bGw7IH0KCiAgICB2YXIgdHlwZSA9IHJlY29yZC5jb25zdHJ1Y3RvciwKICAgICAgICBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgIHZhciBhZGFwdGVyID0gdGhpcy5hZGFwdGVyRm9yKHR5cGUpOwoKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIGZpbmQgYSByZWNvcmQgYnV0IHlvdSBoYXZlIG5vIGFkYXB0ZXIgKGZvciAiICsgdHlwZSArICIpIiwgYWRhcHRlcik7CiAgICBFbWJlci5hc3NlcnQoIllvdSB0cmllZCB0byBmaW5kIGEgcmVjb3JkIGJ1dCB5b3VyIGFkYXB0ZXIgKGZvciAiICsgdHlwZSArICIpIGRvZXMgbm90IGltcGxlbWVudCAnZmluZCciLCBhZGFwdGVyLmZpbmQpOwoKICAgIHZhciBwcm9taXNlID0gX2ZpbmQoYWRhcHRlciwgdGhpcywgdHlwZSwgaWQpOwogICAgcmVjb3JkLmxvYWRpbmdEYXRhKHByb21pc2UpOwogICAgcmV0dXJuIHByb21pc2U7CiAgfSwKCiAgLyoqCiAgICBHZXQgYSByZWNvcmQgYnkgYSBnaXZlbiB0eXBlIGFuZCBJRCB3aXRob3V0IHRyaWdnZXJpbmcgYSBmZXRjaC4KCiAgICBUaGlzIG1ldGhvZCB3aWxsIHN5bmNocm9ub3VzbHkgcmV0dXJuIHRoZSByZWNvcmQgaWYgaXQncyBhdmFpbGFibGUuCiAgICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIG51bGwuCgogICAgYGBganMKICAgIHZhciBwb3N0ID0gc3RvcmUuZ2V0QnlJZCgncG9zdCcsIDEpOwogICAgYGBgCgogICAgQG1ldGhvZCBnZXRCeUlkCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtTdHJpbmd8SW50ZWdlcn0gaWQKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgZ2V0QnlJZDogZnVuY3Rpb24odHlwZSwgaWQpIHsKICAgIGlmICh0aGlzLmhhc1JlY29yZEZvcklkKHR5cGUsIGlkKSkgewogICAgICByZXR1cm4gdGhpcy5yZWNvcmRGb3JJZCh0eXBlLCBpZCk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LAoKICAvKioKICAgIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGUgcmVjb3JkJ3MgYHJlbG9hZGAgbWV0aG9kLgoKICAgIFRoaXMgbWV0aG9kIGNhbGxzIHRoZSBhZGFwdGVyJ3MgYGZpbmRgIG1ldGhvZCwgd2hpY2ggcmV0dXJucyBhIHByb21pc2UuIFdoZW4KICAgICoqdGhhdCoqIHByb21pc2UgcmVzb2x2ZXMsIGByZWxvYWRSZWNvcmRgIHdpbGwgcmVzb2x2ZSB0aGUgcHJvbWlzZSByZXR1cm5lZAogICAgYnkgdGhlIHJlY29yZCdzIGByZWxvYWRgLgoKICAgIEBtZXRob2QgcmVsb2FkUmVjb3JkCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICByZWxvYWRSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgdmFyIHR5cGUgPSByZWNvcmQuY29uc3RydWN0b3IsCiAgICAgICAgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0eXBlKSwKICAgICAgICBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgIEVtYmVyLmFzc2VydCgiWW91IGNhbm5vdCByZWxvYWQgYSByZWNvcmQgd2l0aG91dCBhbiBJRCIsIGlkKTsKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIHJlbG9hZCBhIHJlY29yZCBidXQgeW91IGhhdmUgbm8gYWRhcHRlciAoZm9yICIgKyB0eXBlICsgIikiLCBhZGFwdGVyKTsKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIHJlbG9hZCBhIHJlY29yZCBidXQgeW91ciBhZGFwdGVyIGRvZXMgbm90IGltcGxlbWVudCBgZmluZGAiLCBhZGFwdGVyLmZpbmQpOwoKICAgIHJldHVybiBfZmluZChhZGFwdGVyLCB0aGlzLCB0eXBlLCBpZCk7CiAgfSwKCiAgLyoqCiAgICBUaGlzIG1ldGhvZCB0YWtlcyBhIGxpc3Qgb2YgcmVjb3JkcywgZ3JvdXBzIHRoZSByZWNvcmRzIGJ5IHR5cGUsCiAgICBjb252ZXJ0cyB0aGUgcmVjb3JkcyBpbnRvIElEcywgYW5kIHRoZW4gaW52b2tlcyB0aGUgYWRhcHRlcidzIGBmaW5kTWFueWAKICAgIG1ldGhvZC4KCiAgICBUaGUgcmVjb3JkcyBhcmUgZ3JvdXBlZCBieSB0eXBlIHRvIGludm9rZSBgZmluZE1hbnlgIG9uIGFkYXB0ZXJzCiAgICBmb3IgZWFjaCB1bmlxdWUgdHlwZSBpbiByZWNvcmRzLgoKICAgIEl0IGlzIHVzZWQgYm90aCBieSBhIGJyYW5kIG5ldyByZWxhdGlvbnNoaXAgKHZpYSB0aGUgYGZpbmRNYW55YAogICAgbWV0aG9kKSBvciB3aGVuIHRoZSBkYXRhIHVuZGVybHlpbmcgYW4gZXhpc3RpbmcgcmVsYXRpb25zaGlwCiAgICBjaGFuZ2VzLgoKICAgIEBtZXRob2QgZmV0Y2hNYW55CiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtBcnJheX0gcmVjb3JkcwogICAgQHBhcmFtIHtEUy5Nb2RlbH0gb3duZXIKICAgIEBwYXJhbSB7UmVzb2x2ZXJ9IHJlc29sdmVyCiAgKi8KICBmZXRjaE1hbnk6IGZ1bmN0aW9uKHJlY29yZHMsIG93bmVyLCByZXNvbHZlcikgewogICAgaWYgKCFyZWNvcmRzLmxlbmd0aCkgeyByZXR1cm47IH0KCiAgICAvLyBHcm91cCBCeSBUeXBlCiAgICB2YXIgcmVjb3Jkc0J5VHlwZU1hcCA9IEVtYmVyLk1hcFdpdGhEZWZhdWx0LmNyZWF0ZSh7CiAgICAgIGRlZmF1bHRWYWx1ZTogZnVuY3Rpb24oKSB7IHJldHVybiBFbWJlci5BKCk7IH0KICAgIH0pOwoKICAgIGZvckVhY2gocmVjb3JkcywgZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZHNCeVR5cGVNYXAuZ2V0KHJlY29yZC5jb25zdHJ1Y3RvcikucHVzaChyZWNvcmQpOwogICAgfSk7CgogICAgZm9yRWFjaChyZWNvcmRzQnlUeXBlTWFwLCBmdW5jdGlvbih0eXBlLCByZWNvcmRzKSB7CiAgICAgIHZhciBpZHMgPSByZWNvcmRzLm1hcFByb3BlcnR5KCdpZCcpLAogICAgICAgICAgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0eXBlKTsKCiAgICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIGxvYWQgbWFueSByZWNvcmRzIGJ1dCB5b3UgaGF2ZSBubyBhZGFwdGVyIChmb3IgIiArIHR5cGUgKyAiKSIsIGFkYXB0ZXIpOwogICAgICBFbWJlci5hc3NlcnQoIllvdSB0cmllZCB0byBsb2FkIG1hbnkgcmVjb3JkcyBidXQgeW91ciBhZGFwdGVyIGRvZXMgbm90IGltcGxlbWVudCBgZmluZE1hbnlgIiwgYWRhcHRlci5maW5kTWFueSk7CgogICAgICByZXNvbHZlci5yZXNvbHZlKF9maW5kTWFueShhZGFwdGVyLCB0aGlzLCB0eXBlLCBpZHMsIG93bmVyKSk7CiAgICB9LCB0aGlzKTsKICB9LAoKICAvKioKICAgIFJldHVybnMgdHJ1ZSBpZiBhIHJlY29yZCBmb3IgYSBnaXZlbiB0eXBlIGFuZCBJRCBpcyBhbHJlYWR5IGxvYWRlZC4KCiAgICBAbWV0aG9kIGhhc1JlY29yZEZvcklkCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtTdHJpbmd8SW50ZWdlcn0gaWQKICAgIEByZXR1cm5zIHtCb29sZWFufQogICovCiAgaGFzUmVjb3JkRm9ySWQ6IGZ1bmN0aW9uKHR5cGUsIGlkKSB7CiAgICBpZCA9IGNvZXJjZUlkKGlkKTsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwogICAgcmV0dXJuICEhdGhpcy50eXBlTWFwRm9yKHR5cGUpLmlkVG9SZWNvcmRbaWRdOwogIH0sCgogIC8qKgogICAgUmV0dXJucyBpZCByZWNvcmQgZm9yIGEgZ2l2ZW4gdHlwZSBhbmQgSUQuIElmIG9uZSBpc24ndCBhbHJlYWR5IGxvYWRlZCwKICAgIGl0IGJ1aWxkcyBhIG5ldyByZWNvcmQgYW5kIGxlYXZlcyBpdCBpbiB0aGUgYGVtcHR5YCBzdGF0ZS4KCiAgICBAbWV0aG9kIHJlY29yZEZvcklkCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtTdHJpbmcgb3Igc3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7U3RyaW5nfEludGVnZXJ9IGlkCiAgICBAcmV0dXJucyB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgcmVjb3JkRm9ySWQ6IGZ1bmN0aW9uKHR5cGUsIGlkKSB7CiAgICB0eXBlID0gdGhpcy5tb2RlbEZvcih0eXBlKTsKCiAgICBpZCA9IGNvZXJjZUlkKGlkKTsKCiAgICB2YXIgcmVjb3JkID0gdGhpcy50eXBlTWFwRm9yKHR5cGUpLmlkVG9SZWNvcmRbaWRdOwoKICAgIGlmICghcmVjb3JkKSB7CiAgICAgIHJlY29yZCA9IHRoaXMuYnVpbGRSZWNvcmQodHlwZSwgaWQpOwogICAgfQoKICAgIHJldHVybiByZWNvcmQ7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGZpbmRNYW55CiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gb3duZXIKICAgIEBwYXJhbSB7QXJyYXl9IHJlY29yZHMKICAgIEBwYXJhbSB7U3RyaW5nIG9yIHN1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge1Jlc29sdmVyfSByZXNvbHZlcgogICAgQHJldHVybiB7RFMuTWFueUFycmF5fSByZWNvcmRzCiAgKi8KICBmaW5kTWFueTogZnVuY3Rpb24ob3duZXIsIHJlY29yZHMsIHR5cGUsIHJlc29sdmVyKSB7CiAgICB0eXBlID0gdGhpcy5tb2RlbEZvcih0eXBlKTsKCiAgICByZWNvcmRzID0gRW1iZXIuQShyZWNvcmRzKTsKCiAgICB2YXIgdW5sb2FkZWRSZWNvcmRzID0gcmVjb3Jkcy5maWx0ZXJQcm9wZXJ0eSgnaXNFbXB0eScsIHRydWUpLAogICAgICAgIG1hbnlBcnJheSA9IHRoaXMucmVjb3JkQXJyYXlNYW5hZ2VyLmNyZWF0ZU1hbnlBcnJheSh0eXBlLCByZWNvcmRzKTsKCiAgICBmb3JFYWNoKHVubG9hZGVkUmVjb3JkcywgZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC5sb2FkaW5nRGF0YSgpOwogICAgfSk7CgogICAgbWFueUFycmF5LmxvYWRpbmdSZWNvcmRzQ291bnQgPSB1bmxvYWRlZFJlY29yZHMubGVuZ3RoOwoKICAgIGlmICh1bmxvYWRlZFJlY29yZHMubGVuZ3RoKSB7CiAgICAgIGZvckVhY2godW5sb2FkZWRSZWNvcmRzLCBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgICB0aGlzLnJlY29yZEFycmF5TWFuYWdlci5yZWdpc3RlcldhaXRpbmdSZWNvcmRBcnJheShyZWNvcmQsIG1hbnlBcnJheSk7CiAgICAgIH0sIHRoaXMpOwoKICAgICAgdGhpcy5mZXRjaE1hbnkodW5sb2FkZWRSZWNvcmRzLCBvd25lciwgcmVzb2x2ZXIpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHJlc29sdmVyKSB7IHJlc29sdmVyLnJlc29sdmUoKTsgfQogICAgICBtYW55QXJyYXkuc2V0KCdpc0xvYWRlZCcsIHRydWUpOwogICAgICBFbWJlci5ydW4ub25jZShtYW55QXJyYXksICd0cmlnZ2VyJywgJ2RpZExvYWQnKTsKICAgIH0KCiAgICByZXR1cm4gbWFueUFycmF5OwogIH0sCgogIC8qKgogICAgSWYgYSByZWxhdGlvbnNoaXAgd2FzIG9yaWdpbmFsbHkgcG9wdWxhdGVkIGJ5IHRoZSBhZGFwdGVyIGFzIGEgbGluawogICAgKGFzIG9wcG9zZWQgdG8gYSBsaXN0IG9mIElEcyksIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZQogICAgcmVsYXRpb25zaGlwIGlzIGZldGNoZWQuCgogICAgVGhlIGxpbmsgKHdoaWNoIGlzIHVzdWFsbHkgYSBVUkwpIGlzIHBhc3NlZCB0aHJvdWdoIHVuY2hhbmdlZCwgc28gdGhlCiAgICBhZGFwdGVyIGNhbiBtYWtlIHdoYXRldmVyIHJlcXVlc3QgaXQgd2FudHMuCgogICAgVGhlIHVzdWFsIHVzZS1jYXNlIGlzIGZvciB0aGUgc2VydmVyIHRvIHJlZ2lzdGVyIGEgVVJMIGFzIGEgbGluaywgYW5kCiAgICB0aGVuIHVzZSB0aGF0IFVSTCBpbiB0aGUgZnV0dXJlIHRvIG1ha2UgYSByZXF1ZXN0IGZvciB0aGUgcmVsYXRpb25zaGlwLgoKICAgIEBtZXRob2QgZmluZEhhc01hbnkKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSBvd25lcgogICAgQHBhcmFtIHthbnl9IGxpbmsKICAgIEBwYXJhbSB7U3RyaW5nIG9yIHN1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge1Jlc29sdmVyfSByZXNvbHZlcgogICAgQHJldHVybiB7RFMuTWFueUFycmF5fQogICovCiAgZmluZEhhc01hbnk6IGZ1bmN0aW9uKG93bmVyLCBsaW5rLCByZWxhdGlvbnNoaXAsIHJlc29sdmVyKSB7CiAgICB2YXIgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcihvd25lci5jb25zdHJ1Y3Rvcik7CgogICAgRW1iZXIuYXNzZXJ0KCJZb3UgdHJpZWQgdG8gbG9hZCBhIGhhc01hbnkgcmVsYXRpb25zaGlwIGJ1dCB5b3UgaGF2ZSBubyBhZGFwdGVyIChmb3IgIiArIG93bmVyLmNvbnN0cnVjdG9yICsgIikiLCBhZGFwdGVyKTsKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIGxvYWQgYSBoYXNNYW55IHJlbGF0aW9uc2hpcCBmcm9tIGEgc3BlY2lmaWVkIGBsaW5rYCBpbiB0aGUgb3JpZ2luYWwgcGF5bG9hZCBidXQgeW91ciBhZGFwdGVyIGRvZXMgbm90IGltcGxlbWVudCBgZmluZEhhc01hbnlgIiwgYWRhcHRlci5maW5kSGFzTWFueSk7CgogICAgdmFyIHJlY29yZHMgPSB0aGlzLnJlY29yZEFycmF5TWFuYWdlci5jcmVhdGVNYW55QXJyYXkocmVsYXRpb25zaGlwLnR5cGUsIEVtYmVyLkEoW10pKTsKICAgIHJlc29sdmVyLnJlc29sdmUoX2ZpbmRIYXNNYW55KGFkYXB0ZXIsIHRoaXMsIG93bmVyLCBsaW5rLCByZWxhdGlvbnNoaXApKTsKICAgIHJldHVybiByZWNvcmRzOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBmaW5kQmVsb25nc1RvCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gb3duZXIKICAgIEBwYXJhbSB7YW55fSBsaW5rCiAgICBAcGFyYW0ge1JlbGF0aW9uc2hpcH0gcmVsYXRpb25zaGlwCiAgICBAcGFyYW0ge1Jlc29sdmVyfSByZXNvbHZlcgogICovCiAgZmluZEJlbG9uZ3NUbzogZnVuY3Rpb24ob3duZXIsIGxpbmssIHJlbGF0aW9uc2hpcCwgcmVzb2x2ZXIpIHsKICAgIHZhciBhZGFwdGVyID0gdGhpcy5hZGFwdGVyRm9yKG93bmVyLmNvbnN0cnVjdG9yKTsKCiAgICBFbWJlci5hc3NlcnQoIllvdSB0cmllZCB0byBsb2FkIGEgYmVsb25nc1RvIHJlbGF0aW9uc2hpcCBidXQgeW91IGhhdmUgbm8gYWRhcHRlciAoZm9yICIgKyBvd25lci5jb25zdHJ1Y3RvciArICIpIiwgYWRhcHRlcik7CiAgICBFbWJlci5hc3NlcnQoIllvdSB0cmllZCB0byBsb2FkIGEgYmVsb25nc1RvIHJlbGF0aW9uc2hpcCBmcm9tIGEgc3BlY2lmaWVkIGBsaW5rYCBpbiB0aGUgb3JpZ2luYWwgcGF5bG9hZCBidXQgeW91ciBhZGFwdGVyIGRvZXMgbm90IGltcGxlbWVudCBgZmluZEJlbG9uZ3NUb2AiLCBhZGFwdGVyLmZpbmRCZWxvbmdzVG8pOwoKICAgIHJlc29sdmVyLnJlc29sdmUoX2ZpbmRCZWxvbmdzVG8oYWRhcHRlciwgdGhpcywgb3duZXIsIGxpbmssIHJlbGF0aW9uc2hpcCkpOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgZGVsZWdhdGVzIGEgcXVlcnkgdG8gdGhlIGFkYXB0ZXIuIFRoaXMgaXMgdGhlIG9uZSBwbGFjZSB3aGVyZQogICAgYWRhcHRlci1sZXZlbCBzZW1hbnRpY3MgYXJlIGV4cG9zZWQgdG8gdGhlIGFwcGxpY2F0aW9uLgoKICAgIEV4cG9zaW5nIHF1ZXJpZXMgdGhpcyB3YXkgc2VlbXMgcHJlZmVyYWJsZSB0byBjcmVhdGluZyBhbiBhYnN0cmFjdCBxdWVyeQogICAgbGFuZ3VhZ2UgZm9yIGFsbCBzZXJ2ZXItc2lkZSBxdWVyaWVzLCBhbmQgdGhlbiByZXF1aXJlIGFsbCBhZGFwdGVycyB0bwogICAgaW1wbGVtZW50IHRoZW0uCgogICAgVGhpcyBtZXRob2QgcmV0dXJucyBhIHByb21pc2UsIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggYSBgUmVjb3JkQXJyYXlgCiAgICBvbmNlIHRoZSBzZXJ2ZXIgcmV0dXJucy4KCiAgICBAbWV0aG9kIGZpbmRRdWVyeQogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7U3RyaW5nIG9yIHN1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge2FueX0gcXVlcnkgYW4gb3BhcXVlIHF1ZXJ5IHRvIGJlIHVzZWQgYnkgdGhlIGFkYXB0ZXIKICAgIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmRRdWVyeTogZnVuY3Rpb24odHlwZSwgcXVlcnkpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoKICAgIHZhciBhcnJheSA9IHRoaXMucmVjb3JkQXJyYXlNYW5hZ2VyCiAgICAgIC5jcmVhdGVBZGFwdGVyUG9wdWxhdGVkUmVjb3JkQXJyYXkodHlwZSwgcXVlcnkpOwoKICAgIHZhciBhZGFwdGVyID0gdGhpcy5hZGFwdGVyRm9yKHR5cGUpLAogICAgICAgIHByb21pc2VMYWJlbCA9ICJEUzogU3RvcmUjZmluZFF1ZXJ5ICIgKyB0eXBlLAogICAgICAgIHJlc29sdmVyID0gRW1iZXIuUlNWUC5kZWZlcihwcm9taXNlTGFiZWwpOwoKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIGxvYWQgYSBxdWVyeSBidXQgeW91IGhhdmUgbm8gYWRhcHRlciAoZm9yICIgKyB0eXBlICsgIikiLCBhZGFwdGVyKTsKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIGxvYWQgYSBxdWVyeSBidXQgeW91ciBhZGFwdGVyIGRvZXMgbm90IGltcGxlbWVudCBgZmluZFF1ZXJ5YCIsIGFkYXB0ZXIuZmluZFF1ZXJ5KTsKCiAgICByZXNvbHZlci5yZXNvbHZlKF9maW5kUXVlcnkoYWRhcHRlciwgdGhpcywgdHlwZSwgcXVlcnksIGFycmF5KSk7CgogICAgcmV0dXJuIHByb21pc2VBcnJheShyZXNvbHZlci5wcm9taXNlKTsKICB9LAoKICAvKioKICAgIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHJlY29yZHMgYWRhcHRlciBjYW4gZmluZC4KICAgIEl0IHRyaWdnZXJzIHRoZSBhZGFwdGVyJ3MgYGZpbmRBbGxgIG1ldGhvZCB0byBnaXZlIGl0IGFuIG9wcG9ydHVuaXR5IHRvIHBvcHVsYXRlCiAgICB0aGUgYXJyYXkgd2l0aCByZWNvcmRzIG9mIHRoYXQgdHlwZS4KCiAgICBAbWV0aG9kIGZpbmRBbGwKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHJldHVybiB7RFMuQWRhcHRlclBvcHVsYXRlZFJlY29yZEFycmF5fQogICovCiAgZmluZEFsbDogZnVuY3Rpb24odHlwZSkgewogICAgdHlwZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgcmV0dXJuIHRoaXMuZmV0Y2hBbGwodHlwZSwgdGhpcy5hbGwodHlwZSkpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBmZXRjaEFsbAogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7RFMuUmVjb3JkQXJyYXl9IGFycmF5CiAgICBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgZmV0Y2hBbGw6IGZ1bmN0aW9uKHR5cGUsIGFycmF5KSB7CiAgICB2YXIgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0eXBlKSwKICAgICAgICBzaW5jZVRva2VuID0gdGhpcy50eXBlTWFwRm9yKHR5cGUpLm1ldGFkYXRhLnNpbmNlOwoKICAgIHNldChhcnJheSwgJ2lzVXBkYXRpbmcnLCB0cnVlKTsKCiAgICBFbWJlci5hc3NlcnQoIllvdSB0cmllZCB0byBsb2FkIGFsbCByZWNvcmRzIGJ1dCB5b3UgaGF2ZSBubyBhZGFwdGVyIChmb3IgIiArIHR5cGUgKyAiKSIsIGFkYXB0ZXIpOwogICAgRW1iZXIuYXNzZXJ0KCJZb3UgdHJpZWQgdG8gbG9hZCBhbGwgcmVjb3JkcyBidXQgeW91ciBhZGFwdGVyIGRvZXMgbm90IGltcGxlbWVudCBgZmluZEFsbGAiLCBhZGFwdGVyLmZpbmRBbGwpOwoKICAgIHJldHVybiBwcm9taXNlQXJyYXkoX2ZpbmRBbGwoYWRhcHRlciwgdGhpcywgdHlwZSwgc2luY2VUb2tlbikpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBkaWRVcGRhdGVBbGwKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHR5cGUKICAqLwogIGRpZFVwZGF0ZUFsbDogZnVuY3Rpb24odHlwZSkgewogICAgdmFyIGZpbmRBbGxDYWNoZSA9IHRoaXMudHlwZU1hcEZvcih0eXBlKS5maW5kQWxsQ2FjaGU7CiAgICBzZXQoZmluZEFsbENhY2hlLCAnaXNVcGRhdGluZycsIGZhbHNlKTsKICB9LAoKICAvKioKICAgIFRoaXMgbWV0aG9kIHJldHVybnMgYSBmaWx0ZXJlZCBhcnJheSB0aGF0IGNvbnRhaW5zIGFsbCBvZiB0aGUga25vd24gcmVjb3JkcwogICAgZm9yIGEgZ2l2ZW4gdHlwZS4KCiAgICBOb3RlIHRoYXQgYmVjYXVzZSBpdCdzIGp1c3QgYSBmaWx0ZXIsIGl0IHdpbGwgaGF2ZSBhbnkgbG9jYWxseQogICAgY3JlYXRlZCByZWNvcmRzIG9mIHRoZSB0eXBlLgoKICAgIEFsc28gbm90ZSB0aGF0IG11bHRpcGxlIGNhbGxzIHRvIGBhbGxgIGZvciBhIGdpdmVuIHR5cGUgd2lsbCBhbHdheXMKICAgIHJldHVybiB0aGUgc2FtZSBSZWNvcmRBcnJheS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIGxvY2FsX3Bvc3RzID0gc3RvcmUuYWxsKEFwcC5Qb3N0KTsKICAgIGBgYAoKICAgIEBtZXRob2QgYWxsCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHJldHVybiB7RFMuUmVjb3JkQXJyYXl9CiAgKi8KICBhbGw6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoKICAgIHZhciB0eXBlTWFwID0gdGhpcy50eXBlTWFwRm9yKHR5cGUpLAogICAgICAgIGZpbmRBbGxDYWNoZSA9IHR5cGVNYXAuZmluZEFsbENhY2hlOwoKICAgIGlmIChmaW5kQWxsQ2FjaGUpIHsgcmV0dXJuIGZpbmRBbGxDYWNoZTsgfQoKICAgIHZhciBhcnJheSA9IHRoaXMucmVjb3JkQXJyYXlNYW5hZ2VyLmNyZWF0ZVJlY29yZEFycmF5KHR5cGUpOwoKICAgIHR5cGVNYXAuZmluZEFsbENhY2hlID0gYXJyYXk7CiAgICByZXR1cm4gYXJyYXk7CiAgfSwKCgogIC8qKgogICAgVGhpcyBtZXRob2QgdW5sb2FkcyBhbGwgb2YgdGhlIGtub3duIHJlY29yZHMgZm9yIGEgZ2l2ZW4gdHlwZS4KCiAgICBgYGBqYXZhc2NyaXB0CiAgICBzdG9yZS51bmxvYWRBbGwoQXBwLlBvc3QpOwogICAgYGBgCgogICAgQG1ldGhvZCB1bmxvYWRBbGwKICAgIEBwYXJhbSB7U3RyaW5nIG9yIHN1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgKi8KICB1bmxvYWRBbGw6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoKICAgIHZhciB0eXBlTWFwID0gdGhpcy50eXBlTWFwRm9yKHR5cGUpLAogICAgICAgIHJlY29yZHMgPSB0eXBlTWFwLnJlY29yZHMsIHJlY29yZDsKCiAgICB3aGlsZShyZWNvcmQgPSByZWNvcmRzLnBvcCgpKSB7CiAgICAgIHJlY29yZC51bmxvYWRSZWNvcmQoKTsKICAgIH0KCiAgICB0eXBlTWFwLmZpbmRBbGxDYWNoZSA9IG51bGw7CiAgfSwKCiAgLyoqCiAgICBUYWtlcyBhIHR5cGUgYW5kIGZpbHRlciBmdW5jdGlvbiwgYW5kIHJldHVybnMgYSBsaXZlIFJlY29yZEFycmF5IHRoYXQKICAgIHJlbWFpbnMgdXAgdG8gZGF0ZSBhcyBuZXcgcmVjb3JkcyBhcmUgbG9hZGVkIGludG8gdGhlIHN0b3JlIG9yIGNyZWF0ZWQKICAgIGxvY2FsbHkuCgogICAgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRha2VzIGEgbWF0ZXJpYWxpemVkIHJlY29yZCwgYW5kIHJldHVybnMgdHJ1ZQogICAgaWYgdGhlIHJlY29yZCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIGZpbHRlciBhbmQgZmFsc2UgaWYgaXQgc2hvdWxkCiAgICBub3QuCgogICAgVGhlIGZpbHRlciBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBvbiBhbGwgcmVjb3JkcyBmb3IgdGhlIHR5cGUgd2hlbgogICAgaXQgaXMgY3JlYXRlZCwgYW5kIHRoZW4gb25jZSBvbiBlYWNoIG5ld2x5IGxvYWRlZCBvciBjcmVhdGVkIHJlY29yZC4KCiAgICBJZiBhbnkgb2YgYSByZWNvcmQncyBwcm9wZXJ0aWVzIGNoYW5nZSwgb3IgaWYgaXQgY2hhbmdlcyBzdGF0ZSwgdGhlCiAgICBmaWx0ZXIgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIGFnYWluIHRvIGRldGVybWluZSB3aGV0aGVyIGl0IHNob3VsZAogICAgc3RpbGwgYmUgaW4gdGhlIGFycmF5LgoKICAgIE9wdGlvbmFsbHkgeW91IGNhbiBwYXNzIGEgcXVlcnkgd2hpY2ggd2lsbCBiZSB0cmlnZ2VyZWQgYXQgZmlyc3QuIFRoZQogICAgcmVzdWx0cyByZXR1cm5lZCBieSB0aGUgc2VydmVyIGNvdWxkIHRoZW4gYXBwZWFyIGluIHRoZSBmaWx0ZXIgaWYgdGhleQogICAgbWF0Y2ggdGhlIGZpbHRlciBmdW5jdGlvbi4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgc3RvcmUuZmlsdGVyKEFwcC5Qb3N0LCB7dW5yZWFkOiB0cnVlfSwgZnVuY3Rpb24ocG9zdCkgewogICAgICByZXR1cm4gcG9zdC5nZXQoJ3VucmVhZCcpOwogICAgfSkudGhlbihmdW5jdGlvbih1bnJlYWRQb3N0cykgewogICAgICB1bnJlYWRQb3N0cy5nZXQoJ2xlbmd0aCcpOyAvLyA1CiAgICAgIHZhciB1bnJlYWRQb3N0ID0gdW5yZWFkUG9zdHMub2JqZWN0QXQoMCk7CiAgICAgIHVucmVhZFBvc3RzLnNldCgndW5yZWFkJywgZmFsc2UpOwogICAgICB1bnJlYWRQb3N0cy5nZXQoJ2xlbmd0aCcpOyAvLyA0CiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2QgZmlsdGVyCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IHF1ZXJ5IG9wdGlvbmFsIHF1ZXJ5CiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXIKICAgIEByZXR1cm4ge0RTLlByb21pc2VBcnJheX0KICAqLwogIGZpbHRlcjogZnVuY3Rpb24odHlwZSwgcXVlcnksIGZpbHRlcikgewogICAgdmFyIHByb21pc2U7CgogICAgLy8gYWxsb3cgYW4gb3B0aW9uYWwgc2VydmVyIHF1ZXJ5CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykgewogICAgICBwcm9taXNlID0gdGhpcy5maW5kUXVlcnkodHlwZSwgcXVlcnkpOwogICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7CiAgICAgIGZpbHRlciA9IHF1ZXJ5OwogICAgfQoKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoKICAgIHZhciBhcnJheSA9IHRoaXMucmVjb3JkQXJyYXlNYW5hZ2VyCiAgICAgIC5jcmVhdGVGaWx0ZXJlZFJlY29yZEFycmF5KHR5cGUsIGZpbHRlcik7CiAgICBwcm9taXNlID0gcHJvbWlzZSB8fCByZXNvbHZlKGFycmF5KTsKCiAgICByZXR1cm4gcHJvbWlzZUFycmF5KHByb21pc2UudGhlbihmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGFycmF5OwogICAgfSwgbnVsbCwgIkRTOiBTdG9yZSNmaWx0ZXIgb2YgIiArIHR5cGUpKTsKICB9LAoKICAvKioKICAgIFRoaXMgbWV0aG9kIHJldHVybnMgaWYgYSBjZXJ0YWluIHJlY29yZCBpcyBhbHJlYWR5IGxvYWRlZAogICAgaW4gdGhlIHN0b3JlLiBVc2UgdGhpcyBmdW5jdGlvbiB0byBrbm93IGJlZm9yZWhhbmQgaWYgYSBmaW5kKCkKICAgIHdpbGwgcmVzdWx0IGluIGEgcmVxdWVzdCBvciB0aGF0IGl0IHdpbGwgYmUgYSBjYWNoZSBoaXQuCgogICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBzdG9yZS5yZWNvcmRJc0xvYWRlZChBcHAuUG9zdCwgMSk7IC8vIGZhbHNlCiAgICBzdG9yZS5maW5kKEFwcC5Qb3N0LCAxKS50aGVuKGZ1bmN0aW9uKCkgewogICAgICBzdG9yZS5yZWNvcmRJc0xvYWRlZChBcHAuUG9zdCwgMSk7IC8vIHRydWUKICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCByZWNvcmRJc0xvYWRlZAogICAgQHBhcmFtIHtTdHJpbmcgb3Igc3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7c3RyaW5nfSBpZAogICAgQHJldHVybiB7Ym9vbGVhbn0KICAqLwogIHJlY29yZElzTG9hZGVkOiBmdW5jdGlvbih0eXBlLCBpZCkgewogICAgaWYgKCF0aGlzLmhhc1JlY29yZEZvcklkKHR5cGUsIGlkKSkgeyByZXR1cm4gZmFsc2U7IH0KICAgIHJldHVybiAhZ2V0KHRoaXMucmVjb3JkRm9ySWQodHlwZSwgaWQpLCAnaXNFbXB0eScpOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGEgc3BlY2lmaWMgdHlwZS4KCiAgICBAbWV0aG9kIG1ldGFkYXRhRm9yCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHJldHVybiB7b2JqZWN0fQogICovCiAgbWV0YWRhdGFGb3I6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwogICAgcmV0dXJuIHRoaXMudHlwZU1hcEZvcih0eXBlKS5tZXRhZGF0YTsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4KICAvLyAuIFVQREFUSU5HIC4KICAvLyAuLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBJZiB0aGUgYWRhcHRlciB1cGRhdGVzIGF0dHJpYnV0ZXMgb3IgYWNrbm93bGVkZ2VzIGNyZWF0aW9uCiAgICBvciBkZWxldGlvbiwgdGhlIHJlY29yZCB3aWxsIG5vdGlmeSB0aGUgc3RvcmUgdG8gdXBkYXRlIGl0cwogICAgbWVtYmVyc2hpcCBpbiBhbnkgZmlsdGVycy4KICAgIFRvIGF2b2lkIHRocmFzaGluZywgdGhpcyBtZXRob2QgaXMgaW52b2tlZCBvbmx5IG9uY2UgcGVyCgogICAgcnVuIGxvb3AgcGVyIHJlY29yZC4KCiAgICBAbWV0aG9kIGRhdGFXYXNVcGRhdGVkCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtDbGFzc30gdHlwZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgKi8KICBkYXRhV2FzVXBkYXRlZDogZnVuY3Rpb24odHlwZSwgcmVjb3JkKSB7CiAgICB0aGlzLnJlY29yZEFycmF5TWFuYWdlci5yZWNvcmREaWRDaGFuZ2UocmVjb3JkKTsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLgogIC8vIC4gUEVSU0lTVElORyAuCiAgLy8gLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgYHJlY29yZC5zYXZlYCwgYW5kIGdldHMgcGFzc2VkIGEKICAgIHJlc29sdmVyIGZvciB0aGUgcHJvbWlzZSB0aGF0IGByZWNvcmQuc2F2ZWAgcmV0dXJucy4KCiAgICBJdCBzY2hlZHVsZXMgc2F2aW5nIHRvIGhhcHBlbiBhdCB0aGUgZW5kIG9mIHRoZSBydW4gbG9vcC4KCiAgICBAbWV0aG9kIHNjaGVkdWxlU2F2ZQogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBhcmFtIHtSZXNvbHZlcn0gcmVzb2x2ZXIKICAqLwogIHNjaGVkdWxlU2F2ZTogZnVuY3Rpb24ocmVjb3JkLCByZXNvbHZlcikgewogICAgcmVjb3JkLmFkYXB0ZXJXaWxsQ29tbWl0KCk7CiAgICB0aGlzLl9wZW5kaW5nU2F2ZS5wdXNoKFtyZWNvcmQsIHJlc29sdmVyXSk7CiAgICBvbmNlKHRoaXMsICdmbHVzaFBlbmRpbmdTYXZlJyk7CiAgfSwKCiAgLyoqCiAgICBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGUgcnVuIGxvb3AsIGFuZAogICAgZmx1c2hlcyBhbnkgcmVjb3JkcyBwYXNzZWQgaW50byBgc2NoZWR1bGVTYXZlYAoKICAgIEBtZXRob2QgZmx1c2hQZW5kaW5nU2F2ZQogICAgQHByaXZhdGUKICAqLwogIGZsdXNoUGVuZGluZ1NhdmU6IGZ1bmN0aW9uKCkgewogICAgdmFyIHBlbmRpbmcgPSB0aGlzLl9wZW5kaW5nU2F2ZS5zbGljZSgpOwogICAgdGhpcy5fcGVuZGluZ1NhdmUgPSBbXTsKCiAgICBmb3JFYWNoKHBlbmRpbmcsIGZ1bmN0aW9uKHR1cGxlKSB7CiAgICAgIHZhciByZWNvcmQgPSB0dXBsZVswXSwgcmVzb2x2ZXIgPSB0dXBsZVsxXSwKICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLmFkYXB0ZXJGb3IocmVjb3JkLmNvbnN0cnVjdG9yKSwKICAgICAgICAgIG9wZXJhdGlvbjsKCiAgICAgIGlmIChnZXQocmVjb3JkLCAnaXNOZXcnKSkgewogICAgICAgIG9wZXJhdGlvbiA9ICdjcmVhdGVSZWNvcmQnOwogICAgICB9IGVsc2UgaWYgKGdldChyZWNvcmQsICdpc0RlbGV0ZWQnKSkgewogICAgICAgIG9wZXJhdGlvbiA9ICdkZWxldGVSZWNvcmQnOwogICAgICB9IGVsc2UgewogICAgICAgIG9wZXJhdGlvbiA9ICd1cGRhdGVSZWNvcmQnOwogICAgICB9CgogICAgICByZXNvbHZlci5yZXNvbHZlKF9jb21taXQoYWRhcHRlciwgdGhpcywgb3BlcmF0aW9uLCByZWNvcmQpKTsKICAgIH0sIHRoaXMpOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uY2UgdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgYW4KICAgIGFkYXB0ZXIncyBgY3JlYXRlUmVjb3JkYCwgYHVwZGF0ZVJlY29yZGAgb3IgYGRlbGV0ZVJlY29yZGAKICAgIGlzIHJlc29sdmVkLgoKICAgIElmIHRoZSBkYXRhIHByb3ZpZGVzIGEgc2VydmVyLWdlbmVyYXRlZCBJRCwgaXQgd2lsbAogICAgdXBkYXRlIHRoZSByZWNvcmQgYW5kIHRoZSBzdG9yZSdzIGluZGV4ZXMuCgogICAgQG1ldGhvZCBkaWRTYXZlUmVjb3JkCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkIHRoZSBpbi1mbGlnaHQgcmVjb3JkCiAgICBAcGFyYW0ge09iamVjdH0gZGF0YSBvcHRpb25hbCBkYXRhIChzZWUgYWJvdmUpCiAgKi8KICBkaWRTYXZlUmVjb3JkOiBmdW5jdGlvbihyZWNvcmQsIGRhdGEpIHsKICAgIGlmIChkYXRhKSB7CiAgICAgIC8vIG5vcm1hbGl6ZSByZWxhdGlvbnNoaXAgSURzIGludG8gcmVjb3JkcwogICAgICBkYXRhID0gbm9ybWFsaXplUmVsYXRpb25zaGlwcyh0aGlzLCByZWNvcmQuY29uc3RydWN0b3IsIGRhdGEsIHJlY29yZCk7CgogICAgICB0aGlzLnVwZGF0ZUlkKHJlY29yZCwgZGF0YSk7CiAgICB9CgogICAgcmVjb3JkLmFkYXB0ZXJEaWRDb21taXQoZGF0YSk7CiAgfSwKCiAgLyoqCiAgICBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgb25jZSB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSBhbgogICAgYWRhcHRlcidzIGBjcmVhdGVSZWNvcmRgLCBgdXBkYXRlUmVjb3JkYCBvciBgZGVsZXRlUmVjb3JkYAogICAgaXMgcmVqZWN0ZWQgd2l0aCBhIGBEUy5JbnZhbGlkRXJyb3JgLgoKICAgIEBtZXRob2QgcmVjb3JkV2FzSW52YWxpZAogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBhcmFtIHtPYmplY3R9IGVycm9ycwogICovCiAgcmVjb3JkV2FzSW52YWxpZDogZnVuY3Rpb24ocmVjb3JkLCBlcnJvcnMpIHsKICAgIHJlY29yZC5hZGFwdGVyRGlkSW52YWxpZGF0ZShlcnJvcnMpOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uY2UgdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgYW4KICAgIGFkYXB0ZXIncyBgY3JlYXRlUmVjb3JkYCwgYHVwZGF0ZVJlY29yZGAgb3IgYGRlbGV0ZVJlY29yZGAKICAgIGlzIHJlamVjdGVkICh3aXRoIGFueXRoaW5nIG90aGVyIHRoYW4gYSBgRFMuSW52YWxpZEVycm9yYCkuCgogICAgQG1ldGhvZCByZWNvcmRXYXNFcnJvcgogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgcmVjb3JkV2FzRXJyb3I6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgcmVjb3JkLmFkYXB0ZXJEaWRFcnJvcigpOwogIH0sCgogIC8qKgogICAgV2hlbiBhbiBhZGFwdGVyJ3MgYGNyZWF0ZVJlY29yZGAsIGB1cGRhdGVSZWNvcmRgIG9yIGBkZWxldGVSZWNvcmRgCiAgICByZXNvbHZlcyB3aXRoIGRhdGEsIHRoaXMgbWV0aG9kIGV4dHJhY3RzIHRoZSBJRCBmcm9tIHRoZSBzdXBwbGllZAogICAgZGF0YS4KCiAgICBAbWV0aG9kIHVwZGF0ZUlkCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcGFyYW0ge09iamVjdH0gZGF0YQogICovCiAgdXBkYXRlSWQ6IGZ1bmN0aW9uKHJlY29yZCwgZGF0YSkgewogICAgdmFyIG9sZElkID0gZ2V0KHJlY29yZCwgJ2lkJyksCiAgICAgICAgaWQgPSBjb2VyY2VJZChkYXRhLmlkKTsKCiAgICBFbWJlci5hc3NlcnQoIkFuIGFkYXB0ZXIgY2Fubm90IGFzc2lnbiBhIG5ldyBpZCB0byBhIHJlY29yZCB0aGF0IGFscmVhZHkgaGFzIGFuIGlkLiAiICsgcmVjb3JkICsgIiBoYWQgaWQ6ICIgKyBvbGRJZCArICIgYW5kIHlvdSB0cmllZCB0byB1cGRhdGUgaXQgd2l0aCAiICsgaWQgKyAiLiBUaGlzIGxpa2VseSBoYXBwZW5lZCBiZWNhdXNlIHlvdXIgc2VydmVyIHJldHVybmVkIGRhdGEgaW4gcmVzcG9uc2UgdG8gYSBmaW5kIG9yIHVwZGF0ZSB0aGF0IGhhZCBhIGRpZmZlcmVudCBpZCB0aGFuIHRoZSBvbmUgeW91IHNlbnQuIiwgb2xkSWQgPT09IG51bGwgfHwgaWQgPT09IG9sZElkKTsKCiAgICB0aGlzLnR5cGVNYXBGb3IocmVjb3JkLmNvbnN0cnVjdG9yKS5pZFRvUmVjb3JkW2lkXSA9IHJlY29yZDsKCiAgICBzZXQocmVjb3JkLCAnaWQnLCBpZCk7CiAgfSwKCiAgLyoqCiAgICBSZXR1cm5zIGEgbWFwIG9mIElEcyB0byBjbGllbnQgSURzIGZvciBhIGdpdmVuIHR5cGUuCgogICAgQG1ldGhvZCB0eXBlTWFwRm9yCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHR5cGUKICAgIEByZXR1cm4ge09iamVjdH0gdHlwZU1hcAogICovCiAgdHlwZU1hcEZvcjogZnVuY3Rpb24odHlwZSkgewogICAgdmFyIHR5cGVNYXBzID0gZ2V0KHRoaXMsICd0eXBlTWFwcycpLAogICAgICAgIGd1aWQgPSBFbWJlci5ndWlkRm9yKHR5cGUpLAogICAgICAgIHR5cGVNYXA7CgogICAgdHlwZU1hcCA9IHR5cGVNYXBzW2d1aWRdOwoKICAgIGlmICh0eXBlTWFwKSB7IHJldHVybiB0eXBlTWFwOyB9CgogICAgdHlwZU1hcCA9IHsKICAgICAgaWRUb1JlY29yZDoge30sCiAgICAgIHJlY29yZHM6IFtdLAogICAgICBtZXRhZGF0YToge30KICAgIH07CgogICAgdHlwZU1hcHNbZ3VpZF0gPSB0eXBlTWFwOwoKICAgIHJldHVybiB0eXBlTWFwOwogIH0sCgogIC8vIC4uLi4uLi4uLi4uLi4uLi4KICAvLyAuIExPQURJTkcgREFUQSAuCiAgLy8gLi4uLi4uLi4uLi4uLi4uLgoKICAvKioKICAgIFRoaXMgaW50ZXJuYWwgbWV0aG9kIGlzIHVzZWQgYnkgYHB1c2hgLgoKICAgIEBtZXRob2QgX2xvYWQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IGRhdGEKICAgIEBwYXJhbSB7Qm9vbGVhbn0gcGFydGlhbCB0aGUgZGF0YSBzaG91bGQgYmUgbWVyZ2VkIGludG8KICAgICAgdGhlIGV4aXN0aW5nIGRhdGEsIG5vdCByZXBsYWNlIGl0LgogICovCiAgX2xvYWQ6IGZ1bmN0aW9uKHR5cGUsIGRhdGEsIHBhcnRpYWwpIHsKICAgIHZhciBpZCA9IGNvZXJjZUlkKGRhdGEuaWQpLAogICAgICAgIHJlY29yZCA9IHRoaXMucmVjb3JkRm9ySWQodHlwZSwgaWQpOwoKICAgIHJlY29yZC5zZXR1cERhdGEoZGF0YSwgcGFydGlhbCk7CiAgICB0aGlzLnJlY29yZEFycmF5TWFuYWdlci5yZWNvcmREaWRDaGFuZ2UocmVjb3JkKTsKCiAgICByZXR1cm4gcmVjb3JkOwogIH0sCgogIC8qKgogICAgUmV0dXJucyBhIG1vZGVsIGNsYXNzIGZvciBhIHBhcnRpY3VsYXIga2V5LiBVc2VkIGJ5CiAgICBtZXRob2RzIHRoYXQgdGFrZSBhIHR5cGUga2V5IChsaWtlIGBmaW5kYCwgYGNyZWF0ZVJlY29yZGAsCiAgICBldGMuKQoKICAgIEBtZXRob2QgbW9kZWxGb3IKICAgIEBwYXJhbSB7U3RyaW5nIG9yIHN1YmNsYXNzIG9mIERTLk1vZGVsfSBrZXkKICAgIEByZXR1cm5zIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0KICAqLwogIG1vZGVsRm9yOiBmdW5jdGlvbihrZXkpIHsKICAgIHZhciBmYWN0b3J5OwoKCiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHsKICAgICAgdmFyIG5vcm1hbGl6ZWRLZXkgPSB0aGlzLmNvbnRhaW5lci5ub3JtYWxpemUoJ21vZGVsOicgKyBrZXkpOwoKICAgICAgZmFjdG9yeSA9IHRoaXMuY29udGFpbmVyLmxvb2t1cEZhY3Rvcnkobm9ybWFsaXplZEtleSk7CiAgICAgIGlmICghZmFjdG9yeSkgeyB0aHJvdyBuZXcgRW1iZXIuRXJyb3IoIk5vIG1vZGVsIHdhcyBmb3VuZCBmb3IgJyIgKyBrZXkgKyAiJyIpOyB9CiAgICAgIGZhY3RvcnkudHlwZUtleSA9IG5vcm1hbGl6ZWRLZXkuc3BsaXQoJzonLCAyKVsxXTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIEEgZmFjdG9yeSBhbHJlYWR5IHN1cHBsaWVkLgogICAgICBmYWN0b3J5ID0ga2V5OwogICAgfQoKICAgIGZhY3Rvcnkuc3RvcmUgPSB0aGlzOwogICAgcmV0dXJuIGZhY3Rvcnk7CiAgfSwKCiAgLyoqCiAgICBQdXNoIHNvbWUgZGF0YSBmb3IgYSBnaXZlbiB0eXBlIGludG8gdGhlIHN0b3JlLgoKICAgIFRoaXMgbWV0aG9kIGV4cGVjdHMgbm9ybWFsaXplZCBkYXRhOgoKICAgICogVGhlIElEIGlzIGEga2V5IG5hbWVkIGBpZGAgKGFuIElEIGlzIG1hbmRhdG9yeSkKICAgICogVGhlIG5hbWVzIG9mIGF0dHJpYnV0ZXMgYXJlIHRoZSBvbmVzIHlvdSB1c2VkIGluCiAgICAgIHlvdXIgbW9kZWwncyBgRFMuYXR0cmBzLgogICAgKiBZb3VyIHJlbGF0aW9uc2hpcHMgbXVzdCBiZToKICAgICAgKiByZXByZXNlbnRlZCBhcyBJRHMgb3IgQXJyYXlzIG9mIElEcwogICAgICAqIHJlcHJlc2VudGVkIGFzIG1vZGVsIGluc3RhbmNlcwogICAgICAqIHJlcHJlc2VudGVkIGFzIFVSTHMsIHVuZGVyIHRoZSBgbGlua3NgIGtleQoKICAgIEZvciB0aGlzIG1vZGVsOgoKICAgIGBgYGpzCiAgICBBcHAuUGVyc29uID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgICAgZmlyc3ROYW1lOiBEUy5hdHRyKCksCiAgICAgIGxhc3ROYW1lOiBEUy5hdHRyKCksCgogICAgICBjaGlsZHJlbjogRFMuaGFzTWFueSgncGVyc29uJykKICAgIH0pOwogICAgYGBgCgogICAgVG8gcmVwcmVzZW50IHRoZSBjaGlsZHJlbiBhcyBJRHM6CgogICAgYGBganMKICAgIHsKICAgICAgaWQ6IDEsCiAgICAgIGZpcnN0TmFtZTogIlRvbSIsCiAgICAgIGxhc3ROYW1lOiAiRGFsZSIsCiAgICAgIGNoaWxkcmVuOiBbMSwgMiwgM10KICAgIH0KICAgIGBgYAoKICAgIFRvIHJlcHJlc2VudCB0aGUgY2hpbGRyZW4gcmVsYXRpb25zaGlwIGFzIGEgVVJMOgoKICAgIGBgYGpzCiAgICB7CiAgICAgIGlkOiAxLAogICAgICBmaXJzdE5hbWU6ICJUb20iLAogICAgICBsYXN0TmFtZTogIkRhbGUiLAogICAgICBsaW5rczogewogICAgICAgIGNoaWxkcmVuOiAiL3Blb3BsZS8xL2NoaWxkcmVuIgogICAgICB9CiAgICB9CiAgICBgYGAKCiAgICBJZiB5b3UncmUgc3RyZWFtaW5nIGRhdGEgb3IgaW1wbGVtZW50aW5nIGFuIGFkYXB0ZXIsCiAgICBtYWtlIHN1cmUgdGhhdCB5b3UgaGF2ZSBjb252ZXJ0ZWQgdGhlIGluY29taW5nIGRhdGEKICAgIGludG8gdGhpcyBmb3JtLgoKICAgIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIGJvdGggdG8gcHVzaCBpbiBicmFuZCBuZXcKICAgIHJlY29yZHMsIGFzIHdlbGwgYXMgdG8gdXBkYXRlIGV4aXN0aW5nIHJlY29yZHMuCgogICAgQG1ldGhvZCBwdXNoCiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IGRhdGEKICAgIEByZXR1cm5zIHtEUy5Nb2RlbH0gdGhlIHJlY29yZCB0aGF0IHdhcyBjcmVhdGVkIG9yCiAgICAgIHVwZGF0ZWQuCiAgKi8KICBwdXNoOiBmdW5jdGlvbih0eXBlLCBkYXRhLCBfcGFydGlhbCkgewogICAgLy8gX3BhcnRpYWwgaXMgYW4gaW50ZXJuYWwgcGFyYW0gdXNlZCBieSBgdXBkYXRlYC4KICAgIC8vIElmIHBhc3NlZCwgaXQgbWVhbnMgdGhhdCB0aGUgZGF0YSBzaG91bGQgYmUKICAgIC8vIG1lcmdlZCBpbnRvIHRoZSBleGlzdGluZyBkYXRhLCBub3QgcmVwbGFjZSBpdC4KCiAgICBFbWJlci5hc3NlcnQoIllvdSBtdXN0IGluY2x1ZGUgYW4gYGlkYCBpbiBhIGhhc2ggcGFzc2VkIHRvIGBwdXNoYCIsIGRhdGEuaWQgIT0gbnVsbCk7CgogICAgdHlwZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgLy8gbm9ybWFsaXplIHJlbGF0aW9uc2hpcCBJRHMgaW50byByZWNvcmRzCiAgICBkYXRhID0gbm9ybWFsaXplUmVsYXRpb25zaGlwcyh0aGlzLCB0eXBlLCBkYXRhKTsKCiAgICB0aGlzLl9sb2FkKHR5cGUsIGRhdGEsIF9wYXJ0aWFsKTsKCiAgICByZXR1cm4gdGhpcy5yZWNvcmRGb3JJZCh0eXBlLCBkYXRhLmlkKTsKICB9LAoKICAvKioKICAgIFB1c2ggc29tZSByYXcgZGF0YSBpbnRvIHRoZSBzdG9yZS4KCiAgICBUaGUgZGF0YSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGVzZXJpYWxpemVkIHVzaW5nIHRoZQogICAgc2VyaWFsaXplciBmb3IgdGhlIGB0eXBlYCBwYXJhbS4KCiAgICBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCBib3RoIHRvIHB1c2ggaW4gYnJhbmQgbmV3CiAgICByZWNvcmRzLCBhcyB3ZWxsIGFzIHRvIHVwZGF0ZSBleGlzdGluZyByZWNvcmRzLgoKICAgIFlvdSBjYW4gcHVzaCBpbiBtb3JlIHRoYW4gb25lIHR5cGUgb2Ygb2JqZWN0IGF0IG9uY2UuCiAgICBBbGwgb2JqZWN0cyBzaG91bGQgYmUgaW4gdGhlIGZvcm1hdCBleHBlY3RlZCBieSB0aGUKICAgIHNlcmlhbGl6ZXIuCgogICAgYGBganMKICAgIEFwcC5BcHBsaWNhdGlvblNlcmlhbGl6ZXIgPSBEUy5BY3RpdmVNb2RlbFNlcmlhbGl6ZXI7CgogICAgdmFyIHB1c2hEYXRhID0gewogICAgICBwb3N0czogWwogICAgICAgIHtpZDogMSwgcG9zdF90aXRsZTogIkdyZWF0IHBvc3QiLCBjb21tZW50X2lkczogWzJdfQogICAgICBdLAogICAgICBjb21tZW50czogWwogICAgICAgIHtpZDogMiwgY29tbWVudF9ib2R5OiAiSW5zaWdodGZ1bCBjb21tZW50In0KICAgICAgXQogICAgfQoKICAgIHN0b3JlLnB1c2hQYXlsb2FkKCdwb3N0JywgcHVzaERhdGEpOwogICAgYGBgCgogICAgQG1ldGhvZCBwdXNoUGF5bG9hZAogICAgQHBhcmFtIHtTdHJpbmd9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkCiAgICBAcmV0dXJuIHtEUy5Nb2RlbH0gdGhlIHJlY29yZCB0aGF0IHdhcyBjcmVhdGVkIG9yIHVwZGF0ZWQuCiAgKi8KICBwdXNoUGF5bG9hZDogZnVuY3Rpb24gKHR5cGUsIHBheWxvYWQpIHsKICAgIHZhciBzZXJpYWxpemVyOwogICAgaWYgKCFwYXlsb2FkKSB7CiAgICAgIHBheWxvYWQgPSB0eXBlOwogICAgICBzZXJpYWxpemVyID0gZGVmYXVsdFNlcmlhbGl6ZXIodGhpcy5jb250YWluZXIpOwogICAgICBFbWJlci5hc3NlcnQoIllvdSBjYW5ub3QgdXNlIGBzdG9yZSNwdXNoUGF5bG9hZGAgd2l0aG91dCBhIHR5cGUgdW5sZXNzIHlvdXIgZGVmYXVsdCBzZXJpYWxpemVyIGRlZmluZXMgYHB1c2hQYXlsb2FkYCIsIHNlcmlhbGl6ZXIucHVzaFBheWxvYWQpOwogICAgfSBlbHNlIHsKICAgICAgc2VyaWFsaXplciA9IHRoaXMuc2VyaWFsaXplckZvcih0eXBlKTsKICAgIH0KICAgIHNlcmlhbGl6ZXIucHVzaFBheWxvYWQodGhpcywgcGF5bG9hZCk7CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbih0eXBlLCBkYXRhKSB7CiAgICBFbWJlci5hc3NlcnQoIllvdSBtdXN0IGluY2x1ZGUgYW4gYGlkYCBpbiBhIGhhc2ggcGFzc2VkIHRvIGB1cGRhdGVgIiwgZGF0YS5pZCAhPSBudWxsKTsKCiAgICByZXR1cm4gdGhpcy5wdXNoKHR5cGUsIGRhdGEsIHRydWUpOwogIH0sCgogIC8qKgogICAgSWYgeW91IGhhdmUgYW4gQXJyYXkgb2Ygbm9ybWFsaXplZCBkYXRhIHRvIHB1c2gsCiAgICB5b3UgY2FuIGNhbGwgYHB1c2hNYW55YCB3aXRoIHRoZSBBcnJheSwgYW5kIGl0IHdpbGwKICAgIGNhbGwgYHB1c2hgIHJlcGVhdGVkbHkgZm9yIHlvdS4KCiAgICBAbWV0aG9kIHB1c2hNYW55CiAgICBAcGFyYW0ge1N0cmluZyBvciBzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtBcnJheX0gZGF0YXMKICAgIEByZXR1cm4ge0FycmF5fQogICovCiAgcHVzaE1hbnk6IGZ1bmN0aW9uKHR5cGUsIGRhdGFzKSB7CiAgICByZXR1cm4gbWFwKGRhdGFzLCBmdW5jdGlvbihkYXRhKSB7CiAgICAgIHJldHVybiB0aGlzLnB1c2godHlwZSwgZGF0YSk7CiAgICB9LCB0aGlzKTsKICB9LAoKICAvKioKICAgIElmIHlvdSBoYXZlIHNvbWUgbWV0YWRhdGEgdG8gc2V0IGZvciBhIHR5cGUKICAgIHlvdSBjYW4gY2FsbCBgbWV0YUZvclR5cGVgLgoKICAgIEBtZXRob2QgbWV0YUZvclR5cGUKICAgIEBwYXJhbSB7U3RyaW5nIG9yIHN1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gbWV0YWRhdGEKICAqLwogIG1ldGFGb3JUeXBlOiBmdW5jdGlvbih0eXBlLCBtZXRhZGF0YSkgewogICAgdHlwZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgRW1iZXIubWVyZ2UodGhpcy50eXBlTWFwRm9yKHR5cGUpLm1ldGFkYXRhLCBtZXRhZGF0YSk7CiAgfSwKCiAgLyoqCiAgICBCdWlsZCBhIGJyYW5kIG5ldyByZWNvcmQgZm9yIGEgZ2l2ZW4gdHlwZSwgSUQsIGFuZAogICAgaW5pdGlhbCBkYXRhLgoKICAgIEBtZXRob2QgYnVpbGRSZWNvcmQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge1N0cmluZ30gaWQKICAgIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAgICBAcmV0dXJucyB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgYnVpbGRSZWNvcmQ6IGZ1bmN0aW9uKHR5cGUsIGlkLCBkYXRhKSB7CiAgICB2YXIgdHlwZU1hcCA9IHRoaXMudHlwZU1hcEZvcih0eXBlKSwKICAgICAgICBpZFRvUmVjb3JkID0gdHlwZU1hcC5pZFRvUmVjb3JkOwoKICAgIEVtYmVyLmFzc2VydCgnVGhlIGlkICcgKyBpZCArICcgaGFzIGFscmVhZHkgYmVlbiB1c2VkIHdpdGggYW5vdGhlciByZWNvcmQgb2YgdHlwZSAnICsgdHlwZS50b1N0cmluZygpICsgJy4nLCAhaWQgfHwgIWlkVG9SZWNvcmRbaWRdKTsKCiAgICAvLyBsb29rdXBGYWN0b3J5IHNob3VsZCByZWFsbHkgcmV0dXJuIGFuIG9iamVjdCB0aGF0IGNyZWF0ZXMKICAgIC8vIGluc3RhbmNlcyB3aXRoIHRoZSBpbmplY3Rpb25zIGFwcGxpZWQKICAgIHZhciByZWNvcmQgPSB0eXBlLl9jcmVhdGUoewogICAgICBpZDogaWQsCiAgICAgIHN0b3JlOiB0aGlzLAogICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyCiAgICB9KTsKCiAgICBpZiAoZGF0YSkgewogICAgICByZWNvcmQuc2V0dXBEYXRhKGRhdGEpOwogICAgfQoKICAgIC8vIGlmIHdlJ3JlIGNyZWF0aW5nIGFuIGl0ZW0sIHRoaXMgcHJvY2VzcyB3aWxsIGJlIGRvbmUKICAgIC8vIGxhdGVyLCBvbmNlIHRoZSBvYmplY3QgaGFzIGJlZW4gcGVyc2lzdGVkLgogICAgaWYgKGlkKSB7CiAgICAgIGlkVG9SZWNvcmRbaWRdID0gcmVjb3JkOwogICAgfQoKICAgIHR5cGVNYXAucmVjb3Jkcy5wdXNoKHJlY29yZCk7CgogICAgcmV0dXJuIHJlY29yZDsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLi4KICAvLyAuIERFU1RSVUNUSU9OIC4KICAvLyAuLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBXaGVuIGEgcmVjb3JkIGlzIGRlc3Ryb3llZCwgdGhpcyB1bi1pbmRleGVzIGl0IGFuZAogICAgcmVtb3ZlcyBpdCBmcm9tIGFueSByZWNvcmQgYXJyYXlzIHNvIGl0IGNhbiBiZSBHQ2VkLgoKICAgIEBtZXRob2QgZGVtYXRlcmlhbGl6ZVJlY29yZAogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgZGVtYXRlcmlhbGl6ZVJlY29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICB2YXIgdHlwZSA9IHJlY29yZC5jb25zdHJ1Y3RvciwKICAgICAgICB0eXBlTWFwID0gdGhpcy50eXBlTWFwRm9yKHR5cGUpLAogICAgICAgIGlkID0gZ2V0KHJlY29yZCwgJ2lkJyk7CgogICAgcmVjb3JkLnVwZGF0ZVJlY29yZEFycmF5cygpOwoKICAgIGlmIChpZCkgewogICAgICBkZWxldGUgdHlwZU1hcC5pZFRvUmVjb3JkW2lkXTsKICAgIH0KCiAgICB2YXIgbG9jID0gaW5kZXhPZih0eXBlTWFwLnJlY29yZHMsIHJlY29yZCk7CiAgICB0eXBlTWFwLnJlY29yZHMuc3BsaWNlKGxvYywgMSk7CiAgfSwKCiAgLy8gLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCiAgLy8gLiBSRUxBVElPTlNISVAgQ0hBTkdFUyAuCiAgLy8gLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCgogIGFkZFJlbGF0aW9uc2hpcENoYW5nZUZvcjogZnVuY3Rpb24oY2hpbGRSZWNvcmQsIGNoaWxkS2V5LCBwYXJlbnRSZWNvcmQsIHBhcmVudEtleSwgY2hhbmdlKSB7CiAgICB2YXIgY2xpZW50SWQgPSBjaGlsZFJlY29yZC5jbGllbnRJZCwKICAgICAgICBwYXJlbnRDbGllbnRJZCA9IHBhcmVudFJlY29yZCA/IHBhcmVudFJlY29yZCA6IHBhcmVudFJlY29yZDsKICAgIHZhciBrZXkgPSBjaGlsZEtleSArIHBhcmVudEtleTsKICAgIHZhciBjaGFuZ2VzID0gdGhpcy5fcmVsYXRpb25zaGlwQ2hhbmdlczsKICAgIGlmICghKGNsaWVudElkIGluIGNoYW5nZXMpKSB7CiAgICAgIGNoYW5nZXNbY2xpZW50SWRdID0ge307CiAgICB9CiAgICBpZiAoIShwYXJlbnRDbGllbnRJZCBpbiBjaGFuZ2VzW2NsaWVudElkXSkpIHsKICAgICAgY2hhbmdlc1tjbGllbnRJZF1bcGFyZW50Q2xpZW50SWRdID0ge307CiAgICB9CiAgICBpZiAoIShrZXkgaW4gY2hhbmdlc1tjbGllbnRJZF1bcGFyZW50Q2xpZW50SWRdKSkgewogICAgICBjaGFuZ2VzW2NsaWVudElkXVtwYXJlbnRDbGllbnRJZF1ba2V5XSA9IHt9OwogICAgfQogICAgY2hhbmdlc1tjbGllbnRJZF1bcGFyZW50Q2xpZW50SWRdW2tleV1bY2hhbmdlLmNoYW5nZVR5cGVdID0gY2hhbmdlOwogIH0sCgogIHJlbW92ZVJlbGF0aW9uc2hpcENoYW5nZUZvcjogZnVuY3Rpb24oY2xpZW50UmVjb3JkLCBjaGlsZEtleSwgcGFyZW50UmVjb3JkLCBwYXJlbnRLZXksIHR5cGUpIHsKICAgIHZhciBjbGllbnRJZCA9IGNsaWVudFJlY29yZC5jbGllbnRJZCwKICAgICAgICBwYXJlbnRDbGllbnRJZCA9IHBhcmVudFJlY29yZCA/IHBhcmVudFJlY29yZC5jbGllbnRJZCA6IHBhcmVudFJlY29yZDsKICAgIHZhciBjaGFuZ2VzID0gdGhpcy5fcmVsYXRpb25zaGlwQ2hhbmdlczsKICAgIHZhciBrZXkgPSBjaGlsZEtleSArIHBhcmVudEtleTsKICAgIGlmICghKGNsaWVudElkIGluIGNoYW5nZXMpIHx8ICEocGFyZW50Q2xpZW50SWQgaW4gY2hhbmdlc1tjbGllbnRJZF0pIHx8ICEoa2V5IGluIGNoYW5nZXNbY2xpZW50SWRdW3BhcmVudENsaWVudElkXSkpewogICAgICByZXR1cm47CiAgICB9CiAgICBkZWxldGUgY2hhbmdlc1tjbGllbnRJZF1bcGFyZW50Q2xpZW50SWRdW2tleV1bdHlwZV07CiAgfSwKCiAgcmVsYXRpb25zaGlwQ2hhbmdlUGFpcnNGb3I6IGZ1bmN0aW9uKHJlY29yZCl7CiAgICB2YXIgdG9SZXR1cm4gPSBbXTsKCiAgICBpZiggIXJlY29yZCApIHsgcmV0dXJuIHRvUmV0dXJuOyB9CgogICAgLy9UT0RPKElnb3IpIFdoYXQgYWJvdXQgdGhlIG90aGVyIHNpZGUKICAgIHZhciBjaGFuZ2VzT2JqZWN0ID0gdGhpcy5fcmVsYXRpb25zaGlwQ2hhbmdlc1tyZWNvcmQuY2xpZW50SWRdOwogICAgZm9yICh2YXIgb2JqS2V5IGluIGNoYW5nZXNPYmplY3QpewogICAgICBpZihjaGFuZ2VzT2JqZWN0Lmhhc093blByb3BlcnR5KG9iaktleSkpewogICAgICAgIGZvciAodmFyIGNoYW5nZUtleSBpbiBjaGFuZ2VzT2JqZWN0W29iaktleV0pewogICAgICAgICAgaWYoY2hhbmdlc09iamVjdFtvYmpLZXldLmhhc093blByb3BlcnR5KGNoYW5nZUtleSkpewogICAgICAgICAgICB0b1JldHVybi5wdXNoKGNoYW5nZXNPYmplY3Rbb2JqS2V5XVtjaGFuZ2VLZXldKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0b1JldHVybjsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uCiAgLy8gLiBQRVItVFlQRSBBREFQVEVSUwogIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBSZXR1cm5zIHRoZSBhZGFwdGVyIGZvciBhIGdpdmVuIHR5cGUuCgogICAgQG1ldGhvZCBhZGFwdGVyRm9yCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHJldHVybnMgRFMuQWRhcHRlcgogICovCiAgYWRhcHRlckZvcjogZnVuY3Rpb24odHlwZSkgewogICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBhZGFwdGVyOwoKICAgIGlmIChjb250YWluZXIpIHsKICAgICAgYWRhcHRlciA9IGNvbnRhaW5lci5sb29rdXAoJ2FkYXB0ZXI6JyArIHR5cGUudHlwZUtleSkgfHwgY29udGFpbmVyLmxvb2t1cCgnYWRhcHRlcjphcHBsaWNhdGlvbicpOwogICAgfQoKICAgIHJldHVybiBhZGFwdGVyIHx8IGdldCh0aGlzLCAnZGVmYXVsdEFkYXB0ZXInKTsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KICAvLyAuIFJFQ09SRCBDSEFOR0UgTk9USUZJQ0FUSU9OIC4KICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJpYWxpemVyIGZvciBhIGdpdmVuIHR5cGUuIEZvcgogICAgZXhhbXBsZSwgYHNlcmlhbGl6ZXJGb3IoJ3BlcnNvbicpYCB3aWxsIHJldHVybiBhbiBpbnN0YW5jZSBvZgogICAgYEFwcC5QZXJzb25TZXJpYWxpemVyYC4KCiAgICBJZiBubyBgQXBwLlBlcnNvblNlcmlhbGl6ZXJgIGlzIGZvdW5kLCB0aGlzIG1ldGhvZCB3aWxsIGxvb2sKICAgIGZvciBhbiBgQXBwLkFwcGxpY2F0aW9uU2VyaWFsaXplcmAgKHRoZSBkZWZhdWx0IHNlcmlhbGl6ZXIgZm9yCiAgICB5b3VyIGVudGlyZSBhcHBsaWNhdGlvbikuCgogICAgSWYgbm8gYEFwcC5BcHBsaWNhdGlvblNlcmlhbGl6ZXJgIGlzIGZvdW5kLCBpdCB3aWxsIGZhbGwgYmFjawogICAgdG8gYW4gaW5zdGFuY2Ugb2YgYERTLkpTT05TZXJpYWxpemVyYC4KCiAgICBAbWV0aG9kIHNlcmlhbGl6ZXJGb3IKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgcmVjb3JkIHRvIHNlcmlhbGl6ZQogICAgQHJldHVybiB7RFMuU2VyaWFsaXplcn0KICAqLwogIHNlcmlhbGl6ZXJGb3I6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwogICAgdmFyIGFkYXB0ZXIgPSB0aGlzLmFkYXB0ZXJGb3IodHlwZSk7CgogICAgcmV0dXJuIHNlcmlhbGl6ZXJGb3IodGhpcy5jb250YWluZXIsIHR5cGUudHlwZUtleSwgYWRhcHRlciAmJiBhZGFwdGVyLmRlZmF1bHRTZXJpYWxpemVyKTsKICB9Cn0pOwoKZnVuY3Rpb24gbm9ybWFsaXplUmVsYXRpb25zaGlwcyhzdG9yZSwgdHlwZSwgZGF0YSwgcmVjb3JkKSB7CiAgdHlwZS5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9uKGtleSwgcmVsYXRpb25zaGlwKSB7CiAgICAvLyBBIGxpbmsgKHVzdWFsbHkgYSBVUkwpIHdhcyBhbHJlYWR5IHByb3ZpZGVkIGluCiAgICAvLyBub3JtYWxpemVkIGZvcm0KICAgIGlmIChkYXRhLmxpbmtzICYmIGRhdGEubGlua3Nba2V5XSkgewogICAgICBpZiAocmVjb3JkICYmIHJlbGF0aW9uc2hpcC5vcHRpb25zLmFzeW5jKSB7IHJlY29yZC5fcmVsYXRpb25zaGlwc1trZXldID0gbnVsbDsgfQogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIGtpbmQgPSByZWxhdGlvbnNoaXAua2luZCwKICAgICAgICB2YWx1ZSA9IGRhdGFba2V5XTsKCiAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH0KCiAgICBpZiAoa2luZCA9PT0gJ2JlbG9uZ3NUbycpIHsKICAgICAgZGVzZXJpYWxpemVSZWNvcmRJZChzdG9yZSwgZGF0YSwga2V5LCByZWxhdGlvbnNoaXAsIHZhbHVlKTsKICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ2hhc01hbnknKSB7CiAgICAgIGRlc2VyaWFsaXplUmVjb3JkSWRzKHN0b3JlLCBkYXRhLCBrZXksIHJlbGF0aW9uc2hpcCwgdmFsdWUpOwogICAgICBhZGRVbnNhdmVkUmVjb3JkcyhyZWNvcmQsIGtleSwgdmFsdWUpOwogICAgfQogIH0pOwoKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gZGVzZXJpYWxpemVSZWNvcmRJZChzdG9yZSwgZGF0YSwga2V5LCByZWxhdGlvbnNoaXAsIGlkKSB7CiAgaWYgKGlzTm9uZShpZCkgfHwgaWQgaW5zdGFuY2VvZiBEUy5Nb2RlbCkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIHR5cGU7CgogIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHsKICAgIHR5cGUgPSB0eXBlRm9yKHJlbGF0aW9uc2hpcCwga2V5LCBkYXRhKTsKICAgIGRhdGFba2V5XSA9IHN0b3JlLnJlY29yZEZvcklkKHR5cGUsIGlkKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBpZCA9PT0gJ29iamVjdCcpIHsKICAgIC8vIHBvbHltb3JwaGljCiAgICBkYXRhW2tleV0gPSBzdG9yZS5yZWNvcmRGb3JJZChpZC50eXBlLCBpZC5pZCk7CiAgfQp9CgpmdW5jdGlvbiB0eXBlRm9yKHJlbGF0aW9uc2hpcCwga2V5LCBkYXRhKSB7CiAgaWYgKHJlbGF0aW9uc2hpcC5vcHRpb25zLnBvbHltb3JwaGljKSB7CiAgICByZXR1cm4gZGF0YVtrZXkgKyAiVHlwZSJdOwogIH0gZWxzZSB7CiAgICByZXR1cm4gcmVsYXRpb25zaGlwLnR5cGU7CiAgfQp9CgpmdW5jdGlvbiBkZXNlcmlhbGl6ZVJlY29yZElkcyhzdG9yZSwgZGF0YSwga2V5LCByZWxhdGlvbnNoaXAsIGlkcykgewogIGZvciAodmFyIGk9MCwgbD1pZHMubGVuZ3RoOyBpPGw7IGkrKykgewogICAgZGVzZXJpYWxpemVSZWNvcmRJZChzdG9yZSwgaWRzLCBpLCByZWxhdGlvbnNoaXAsIGlkc1tpXSk7CiAgfQp9CgovLyBJZiB0aGVyZSBhcmUgYW55IHVuc2F2ZWQgcmVjb3JkcyB0aGF0IGFyZSBpbiBhIGhhc01hbnkgdGhleSB3b24ndCBiZQovLyBpbiB0aGUgcGF5bG9hZCwgc28gYWRkIHRoZW0gYmFjayBpbiBtYW51YWxseS4KZnVuY3Rpb24gYWRkVW5zYXZlZFJlY29yZHMocmVjb3JkLCBrZXksIGRhdGEpIHsKICBpZihyZWNvcmQpIHsKICAgIGRhdGEucHVzaE9iamVjdHMocmVjb3JkLmdldChrZXkpLmZpbHRlckJ5KCdpc05ldycpKTsKICB9Cn0KCi8vIERlbGVnYXRpb24gdG8gdGhlIGFkYXB0ZXIgYW5kIHByb21pc2UgbWFuYWdlbWVudAovKioKICBBIGBQcm9taXNlQXJyYXlgIGlzIGFuIG9iamVjdCB0aGF0IGFjdHMgbGlrZSBib3RoIGFuIGBFbWJlci5BcnJheWAKICBhbmQgYSBwcm9taXNlLiBXaGVuIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHRoZSB0aGUgcmVzdWx0aW5nIHZhbHVlCiAgd2lsbCBiZSBzZXQgdG8gdGhlIGBQcm9taXNlQXJyYXlgJ3MgYGNvbnRlbnRgIHByb3BlcnR5LiBUaGlzIG1ha2VzCiAgaXQgZWFzeSB0byBjcmVhdGUgZGF0YSBiaW5kaW5ncyB3aXRoIHRoZSBgUHJvbWlzZUFycmF5YCB0aGF0IHdpbGwgYmUKICB1cGRhdGVkIHdoZW4gdGhlIHByb21pc2UgcmVzb2x2ZXMuCgogIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB0aGUgW0VtYmVyLlByb21pc2VQcm94eU1peGluCiAgZG9jdW1lbnRhdGlvbl0oL2FwaS9jbGFzc2VzL0VtYmVyLlByb21pc2VQcm94eU1peGluLmh0bWwpLgoKICBFeGFtcGxlCgogIGBgYGphdmFzY3JpcHQKICB2YXIgcHJvbWlzZUFycmF5ID0gRFMuUHJvbWlzZUFycmF5LmNyZWF0ZSh7CiAgICBwcm9taXNlOiAkLmdldEpTT04oJy9zb21lL3JlbW90ZS9kYXRhLmpzb24nKQogIH0pOwoKICBwcm9taXNlQXJyYXkuZ2V0KCdsZW5ndGgnKTsgLy8gMAoKICBwcm9taXNlQXJyYXkudGhlbihmdW5jdGlvbigpIHsKICAgIHByb21pc2VBcnJheS5nZXQoJ2xlbmd0aCcpOyAvLyAxMDAKICB9KTsKICBgYGAKCiAgQGNsYXNzIFByb21pc2VBcnJheQogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBFbWJlci5BcnJheVByb3h5CiAgQHVzZXMgRW1iZXIuUHJvbWlzZVByb3h5TWl4aW4KKi8KRFMuUHJvbWlzZUFycmF5ID0gRW1iZXIuQXJyYXlQcm94eS5leHRlbmQoRW1iZXIuUHJvbWlzZVByb3h5TWl4aW4pOwovKioKICBBIGBQcm9taXNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBhY3RzIGxpa2UgYm90aCBhbiBgRW1iZXIuT2JqZWN0YAogIGFuZCBhIHByb21pc2UuIFdoZW4gdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgdGhlIHRoZSByZXN1bHRpbmcgdmFsdWUKICB3aWxsIGJlIHNldCB0byB0aGUgYFByb21pc2VPYmplY3RgJ3MgYGNvbnRlbnRgIHByb3BlcnR5LiBUaGlzIG1ha2VzCiAgaXQgZWFzeSB0byBjcmVhdGUgZGF0YSBiaW5kaW5ncyB3aXRoIHRoZSBgUHJvbWlzZU9iamVjdGAgdGhhdCB3aWxsCiAgYmUgdXBkYXRlZCB3aGVuIHRoZSBwcm9taXNlIHJlc29sdmVzLgoKICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgdGhlIFtFbWJlci5Qcm9taXNlUHJveHlNaXhpbgogIGRvY3VtZW50YXRpb25dKC9hcGkvY2xhc3Nlcy9FbWJlci5Qcm9taXNlUHJveHlNaXhpbi5odG1sKS4KCiAgRXhhbXBsZQoKICBgYGBqYXZhc2NyaXB0CiAgdmFyIHByb21pc2VPYmplY3QgPSBEUy5Qcm9taXNlT2JqZWN0LmNyZWF0ZSh7CiAgICBwcm9taXNlOiAkLmdldEpTT04oJy9zb21lL3JlbW90ZS9kYXRhLmpzb24nKQogIH0pOwoKICBwcm9taXNlT2JqZWN0LmdldCgnbmFtZScpOyAvLyBudWxsCgogIHByb21pc2VPYmplY3QudGhlbihmdW5jdGlvbigpIHsKICAgIHByb21pc2VPYmplY3QuZ2V0KCduYW1lJyk7IC8vICdUb21zdGVyJwogIH0pOwogIGBgYAoKICBAY2xhc3MgUHJvbWlzZU9iamVjdAogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBFbWJlci5PYmplY3RQcm94eQogIEB1c2VzIEVtYmVyLlByb21pc2VQcm94eU1peGluCiovCkRTLlByb21pc2VPYmplY3QgPSBFbWJlci5PYmplY3RQcm94eS5leHRlbmQoRW1iZXIuUHJvbWlzZVByb3h5TWl4aW4pOwoKZnVuY3Rpb24gcHJvbWlzZU9iamVjdChwcm9taXNlKSB7CiAgcmV0dXJuIERTLlByb21pc2VPYmplY3QuY3JlYXRlKHsgcHJvbWlzZTogcHJvbWlzZSB9KTsKfQoKZnVuY3Rpb24gcHJvbWlzZUFycmF5KHByb21pc2UpIHsKICByZXR1cm4gRFMuUHJvbWlzZUFycmF5LmNyZWF0ZSh7IHByb21pc2U6IHByb21pc2UgfSk7Cn0KCmZ1bmN0aW9uIGlzVGhlbmFibGUob2JqZWN0KSB7CiAgcmV0dXJuIG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0LnRoZW4gPT09ICdmdW5jdGlvbic7Cn0KCmZ1bmN0aW9uIHNlcmlhbGl6ZXJGb3IoY29udGFpbmVyLCB0eXBlLCBkZWZhdWx0U2VyaWFsaXplcikgewogIHJldHVybiBjb250YWluZXIubG9va3VwKCdzZXJpYWxpemVyOicrdHlwZSkgfHwKICAgICAgICAgICAgICAgICBjb250YWluZXIubG9va3VwKCdzZXJpYWxpemVyOmFwcGxpY2F0aW9uJykgfHwKICAgICAgICAgICAgICAgICBjb250YWluZXIubG9va3VwKCdzZXJpYWxpemVyOicgKyBkZWZhdWx0U2VyaWFsaXplcikgfHwKICAgICAgICAgICAgICAgICBjb250YWluZXIubG9va3VwKCdzZXJpYWxpemVyOl9kZWZhdWx0Jyk7Cn0KCmZ1bmN0aW9uIGRlZmF1bHRTZXJpYWxpemVyKGNvbnRhaW5lcikgewogIHJldHVybiBjb250YWluZXIubG9va3VwKCdzZXJpYWxpemVyOmFwcGxpY2F0aW9uJykgfHwKICAgICAgICAgY29udGFpbmVyLmxvb2t1cCgnc2VyaWFsaXplcjpfZGVmYXVsdCcpOwp9CgpmdW5jdGlvbiBzZXJpYWxpemVyRm9yQWRhcHRlcihhZGFwdGVyLCB0eXBlKSB7CiAgdmFyIHNlcmlhbGl6ZXIgPSBhZGFwdGVyLnNlcmlhbGl6ZXIsCiAgICAgIGRlZmF1bHRTZXJpYWxpemVyID0gYWRhcHRlci5kZWZhdWx0U2VyaWFsaXplciwKICAgICAgY29udGFpbmVyID0gYWRhcHRlci5jb250YWluZXI7CgogIGlmIChjb250YWluZXIgJiYgc2VyaWFsaXplciA9PT0gdW5kZWZpbmVkKSB7CiAgICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvcihjb250YWluZXIsIHR5cGUudHlwZUtleSwgZGVmYXVsdFNlcmlhbGl6ZXIpOwogIH0KCiAgaWYgKHNlcmlhbGl6ZXIgPT09IG51bGwgfHwgc2VyaWFsaXplciA9PT0gdW5kZWZpbmVkKSB7CiAgICBzZXJpYWxpemVyID0gewogICAgICBleHRyYWN0OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9hZCkgeyByZXR1cm4gcGF5bG9hZDsgfQogICAgfTsKICB9CgogIHJldHVybiBzZXJpYWxpemVyOwp9CgpmdW5jdGlvbiBfZmluZChhZGFwdGVyLCBzdG9yZSwgdHlwZSwgaWQpIHsKICB2YXIgcHJvbWlzZSA9IGFkYXB0ZXIuZmluZChzdG9yZSwgdHlwZSwgaWQpLAogICAgICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvckFkYXB0ZXIoYWRhcHRlciwgdHlwZSk7CgogIHJldHVybiByZXNvbHZlKHByb21pc2UsICJEUzogSGFuZGxlIEFkYXB0ZXIjZmluZCBvZiAiICsgdHlwZSArICIgd2l0aCBpZDogIiArIGlkKS50aGVuKGZ1bmN0aW9uKHBheWxvYWQpIHsKICAgIEVtYmVyLmFzc2VydCgiWW91IG1hZGUgYSByZXF1ZXN0IGZvciBhICIgKyB0eXBlLnR5cGVLZXkgKyAiIHdpdGggaWQgIiArIGlkICsgIiwgYnV0IHRoZSBhZGFwdGVyJ3MgcmVzcG9uc2UgZGlkIG5vdCBoYXZlIGFueSBkYXRhIiwgcGF5bG9hZCk7CiAgICBwYXlsb2FkID0gc2VyaWFsaXplci5leHRyYWN0KHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBpZCwgJ2ZpbmQnKTsKCiAgICByZXR1cm4gc3RvcmUucHVzaCh0eXBlLCBwYXlsb2FkKTsKICB9LCBmdW5jdGlvbihlcnJvcikgewogICAgdmFyIHJlY29yZCA9IHN0b3JlLmdldEJ5SWQodHlwZSwgaWQpOwogICAgcmVjb3JkLm5vdEZvdW5kKCk7CiAgICB0aHJvdyBlcnJvcjsKICB9LCAiRFM6IEV4dHJhY3QgcGF5bG9hZCBvZiAnIiArIHR5cGUgKyAiJyIpOwp9CgpmdW5jdGlvbiBfZmluZE1hbnkoYWRhcHRlciwgc3RvcmUsIHR5cGUsIGlkcywgb3duZXIpIHsKICB2YXIgcHJvbWlzZSA9IGFkYXB0ZXIuZmluZE1hbnkoc3RvcmUsIHR5cGUsIGlkcywgb3duZXIpLAogICAgICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvckFkYXB0ZXIoYWRhcHRlciwgdHlwZSk7CgogIHJldHVybiByZXNvbHZlKHByb21pc2UsICJEUzogSGFuZGxlIEFkYXB0ZXIjZmluZE1hbnkgb2YgIiArIHR5cGUpLnRoZW4oZnVuY3Rpb24ocGF5bG9hZCkgewogICAgcGF5bG9hZCA9IHNlcmlhbGl6ZXIuZXh0cmFjdChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgbnVsbCwgJ2ZpbmRNYW55Jyk7CgogICAgRW1iZXIuYXNzZXJ0KCJUaGUgcmVzcG9uc2UgZnJvbSBhIGZpbmRNYW55IG11c3QgYmUgYW4gQXJyYXksIG5vdCAiICsgRW1iZXIuaW5zcGVjdChwYXlsb2FkKSwgRW1iZXIudHlwZU9mKHBheWxvYWQpID09PSAnYXJyYXknKTsKCiAgICBzdG9yZS5wdXNoTWFueSh0eXBlLCBwYXlsb2FkKTsKICB9LCBudWxsLCAiRFM6IEV4dHJhY3QgcGF5bG9hZCBvZiAiICsgdHlwZSk7Cn0KCmZ1bmN0aW9uIF9maW5kSGFzTWFueShhZGFwdGVyLCBzdG9yZSwgcmVjb3JkLCBsaW5rLCByZWxhdGlvbnNoaXApIHsKICB2YXIgcHJvbWlzZSA9IGFkYXB0ZXIuZmluZEhhc01hbnkoc3RvcmUsIHJlY29yZCwgbGluaywgcmVsYXRpb25zaGlwKSwKICAgICAgc2VyaWFsaXplciA9IHNlcmlhbGl6ZXJGb3JBZGFwdGVyKGFkYXB0ZXIsIHJlbGF0aW9uc2hpcC50eXBlKTsKCiAgcmV0dXJuIHJlc29sdmUocHJvbWlzZSwgIkRTOiBIYW5kbGUgQWRhcHRlciNmaW5kSGFzTWFueSBvZiAiICsgcmVjb3JkICsgIiA6ICIgKyByZWxhdGlvbnNoaXAudHlwZSkudGhlbihmdW5jdGlvbihwYXlsb2FkKSB7CiAgICBwYXlsb2FkID0gc2VyaWFsaXplci5leHRyYWN0KHN0b3JlLCByZWxhdGlvbnNoaXAudHlwZSwgcGF5bG9hZCwgbnVsbCwgJ2ZpbmRIYXNNYW55Jyk7CgogICAgRW1iZXIuYXNzZXJ0KCJUaGUgcmVzcG9uc2UgZnJvbSBhIGZpbmRIYXNNYW55IG11c3QgYmUgYW4gQXJyYXksIG5vdCAiICsgRW1iZXIuaW5zcGVjdChwYXlsb2FkKSwgRW1iZXIudHlwZU9mKHBheWxvYWQpID09PSAnYXJyYXknKTsKCiAgICB2YXIgcmVjb3JkcyA9IHN0b3JlLnB1c2hNYW55KHJlbGF0aW9uc2hpcC50eXBlLCBwYXlsb2FkKTsKICAgIHJlY29yZC51cGRhdGVIYXNNYW55KHJlbGF0aW9uc2hpcC5rZXksIHJlY29yZHMpOwogIH0sIG51bGwsICJEUzogRXh0cmFjdCBwYXlsb2FkIG9mICIgKyByZWNvcmQgKyAiIDogaGFzTWFueSAiICsgcmVsYXRpb25zaGlwLnR5cGUpOwp9CgpmdW5jdGlvbiBfZmluZEJlbG9uZ3NUbyhhZGFwdGVyLCBzdG9yZSwgcmVjb3JkLCBsaW5rLCByZWxhdGlvbnNoaXApIHsKICB2YXIgcHJvbWlzZSA9IGFkYXB0ZXIuZmluZEJlbG9uZ3NUbyhzdG9yZSwgcmVjb3JkLCBsaW5rLCByZWxhdGlvbnNoaXApLAogICAgICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvckFkYXB0ZXIoYWRhcHRlciwgcmVsYXRpb25zaGlwLnR5cGUpOwoKICByZXR1cm4gcmVzb2x2ZShwcm9taXNlLCAiRFM6IEhhbmRsZSBBZGFwdGVyI2ZpbmRCZWxvbmdzVG8gb2YgIiArIHJlY29yZCArICIgOiAiICsgcmVsYXRpb25zaGlwLnR5cGUpLnRoZW4oZnVuY3Rpb24ocGF5bG9hZCkgewogICAgcGF5bG9hZCA9IHNlcmlhbGl6ZXIuZXh0cmFjdChzdG9yZSwgcmVsYXRpb25zaGlwLnR5cGUsIHBheWxvYWQsIG51bGwsICdmaW5kQmVsb25nc1RvJyk7CgogICAgdmFyIHJlY29yZCA9IHN0b3JlLnB1c2gocmVsYXRpb25zaGlwLnR5cGUsIHBheWxvYWQpOwogICAgcmVjb3JkLnVwZGF0ZUJlbG9uZ3NUbyhyZWxhdGlvbnNoaXAua2V5LCByZWNvcmQpOwogICAgcmV0dXJuIHJlY29yZDsKICB9LCBudWxsLCAiRFM6IEV4dHJhY3QgcGF5bG9hZCBvZiAiICsgcmVjb3JkICsgIiA6ICIgKyByZWxhdGlvbnNoaXAudHlwZSk7Cn0KCmZ1bmN0aW9uIF9maW5kQWxsKGFkYXB0ZXIsIHN0b3JlLCB0eXBlLCBzaW5jZVRva2VuKSB7CiAgdmFyIHByb21pc2UgPSBhZGFwdGVyLmZpbmRBbGwoc3RvcmUsIHR5cGUsIHNpbmNlVG9rZW4pLAogICAgICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvckFkYXB0ZXIoYWRhcHRlciwgdHlwZSk7CgogIHJldHVybiByZXNvbHZlKHByb21pc2UsICJEUzogSGFuZGxlIEFkYXB0ZXIjZmluZEFsbCBvZiAiICsgdHlwZSkudGhlbihmdW5jdGlvbihwYXlsb2FkKSB7CiAgICBwYXlsb2FkID0gc2VyaWFsaXplci5leHRyYWN0KHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBudWxsLCAnZmluZEFsbCcpOwoKICAgIEVtYmVyLmFzc2VydCgiVGhlIHJlc3BvbnNlIGZyb20gYSBmaW5kQWxsIG11c3QgYmUgYW4gQXJyYXksIG5vdCAiICsgRW1iZXIuaW5zcGVjdChwYXlsb2FkKSwgRW1iZXIudHlwZU9mKHBheWxvYWQpID09PSAnYXJyYXknKTsKCiAgICBzdG9yZS5wdXNoTWFueSh0eXBlLCBwYXlsb2FkKTsKICAgIHN0b3JlLmRpZFVwZGF0ZUFsbCh0eXBlKTsKICAgIHJldHVybiBzdG9yZS5hbGwodHlwZSk7CiAgfSwgbnVsbCwgIkRTOiBFeHRyYWN0IHBheWxvYWQgb2YgZmluZEFsbCAiICsgdHlwZSk7Cn0KCmZ1bmN0aW9uIF9maW5kUXVlcnkoYWRhcHRlciwgc3RvcmUsIHR5cGUsIHF1ZXJ5LCByZWNvcmRBcnJheSkgewogIHZhciBwcm9taXNlID0gYWRhcHRlci5maW5kUXVlcnkoc3RvcmUsIHR5cGUsIHF1ZXJ5LCByZWNvcmRBcnJheSksCiAgICAgIHNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyRm9yQWRhcHRlcihhZGFwdGVyLCB0eXBlKTsKCiAgcmV0dXJuIHJlc29sdmUocHJvbWlzZSwgIkRTOiBIYW5kbGUgQWRhcHRlciNmaW5kUXVlcnkgb2YgIiArIHR5cGUpLnRoZW4oZnVuY3Rpb24ocGF5bG9hZCkgewogICAgcGF5bG9hZCA9IHNlcmlhbGl6ZXIuZXh0cmFjdChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgbnVsbCwgJ2ZpbmRRdWVyeScpOwoKICAgIEVtYmVyLmFzc2VydCgiVGhlIHJlc3BvbnNlIGZyb20gYSBmaW5kUXVlcnkgbXVzdCBiZSBhbiBBcnJheSwgbm90ICIgKyBFbWJlci5pbnNwZWN0KHBheWxvYWQpLCBFbWJlci50eXBlT2YocGF5bG9hZCkgPT09ICdhcnJheScpOwoKICAgIHJlY29yZEFycmF5LmxvYWQocGF5bG9hZCk7CiAgICByZXR1cm4gcmVjb3JkQXJyYXk7CiAgfSwgbnVsbCwgIkRTOiBFeHRyYWN0IHBheWxvYWQgb2YgZmluZFF1ZXJ5ICIgKyB0eXBlKTsKfQoKZnVuY3Rpb24gX2NvbW1pdChhZGFwdGVyLCBzdG9yZSwgb3BlcmF0aW9uLCByZWNvcmQpIHsKICB2YXIgdHlwZSA9IHJlY29yZC5jb25zdHJ1Y3RvciwKICAgICAgcHJvbWlzZSA9IGFkYXB0ZXJbb3BlcmF0aW9uXShzdG9yZSwgdHlwZSwgcmVjb3JkKSwKICAgICAgc2VyaWFsaXplciA9IHNlcmlhbGl6ZXJGb3JBZGFwdGVyKGFkYXB0ZXIsIHR5cGUpOwoKICBFbWJlci5hc3NlcnQoIllvdXIgYWRhcHRlcidzICciICsgb3BlcmF0aW9uICsgIicgbWV0aG9kIG11c3QgcmV0dXJuIGEgcHJvbWlzZSwgYnV0IGl0IHJldHVybmVkICIgKyBwcm9taXNlLCBpc1RoZW5hYmxlKHByb21pc2UpKTsKCiAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbihwYXlsb2FkKSB7CiAgICBpZiAocGF5bG9hZCkgeyBwYXlsb2FkID0gc2VyaWFsaXplci5leHRyYWN0KHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBnZXQocmVjb3JkLCAnaWQnKSwgb3BlcmF0aW9uKTsgfQogICAgc3RvcmUuZGlkU2F2ZVJlY29yZChyZWNvcmQsIHBheWxvYWQpOwogICAgcmV0dXJuIHJlY29yZDsKICB9LCBmdW5jdGlvbihyZWFzb24pIHsKICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBEUy5JbnZhbGlkRXJyb3IpIHsKICAgICAgc3RvcmUucmVjb3JkV2FzSW52YWxpZChyZWNvcmQsIHJlYXNvbi5lcnJvcnMpOwogICAgfSBlbHNlIHsKICAgICAgc3RvcmUucmVjb3JkV2FzRXJyb3IocmVjb3JkLCByZWFzb24pOwogICAgfQoKICAgIHRocm93IHJlYXNvbjsKICB9LCAiRFM6IEV4dHJhY3QgYW5kIG5vdGlmeSBhYm91dCAiICsgb3BlcmF0aW9uICsgIiBjb21wbGV0aW9uIG9mICIgKyByZWNvcmQpOwp9Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0OwovKgogIFRoaXMgZmlsZSBlbmNhcHN1bGF0ZXMgdGhlIHZhcmlvdXMgc3RhdGVzIHRoYXQgYSByZWNvcmQgY2FuIHRyYW5zaXRpb24KICB0aHJvdWdoIGR1cmluZyBpdHMgbGlmZWN5Y2xlLgoqLwovKioKICAjIyMgU3RhdGUKCiAgRWFjaCByZWNvcmQgaGFzIGEgYGN1cnJlbnRTdGF0ZWAgcHJvcGVydHkgdGhhdCBleHBsaWNpdGx5IHRyYWNrcyB3aGF0CiAgc3RhdGUgYSByZWNvcmQgaXMgaW4gYXQgYW55IGdpdmVuIHRpbWUuIEZvciBpbnN0YW5jZSwgaWYgYSByZWNvcmQgaXMKICBuZXdseSBjcmVhdGVkIGFuZCBoYXMgbm90IHlldCBiZWVuIHNlbnQgdG8gdGhlIGFkYXB0ZXIgdG8gYmUgc2F2ZWQsCiAgaXQgd291bGQgYmUgaW4gdGhlIGByb290LmxvYWRlZC5jcmVhdGVkLnVuY29tbWl0dGVkYCBzdGF0ZS4gIElmIGEKICByZWNvcmQgaGFzIGhhZCBsb2NhbCBtb2RpZmljYXRpb25zIG1hZGUgdG8gaXQgdGhhdCBhcmUgaW4gdGhlCiAgcHJvY2VzcyBvZiBiZWluZyBzYXZlZCwgdGhlIHJlY29yZCB3b3VsZCBiZSBpbiB0aGUKICBgcm9vdC5sb2FkZWQudXBkYXRlZC5pbkZsaWdodGAgc3RhdGUuIChUaGVzZSBzdGF0ZSBwYXRocyB3aWxsIGJlCiAgZXhwbGFpbmVkIGluIG1vcmUgZGV0YWlsIGJlbG93LikKCiAgRXZlbnRzIGFyZSBzZW50IGJ5IHRoZSByZWNvcmQgb3IgaXRzIHN0b3JlIHRvIHRoZSByZWNvcmQncwogIGBjdXJyZW50U3RhdGVgIHByb3BlcnR5LiBIb3cgdGhlIHN0YXRlIHJlYWN0cyB0byB0aGVzZSBldmVudHMgaXMKICBkZXBlbmRlbnQgb24gd2hpY2ggc3RhdGUgaXQgaXMgaW4uIEluIHNvbWUgc3RhdGVzLCBjZXJ0YWluIGV2ZW50cwogIHdpbGwgYmUgaW52YWxpZCBhbmQgd2lsbCBjYXVzZSBhbiBleGNlcHRpb24gdG8gYmUgcmFpc2VkLgoKICBTdGF0ZXMgYXJlIGhpZXJhcmNoaWNhbCBhbmQgZXZlcnkgc3RhdGUgaXMgYSBzdWJzdGF0ZSBvZiB0aGUKICBgUm9vdFN0YXRlYC4gRm9yIGV4YW1wbGUsIGEgcmVjb3JkIGNhbiBiZSBpbiB0aGUKICBgcm9vdC5kZWxldGVkLnVuY29tbWl0dGVkYCBzdGF0ZSwgdGhlbiB0cmFuc2l0aW9uIGludG8gdGhlCiAgYHJvb3QuZGVsZXRlZC5pbkZsaWdodGAgc3RhdGUuIElmIGEgY2hpbGQgc3RhdGUgZG9lcyBub3QgaW1wbGVtZW50CiAgYW4gZXZlbnQgaGFuZGxlciwgdGhlIHN0YXRlIG1hbmFnZXIgd2lsbCBhdHRlbXB0IHRvIGludm9rZSB0aGUgZXZlbnQKICBvbiBhbGwgcGFyZW50IHN0YXRlcyB1bnRpbCB0aGUgcm9vdCBzdGF0ZSBpcyByZWFjaGVkLiBUaGUgc3RhdGUKICBoaWVyYXJjaHkgb2YgYSByZWNvcmQgaXMgZGVzY3JpYmVkIGluIHRlcm1zIG9mIGEgcGF0aCBzdHJpbmcuIFlvdQogIGNhbiBkZXRlcm1pbmUgYSByZWNvcmQncyBjdXJyZW50IHN0YXRlIGJ5IGdldHRpbmcgdGhlIHN0YXRlJ3MKICBgc3RhdGVOYW1lYCBwcm9wZXJ0eToKCiAgYGBgamF2YXNjcmlwdAogIHJlY29yZC5nZXQoJ2N1cnJlbnRTdGF0ZS5zdGF0ZU5hbWUnKTsKICAvLz0+ICJyb290LmNyZWF0ZWQudW5jb21taXR0ZWQiCiAgIGBgYAoKICBUaGUgaGllcmFyY2h5IG9mIHZhbGlkIHN0YXRlcyB0aGF0IHNoaXAgd2l0aCBlbWJlciBkYXRhIGxvb2tzIGxpa2UKICB0aGlzOgoKICBgYGB0ZXh0CiAgKiByb290CiAgICAqIGRlbGV0ZWQKICAgICAgKiBzYXZlZAogICAgICAqIHVuY29tbWl0dGVkCiAgICAgICogaW5GbGlnaHQKICAgICogZW1wdHkKICAgICogbG9hZGVkCiAgICAgICogY3JlYXRlZAogICAgICAgICogdW5jb21taXR0ZWQKICAgICAgICAqIGluRmxpZ2h0CiAgICAgICogc2F2ZWQKICAgICAgKiB1cGRhdGVkCiAgICAgICAgKiB1bmNvbW1pdHRlZAogICAgICAgICogaW5GbGlnaHQKICAgICogbG9hZGluZwogIGBgYAoKICBUaGUgYERTLk1vZGVsYCBzdGF0ZXMgYXJlIHRoZW1zZWx2ZXMgc3RhdGVsZXNzLiBXaGF0IHdlIG1lYW4gaXMKICB0aGF0LCB0aGUgaGllcmFyY2hpY2FsIHN0YXRlcyB0aGF0IGVhY2ggb2YgKnRob3NlKiBwb2ludHMgdG8gaXMgYQogIHNoYXJlZCBkYXRhIHN0cnVjdHVyZS4gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGluc3RlYWQgb2YgZWFjaAogIHJlY29yZCBnZXR0aW5nIGl0cyBvd24gY29weSBvZiB0aGUgaGllcmFyY2h5IG9mIHN0YXRlcywgZWFjaCByZWNvcmQKICBwb2ludHMgdG8gdGhpcyBnbG9iYWwsIGltbXV0YWJsZSBzaGFyZWQgaW5zdGFuY2UuIEhvdyBkb2VzIGEgc3RhdGUKICBrbm93IHdoaWNoIHJlY29yZCBpdCBzaG91bGQgYmUgYWN0aW5nIG9uPyBXZSBwYXNzIHRoZSByZWNvcmQKICBpbnN0YW5jZSBpbnRvIHRoZSBzdGF0ZSdzIGV2ZW50IGhhbmRsZXJzIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4KCiAgVGhlIHJlY29yZCBwYXNzZWQgYXMgdGhlIGZpcnN0IHBhcmFtZXRlciBpcyB3aGVyZSB5b3Ugc2hvdWxkIHN0YXNoCiAgc3RhdGUgYWJvdXQgdGhlIHJlY29yZCBpZiBuZWVkZWQ7IHlvdSBzaG91bGQgbmV2ZXIgc3RvcmUgZGF0YSBvbiB0aGUgc3RhdGUKICBvYmplY3QgaXRzZWxmLgoKICAjIyMgRXZlbnRzIGFuZCBGbGFncwoKICBBIHN0YXRlIG1heSBpbXBsZW1lbnQgemVybyBvciBtb3JlIGV2ZW50cyBhbmQgZmxhZ3MuCgogICMjIyMgRXZlbnRzCgogIEV2ZW50cyBhcmUgbmFtZWQgZnVuY3Rpb25zIHRoYXQgYXJlIGludm9rZWQgd2hlbiBzZW50IHRvIGEgcmVjb3JkLiBUaGUKICByZWNvcmQgd2lsbCBmaXJzdCBsb29rIGZvciBhIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lIG9uIHRoZQogIGN1cnJlbnQgc3RhdGUuIElmIG5vIG1ldGhvZCBpcyBmb3VuZCwgaXQgd2lsbCBzZWFyY2ggdGhlIGN1cnJlbnQKICBzdGF0ZSdzIHBhcmVudCwgYW5kIHRoZW4gaXRzIGdyYW5kcGFyZW50LCBhbmQgc28gb24gdW50aWwgcmVhY2hpbmcKICB0aGUgdG9wIG9mIHRoZSBoaWVyYXJjaHkuIElmIHRoZSByb290IGlzIHJlYWNoZWQgd2l0aG91dCBhbiBldmVudAogIGhhbmRsZXIgYmVpbmcgZm91bmQsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHJhaXNlZC4gVGhpcyBjYW4gYmUgdmVyeQogIGhlbHBmdWwgd2hlbiBkZWJ1Z2dpbmcgbmV3IGZlYXR1cmVzLgoKICBIZXJlJ3MgYW4gZXhhbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiBhIHN0YXRlIHdpdGggYSBgbXlFdmVudGAgZXZlbnQgaGFuZGxlcjoKCiAgYGBgamF2YXNjcmlwdAogIGFTdGF0ZTogRFMuU3RhdGUuY3JlYXRlKHsKICAgIG15RXZlbnQ6IGZ1bmN0aW9uKG1hbmFnZXIsIHBhcmFtKSB7CiAgICAgIGNvbnNvbGUubG9nKCJSZWNlaXZlZCBteUV2ZW50IHdpdGgiLCBwYXJhbSk7CiAgICB9CiAgfSkKICBgYGAKCiAgVG8gdHJpZ2dlciB0aGlzIGV2ZW50OgoKICBgYGBqYXZhc2NyaXB0CiAgcmVjb3JkLnNlbmQoJ215RXZlbnQnLCAnZm9vJyk7CiAgLy89PiAiUmVjZWl2ZWQgbXlFdmVudCB3aXRoIGZvbyIKICBgYGAKCiAgTm90ZSB0aGF0IGFuIG9wdGlvbmFsIHBhcmFtZXRlciBjYW4gYmUgc2VudCB0byBhIHJlY29yZCdzIGBzZW5kKClgIG1ldGhvZCwKICB3aGljaCB3aWxsIGJlIHBhc3NlZCBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byB0aGUgZXZlbnQgaGFuZGxlci4KCiAgRXZlbnRzIHNob3VsZCB0cmFuc2l0aW9uIHRvIGEgZGlmZmVyZW50IHN0YXRlIGlmIGFwcHJvcHJpYXRlLiBUaGlzIGNhbiBiZQogIGRvbmUgYnkgY2FsbGluZyB0aGUgcmVjb3JkJ3MgYHRyYW5zaXRpb25UbygpYCBtZXRob2Qgd2l0aCBhIHBhdGggdG8gdGhlCiAgZGVzaXJlZCBzdGF0ZS4gVGhlIHN0YXRlIG1hbmFnZXIgd2lsbCBhdHRlbXB0IHRvIHJlc29sdmUgdGhlIHN0YXRlIHBhdGgKICByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBzdGF0ZS4gSWYgbm8gc3RhdGUgaXMgZm91bmQgYXQgdGhhdCBwYXRoLCBpdCB3aWxsCiAgYXR0ZW1wdCB0byByZXNvbHZlIGl0IHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHN0YXRlJ3MgcGFyZW50LCBhbmQgdGhlbiBpdHMKICBwYXJlbnQsIGFuZCBzbyBvbiB1bnRpbCB0aGUgcm9vdCBpcyByZWFjaGVkLiBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIGhpZXJhcmNoeQogIGxpa2UgdGhpczoKCiAgICAgICogY3JlYXRlZAogICAgICAgICogdW5jb21taXR0ZWQgPC0tIGN1cnJlbnRTdGF0ZQogICAgICAgICogaW5GbGlnaHQKICAgICAgKiB1cGRhdGVkCiAgICAgICAgKiBpbkZsaWdodAoKICBJZiB3ZSBhcmUgY3VycmVudGx5IGluIHRoZSBgdW5jb21taXR0ZWRgIHN0YXRlLCBjYWxsaW5nCiAgYHRyYW5zaXRpb25UbygnaW5GbGlnaHQnKWAgd291bGQgdHJhbnNpdGlvbiB0byB0aGUgYGNyZWF0ZWQuaW5GbGlnaHRgIHN0YXRlLAogIHdoaWxlIGNhbGxpbmcgYHRyYW5zaXRpb25UbygndXBkYXRlZC5pbkZsaWdodCcpYCB3b3VsZCB0cmFuc2l0aW9uIHRvCiAgdGhlIGB1cGRhdGVkLmluRmxpZ2h0YCBzdGF0ZS4KCiAgUmVtZW1iZXIgdGhhdCAqb25seSBldmVudHMqIHNob3VsZCBldmVyIGNhdXNlIGEgc3RhdGUgdHJhbnNpdGlvbi4gWW91IHNob3VsZAogIG5ldmVyIGNhbGwgYHRyYW5zaXRpb25UbygpYCBmcm9tIG91dHNpZGUgYSBzdGF0ZSdzIGV2ZW50IGhhbmRsZXIuIElmIHlvdSBhcmUKICB0ZW1wdGVkIHRvIGRvIHNvLCBjcmVhdGUgYSBuZXcgZXZlbnQgYW5kIHNlbmQgdGhhdCB0byB0aGUgc3RhdGUgbWFuYWdlci4KCiAgIyMjIyBGbGFncwoKICBGbGFncyBhcmUgQm9vbGVhbiB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbnRyb3NwZWN0IGEgcmVjb3JkJ3MgY3VycmVudAogIHN0YXRlIGluIGEgbW9yZSB1c2VyLWZyaWVuZGx5IHdheSB0aGFuIGV4YW1pbmluZyBpdHMgc3RhdGUgcGF0aC4gRm9yIGV4YW1wbGUsCiAgaW5zdGVhZCBvZiBkb2luZyB0aGlzOgoKICBgYGBqYXZhc2NyaXB0CiAgdmFyIHN0YXRlUGF0aCA9IHJlY29yZC5nZXQoJ3N0YXRlTWFuYWdlci5jdXJyZW50UGF0aCcpOwogIGlmIChzdGF0ZVBhdGggPT09ICdjcmVhdGVkLmluRmxpZ2h0JykgewogICAgZG9Tb21ldGhpbmcoKTsKICB9CiAgYGBgCgogIFlvdSBjYW4gc2F5OgoKICBgYGBqYXZhc2NyaXB0CiAgaWYgKHJlY29yZC5nZXQoJ2lzTmV3JykgJiYgcmVjb3JkLmdldCgnaXNTYXZpbmcnKSkgewogICAgZG9Tb21ldGhpbmcoKTsKICB9CiAgYGBgCgogIElmIHlvdXIgc3RhdGUgZG9lcyBub3Qgc2V0IGEgdmFsdWUgZm9yIGEgZ2l2ZW4gZmxhZywgdGhlIHZhbHVlIHdpbGwKICBiZSBpbmhlcml0ZWQgZnJvbSBpdHMgcGFyZW50IChvciB0aGUgZmlyc3QgcGxhY2UgaW4gdGhlIHN0YXRlIGhpZXJhcmNoeQogIHdoZXJlIGl0IGlzIGRlZmluZWQpLgoKICBUaGUgY3VycmVudCBzZXQgb2YgZmxhZ3MgYXJlIGRlZmluZWQgYmVsb3cuIElmIHlvdSB3YW50IHRvIGFkZCBhIG5ldyBmbGFnLAogIGluIGFkZGl0aW9uIHRvIHRoZSBhcmVhIGJlbG93LCB5b3Ugd2lsbCBhbHNvIG5lZWQgdG8gZGVjbGFyZSBpdCBpbiB0aGUKICBgRFMuTW9kZWxgIGNsYXNzLgoKCiAgICogW2lzRW1wdHldKERTLk1vZGVsLmh0bWwjcHJvcGVydHlfaXNFbXB0eSkKICAgKiBbaXNMb2FkaW5nXShEUy5Nb2RlbC5odG1sI3Byb3BlcnR5X2lzTG9hZGluZykKICAgKiBbaXNMb2FkZWRdKERTLk1vZGVsLmh0bWwjcHJvcGVydHlfaXNMb2FkZWQpCiAgICogW2lzRGlydHldKERTLk1vZGVsLmh0bWwjcHJvcGVydHlfaXNEaXJ0eSkKICAgKiBbaXNTYXZpbmddKERTLk1vZGVsLmh0bWwjcHJvcGVydHlfaXNTYXZpbmcpCiAgICogW2lzRGVsZXRlZF0oRFMuTW9kZWwuaHRtbCNwcm9wZXJ0eV9pc0RlbGV0ZWQpCiAgICogW2lzTmV3XShEUy5Nb2RlbC5odG1sI3Byb3BlcnR5X2lzTmV3KQogICAqIFtpc1ZhbGlkXShEUy5Nb2RlbC5odG1sI3Byb3BlcnR5X2lzVmFsaWQpCgogIEBuYW1lc3BhY2UgRFMKICBAY2xhc3MgUm9vdFN0YXRlCiovCgp2YXIgaGFzRGVmaW5lZFByb3BlcnRpZXMgPSBmdW5jdGlvbihvYmplY3QpIHsKICAvLyBJZ25vcmUgaW50ZXJuYWwgcHJvcGVydHkgZGVmaW5lZCBieSBzaW11bGF0ZWQgYEVtYmVyLmNyZWF0ZWAuCiAgdmFyIG5hbWVzID0gRW1iZXIua2V5cyhvYmplY3QpOwogIHZhciBpLCBsLCBuYW1lOwogIGZvciAoaSA9IDAsIGwgPSBuYW1lcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICBuYW1lID0gbmFtZXNbaV07CiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KG5hbWUpICYmIG9iamVjdFtuYW1lXSkgeyByZXR1cm4gdHJ1ZTsgfQogIH0KCiAgcmV0dXJuIGZhbHNlOwp9OwoKdmFyIGRpZFNldFByb3BlcnR5ID0gZnVuY3Rpb24ocmVjb3JkLCBjb250ZXh0KSB7CiAgaWYgKGNvbnRleHQudmFsdWUgPT09IGNvbnRleHQub3JpZ2luYWxWYWx1ZSkgewogICAgZGVsZXRlIHJlY29yZC5fYXR0cmlidXRlc1tjb250ZXh0Lm5hbWVdOwogICAgcmVjb3JkLnNlbmQoJ3Byb3BlcnR5V2FzUmVzZXQnLCBjb250ZXh0Lm5hbWUpOwogIH0gZWxzZSBpZiAoY29udGV4dC52YWx1ZSAhPT0gY29udGV4dC5vbGRWYWx1ZSkgewogICAgcmVjb3JkLnNlbmQoJ2JlY29tZURpcnR5Jyk7CiAgfQoKICByZWNvcmQudXBkYXRlUmVjb3JkQXJyYXlzTGF0ZXIoKTsKfTsKCi8vIEltcGxlbWVudGF0aW9uIG5vdGVzOgovLwovLyBFYWNoIHN0YXRlIGhhcyBhIGJvb2xlYW4gdmFsdWUgZm9yIGFsbCBvZiB0aGUgZm9sbG93aW5nIGZsYWdzOgovLwovLyAqIGlzTG9hZGVkOiBUaGUgcmVjb3JkIGhhcyBhIHBvcHVsYXRlZCBgZGF0YWAgcHJvcGVydHkuIFdoZW4gYQovLyAgIHJlY29yZCBpcyBsb2FkZWQgdmlhIGBzdG9yZS5maW5kYCwgYGlzTG9hZGVkYCBpcyBmYWxzZQovLyAgIHVudGlsIHRoZSBhZGFwdGVyIHNldHMgaXQuIFdoZW4gYSByZWNvcmQgaXMgY3JlYXRlZCBsb2NhbGx5LAovLyAgIGl0cyBgaXNMb2FkZWRgIHByb3BlcnR5IGlzIGFsd2F5cyB0cnVlLgovLyAqIGlzRGlydHk6IFRoZSByZWNvcmQgaGFzIGxvY2FsIGNoYW5nZXMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbgovLyAgIHNhdmVkIGJ5IHRoZSBhZGFwdGVyLiBUaGlzIGluY2x1ZGVzIHJlY29yZHMgdGhhdCBoYXZlIGJlZW4KLy8gICBjcmVhdGVkIChidXQgbm90IHlldCBzYXZlZCkgb3IgZGVsZXRlZC4KLy8gKiBpc1NhdmluZzogVGhlIHJlY29yZCBoYXMgYmVlbiBjb21taXR0ZWQsIGJ1dAovLyAgIHRoZSBhZGFwdGVyIGhhcyBub3QgeWV0IGFja25vd2xlZGdlZCB0aGF0IHRoZSBjaGFuZ2VzIGhhdmUKLy8gICBiZWVuIHBlcnNpc3RlZCB0byB0aGUgYmFja2VuZC4KLy8gKiBpc0RlbGV0ZWQ6IFRoZSByZWNvcmQgd2FzIG1hcmtlZCBmb3IgZGVsZXRpb24uIFdoZW4gYGlzRGVsZXRlZGAKLy8gICBpcyB0cnVlIGFuZCBgaXNEaXJ0eWAgaXMgdHJ1ZSwgdGhlIHJlY29yZCBpcyBkZWxldGVkIGxvY2FsbHkKLy8gICBidXQgdGhlIGRlbGV0aW9uIHdhcyBub3QgeWV0IHBlcnNpc3RlZC4gV2hlbiBgaXNTYXZpbmdgIGlzCi8vICAgdHJ1ZSwgdGhlIGNoYW5nZSBpcyBpbi1mbGlnaHQuIFdoZW4gYm90aCBgaXNEaXJ0eWAgYW5kCi8vICAgYGlzU2F2aW5nYCBhcmUgZmFsc2UsIHRoZSBjaGFuZ2UgaGFzIHBlcnNpc3RlZC4KLy8gKiBpc0Vycm9yOiBUaGUgYWRhcHRlciByZXBvcnRlZCB0aGF0IGl0IHdhcyB1bmFibGUgdG8gc2F2ZQovLyAgIGxvY2FsIGNoYW5nZXMgdG8gdGhlIGJhY2tlbmQuIFRoaXMgbWF5IGFsc28gcmVzdWx0IGluIHRoZQovLyAgIHJlY29yZCBoYXZpbmcgaXRzIGBpc1ZhbGlkYCBwcm9wZXJ0eSBiZWNvbWUgZmFsc2UgaWYgdGhlCi8vICAgYWRhcHRlciByZXBvcnRlZCB0aGF0IHNlcnZlci1zaWRlIHZhbGlkYXRpb25zIGZhaWxlZC4KLy8gKiBpc05ldzogVGhlIHJlY29yZCB3YXMgY3JlYXRlZCBvbiB0aGUgY2xpZW50IGFuZCB0aGUgYWRhcHRlcgovLyAgIGRpZCBub3QgeWV0IHJlcG9ydCB0aGF0IGl0IHdhcyBzdWNjZXNzZnVsbHkgc2F2ZWQuCi8vICogaXNWYWxpZDogTm8gY2xpZW50LXNpZGUgdmFsaWRhdGlvbnMgaGF2ZSBmYWlsZWQgYW5kIHRoZQovLyAgIGFkYXB0ZXIgZGlkIG5vdCByZXBvcnQgYW55IHNlcnZlci1zaWRlIHZhbGlkYXRpb24gZmFpbHVyZXMuCgovLyBUaGUgZGlydHkgc3RhdGUgaXMgYSBhYnN0cmFjdCBzdGF0ZSB3aG9zZSBmdW5jdGlvbmFsaXR5IGlzCi8vIHNoYXJlZCBiZXR3ZWVuIHRoZSBgY3JlYXRlZGAgYW5kIGB1cGRhdGVkYCBzdGF0ZXMuCi8vCi8vIFRoZSBkZWxldGVkIHN0YXRlIHNoYXJlcyB0aGUgYGlzRGlydHlgIGZsYWcgd2l0aCB0aGUKLy8gc3ViY2xhc3NlcyBvZiBgRGlydHlTdGF0ZWAsIGJ1dCB3aXRoIGEgdmVyeSBkaWZmZXJlbnQKLy8gaW1wbGVtZW50YXRpb24uCi8vCi8vIERpcnR5IHN0YXRlcyBoYXZlIHRocmVlIGNoaWxkIHN0YXRlczoKLy8KLy8gYHVuY29tbWl0dGVkYDogdGhlIHN0b3JlIGhhcyBub3QgeWV0IGhhbmRlZCBvZmYgdGhlIHJlY29yZAovLyAgIHRvIGJlIHNhdmVkLgovLyBgaW5GbGlnaHRgOiB0aGUgc3RvcmUgaGFzIGhhbmRlZCBvZmYgdGhlIHJlY29yZCB0byBiZSBzYXZlZCwKLy8gICBidXQgdGhlIGFkYXB0ZXIgaGFzIG5vdCB5ZXQgYWNrbm93bGVkZ2VkIHN1Y2Nlc3MuCi8vIGBpbnZhbGlkYDogdGhlIHJlY29yZCBoYXMgaW52YWxpZCBpbmZvcm1hdGlvbiBhbmQgY2Fubm90IGJlCi8vICAgc2VuZCB0byB0aGUgYWRhcHRlciB5ZXQuCnZhciBEaXJ0eVN0YXRlID0gewogIGluaXRpYWxTdGF0ZTogJ3VuY29tbWl0dGVkJywKCiAgLy8gRkxBR1MKICBpc0RpcnR5OiB0cnVlLAoKICAvLyBTVUJTVEFURVMKCiAgLy8gV2hlbiBhIHJlY29yZCBmaXJzdCBiZWNvbWVzIGRpcnR5LCBpdCBpcyBgdW5jb21taXR0ZWRgLgogIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGVyZSBhcmUgbG9jYWwgcGVuZGluZyBjaGFuZ2VzLCBidXQgdGhleQogIC8vIGhhdmUgbm90IHlldCBiZWd1biB0byBiZSBzYXZlZCwgYW5kIGFyZSBub3QgaW52YWxpZC4KICB1bmNvbW1pdHRlZDogewogICAgLy8gRVZFTlRTCiAgICBkaWRTZXRQcm9wZXJ0eTogZGlkU2V0UHJvcGVydHksCgogICAgcHJvcGVydHlXYXNSZXNldDogZnVuY3Rpb24ocmVjb3JkLCBuYW1lKSB7CiAgICAgIHZhciBzdGlsbERpcnR5ID0gZmFsc2U7CgogICAgICBmb3IgKHZhciBwcm9wIGluIHJlY29yZC5fYXR0cmlidXRlcykgewogICAgICAgIHN0aWxsRGlydHkgPSB0cnVlOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBpZiAoIXN0aWxsRGlydHkpIHsgcmVjb3JkLnNlbmQoJ3JvbGxlZEJhY2snKTsgfQogICAgfSwKCiAgICBwdXNoZWREYXRhOiBFbWJlci5LLAoKICAgIGJlY29tZURpcnR5OiBFbWJlci5LLAoKICAgIHdpbGxDb21taXQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdpbkZsaWdodCcpOwogICAgfSwKCiAgICByZWxvYWRSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCwgcmVzb2x2ZSkgewogICAgICByZXNvbHZlKGdldChyZWNvcmQsICdzdG9yZScpLnJlbG9hZFJlY29yZChyZWNvcmQpKTsKICAgIH0sCgogICAgcm9sbGVkQmFjazogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2xvYWRlZC5zYXZlZCcpOwogICAgfSwKCiAgICBiZWNhbWVJbnZhbGlkOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgcmVjb3JkLnRyYW5zaXRpb25UbygnaW52YWxpZCcpOwogICAgfSwKCiAgICByb2xsYmFjazogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC5yb2xsYmFjaygpOwogICAgfQogIH0sCgogIC8vIE9uY2UgYSByZWNvcmQgaGFzIGJlZW4gaGFuZGVkIG9mZiB0byB0aGUgYWRhcHRlciB0byBiZQogIC8vIHNhdmVkLCBpdCBpcyBpbiB0aGUgJ2luIGZsaWdodCcgc3RhdGUuIENoYW5nZXMgdG8gdGhlCiAgLy8gcmVjb3JkIGNhbm5vdCBiZSBtYWRlIGR1cmluZyB0aGlzIHdpbmRvdy4KICBpbkZsaWdodDogewogICAgLy8gRkxBR1MKICAgIGlzU2F2aW5nOiB0cnVlLAoKICAgIC8vIEVWRU5UUwogICAgZGlkU2V0UHJvcGVydHk6IGRpZFNldFByb3BlcnR5LAogICAgYmVjb21lRGlydHk6IEVtYmVyLkssCiAgICBwdXNoZWREYXRhOiBFbWJlci5LLAoKICAgIC8vIFRPRE86IE1vcmUgcm9idXN0IHNlbWFudGljcyBhcm91bmQgc2F2ZS13aGlsZS1pbi1mbGlnaHQKICAgIHdpbGxDb21taXQ6IEVtYmVyLkssCgogICAgZGlkQ29tbWl0OiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgdmFyIGRpcnR5VHlwZSA9IGdldCh0aGlzLCAnZGlydHlUeXBlJyk7CgogICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdzYXZlZCcpOwogICAgICByZWNvcmQuc2VuZCgnaW52b2tlTGlmZWN5Y2xlQ2FsbGJhY2tzJywgZGlydHlUeXBlKTsKICAgIH0sCgogICAgYmVjYW1lSW52YWxpZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2ludmFsaWQnKTsKICAgICAgcmVjb3JkLnNlbmQoJ2ludm9rZUxpZmVjeWNsZUNhbGxiYWNrcycpOwogICAgfSwKCiAgICBiZWNhbWVFcnJvcjogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ3VuY29tbWl0dGVkJyk7CiAgICAgIHJlY29yZC50cmlnZ2VyTGF0ZXIoJ2JlY2FtZUVycm9yJywgcmVjb3JkKTsKICAgIH0KICB9LAoKICAvLyBBIHJlY29yZCBpcyBpbiB0aGUgYGludmFsaWRgIHN0YXRlIHdoZW4gaXRzIGNsaWVudC1zaWRlCiAgLy8gaW52YWxpZGF0aW9ucyBoYXZlIGZhaWxlZCwgb3IgaWYgdGhlIGFkYXB0ZXIgaGFzIGluZGljYXRlZAogIC8vIHRoZSB0aGUgcmVjb3JkIGZhaWxlZCBzZXJ2ZXItc2lkZSBpbnZhbGlkYXRpb25zLgogIGludmFsaWQ6IHsKICAgIC8vIEZMQUdTCiAgICBpc1ZhbGlkOiBmYWxzZSwKCiAgICAvLyBFVkVOVFMKICAgIGRlbGV0ZVJlY29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2RlbGV0ZWQudW5jb21taXR0ZWQnKTsKICAgICAgcmVjb3JkLmNsZWFyUmVsYXRpb25zaGlwcygpOwogICAgfSwKCiAgICBkaWRTZXRQcm9wZXJ0eTogZnVuY3Rpb24ocmVjb3JkLCBjb250ZXh0KSB7CiAgICAgIGdldChyZWNvcmQsICdlcnJvcnMnKS5yZW1vdmUoY29udGV4dC5uYW1lKTsKCiAgICAgIGRpZFNldFByb3BlcnR5KHJlY29yZCwgY29udGV4dCk7CiAgICB9LAoKICAgIGJlY29tZURpcnR5OiBFbWJlci5LLAoKICAgIHJvbGxlZEJhY2s6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICBnZXQocmVjb3JkLCAnZXJyb3JzJykuY2xlYXIoKTsKICAgIH0sCgogICAgYmVjYW1lVmFsaWQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICByZWNvcmQudHJhbnNpdGlvblRvKCd1bmNvbW1pdHRlZCcpOwogICAgfSwKCiAgICBpbnZva2VMaWZlY3ljbGVDYWxsYmFja3M6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICByZWNvcmQudHJpZ2dlckxhdGVyKCdiZWNhbWVJbnZhbGlkJywgcmVjb3JkKTsKICAgIH0KICB9Cn07CgovLyBUaGUgY3JlYXRlZCBhbmQgdXBkYXRlZCBzdGF0ZXMgYXJlIGNyZWF0ZWQgb3V0c2lkZSB0aGUgc3RhdGUKLy8gY2hhcnQgc28gd2UgY2FuIHJlb3BlbiB0aGVpciBzdWJzdGF0ZXMgYW5kIGFkZCBtaXhpbnMgYXMKLy8gbmVjZXNzYXJ5LgoKZnVuY3Rpb24gZGVlcENsb25lKG9iamVjdCkgewogIHZhciBjbG9uZSA9IHt9LCB2YWx1ZTsKCiAgZm9yICh2YXIgcHJvcCBpbiBvYmplY3QpIHsKICAgIHZhbHVlID0gb2JqZWN0W3Byb3BdOwogICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHsKICAgICAgY2xvbmVbcHJvcF0gPSBkZWVwQ2xvbmUodmFsdWUpOwogICAgfSBlbHNlIHsKICAgICAgY2xvbmVbcHJvcF0gPSB2YWx1ZTsKICAgIH0KICB9CgogIHJldHVybiBjbG9uZTsKfQoKZnVuY3Rpb24gbWl4aW4ob3JpZ2luYWwsIGhhc2gpIHsKICBmb3IgKHZhciBwcm9wIGluIGhhc2gpIHsKICAgIG9yaWdpbmFsW3Byb3BdID0gaGFzaFtwcm9wXTsKICB9CgogIHJldHVybiBvcmlnaW5hbDsKfQoKZnVuY3Rpb24gZGlydHlTdGF0ZShvcHRpb25zKSB7CiAgdmFyIG5ld1N0YXRlID0gZGVlcENsb25lKERpcnR5U3RhdGUpOwogIHJldHVybiBtaXhpbihuZXdTdGF0ZSwgb3B0aW9ucyk7Cn0KCnZhciBjcmVhdGVkU3RhdGUgPSBkaXJ0eVN0YXRlKHsKICBkaXJ0eVR5cGU6ICdjcmVhdGVkJywKCiAgLy8gRkxBR1MKICBpc05ldzogdHJ1ZQp9KTsKCmNyZWF0ZWRTdGF0ZS51bmNvbW1pdHRlZC5yb2xsZWRCYWNrID0gZnVuY3Rpb24ocmVjb3JkKSB7CiAgcmVjb3JkLnRyYW5zaXRpb25UbygnZGVsZXRlZC5zYXZlZCcpOwp9OwoKdmFyIHVwZGF0ZWRTdGF0ZSA9IGRpcnR5U3RhdGUoewogIGRpcnR5VHlwZTogJ3VwZGF0ZWQnCn0pOwoKY3JlYXRlZFN0YXRlLnVuY29tbWl0dGVkLmRlbGV0ZVJlY29yZCA9IGZ1bmN0aW9uKHJlY29yZCkgewogIHJlY29yZC5jbGVhclJlbGF0aW9uc2hpcHMoKTsKICByZWNvcmQudHJhbnNpdGlvblRvKCdkZWxldGVkLnNhdmVkJyk7Cn07CgpjcmVhdGVkU3RhdGUudW5jb21taXR0ZWQucm9sbGJhY2sgPSBmdW5jdGlvbihyZWNvcmQpIHsKICBEaXJ0eVN0YXRlLnVuY29tbWl0dGVkLnJvbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgcmVjb3JkLnRyYW5zaXRpb25UbygnZGVsZXRlZC5zYXZlZCcpOwp9OwoKdXBkYXRlZFN0YXRlLnVuY29tbWl0dGVkLmRlbGV0ZVJlY29yZCA9IGZ1bmN0aW9uKHJlY29yZCkgewogIHJlY29yZC50cmFuc2l0aW9uVG8oJ2RlbGV0ZWQudW5jb21taXR0ZWQnKTsKICByZWNvcmQuY2xlYXJSZWxhdGlvbnNoaXBzKCk7Cn07Cgp2YXIgUm9vdFN0YXRlID0gewogIC8vIEZMQUdTCiAgaXNFbXB0eTogZmFsc2UsCiAgaXNMb2FkaW5nOiBmYWxzZSwKICBpc0xvYWRlZDogZmFsc2UsCiAgaXNEaXJ0eTogZmFsc2UsCiAgaXNTYXZpbmc6IGZhbHNlLAogIGlzRGVsZXRlZDogZmFsc2UsCiAgaXNOZXc6IGZhbHNlLAogIGlzVmFsaWQ6IHRydWUsCgogIC8vIERFRkFVTFQgRVZFTlRTCgogIC8vIFRyeWluZyB0byByb2xsIGJhY2sgaWYgeW91J3JlIG5vdCBpbiB0aGUgZGlydHkgc3RhdGUKICAvLyBkb2Vzbid0IGNoYW5nZSB5b3VyIHN0YXRlLiBGb3IgZXhhbXBsZSwgaWYgeW91J3JlIGluIHRoZQogIC8vIGluLWZsaWdodCBzdGF0ZSwgcm9sbGluZyBiYWNrIHRoZSByZWNvcmQgZG9lc24ndCBtb3ZlCiAgLy8geW91IG91dCBvZiB0aGUgaW4tZmxpZ2h0IHN0YXRlLgogIHJvbGxlZEJhY2s6IEVtYmVyLkssCgogIHByb3BlcnR5V2FzUmVzZXQ6IEVtYmVyLkssCgogIC8vIFNVQlNUQVRFUwoKICAvLyBBIHJlY29yZCBiZWdpbnMgaXRzIGxpZmVjeWNsZSBpbiB0aGUgYGVtcHR5YCBzdGF0ZS4KICAvLyBJZiBpdHMgZGF0YSB3aWxsIGNvbWUgZnJvbSB0aGUgYWRhcHRlciwgaXQgd2lsbAogIC8vIHRyYW5zaXRpb24gaW50byB0aGUgYGxvYWRpbmdgIHN0YXRlLiBPdGhlcndpc2UsIGlmCiAgLy8gdGhlIHJlY29yZCBpcyBiZWluZyBjcmVhdGVkIG9uIHRoZSBjbGllbnQsIGl0IHdpbGwKICAvLyB0cmFuc2l0aW9uIGludG8gdGhlIGBjcmVhdGVkYCBzdGF0ZS4KICBlbXB0eTogewogICAgaXNFbXB0eTogdHJ1ZSwKCiAgICAvLyBFVkVOVFMKICAgIGxvYWRpbmdEYXRhOiBmdW5jdGlvbihyZWNvcmQsIHByb21pc2UpIHsKICAgICAgcmVjb3JkLl9sb2FkaW5nUHJvbWlzZSA9IHByb21pc2U7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2xvYWRpbmcnKTsKICAgIH0sCgogICAgbG9hZGVkRGF0YTogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2xvYWRlZC5jcmVhdGVkLnVuY29tbWl0dGVkJyk7CgogICAgICByZWNvcmQuc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpIHsKICAgICAgICByZWNvcmQubm90aWZ5UHJvcGVydHlDaGFuZ2UoJ2RhdGEnKTsKICAgICAgfSk7CiAgICB9LAoKICAgIHB1c2hlZERhdGE6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdsb2FkZWQuc2F2ZWQnKTsKICAgICAgcmVjb3JkLnRyaWdnZXJMYXRlcignZGlkTG9hZCcpOwogICAgfQogIH0sCgogIC8vIEEgcmVjb3JkIGVudGVycyB0aGlzIHN0YXRlIHdoZW4gdGhlIHN0b3JlIGFza2VzCiAgLy8gdGhlIGFkYXB0ZXIgZm9yIGl0cyBkYXRhLiBJdCByZW1haW5zIGluIHRoaXMgc3RhdGUKICAvLyB1bnRpbCB0aGUgYWRhcHRlciBwcm92aWRlcyB0aGUgcmVxdWVzdGVkIGRhdGEuCiAgLy8KICAvLyBVc3VhbGx5LCB0aGlzIHByb2Nlc3MgaXMgYXN5bmNocm9ub3VzLCB1c2luZyBhbgogIC8vIFhIUiB0byByZXRyaWV2ZSB0aGUgZGF0YS4KICBsb2FkaW5nOiB7CiAgICAvLyBGTEFHUwogICAgaXNMb2FkaW5nOiB0cnVlLAoKICAgIGV4aXQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICByZWNvcmQuX2xvYWRpbmdQcm9taXNlID0gbnVsbDsKICAgIH0sCgogICAgLy8gRVZFTlRTCiAgICBwdXNoZWREYXRhOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgcmVjb3JkLnRyYW5zaXRpb25UbygnbG9hZGVkLnNhdmVkJyk7CiAgICAgIHJlY29yZC50cmlnZ2VyTGF0ZXIoJ2RpZExvYWQnKTsKICAgICAgc2V0KHJlY29yZCwgJ2lzRXJyb3InLCBmYWxzZSk7CiAgICB9LAoKICAgIGJlY2FtZUVycm9yOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgcmVjb3JkLnRyaWdnZXJMYXRlcignYmVjYW1lRXJyb3InLCByZWNvcmQpOwogICAgfSwKCiAgICBub3RGb3VuZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2VtcHR5Jyk7CiAgICB9CiAgfSwKCiAgLy8gQSByZWNvcmQgZW50ZXJzIHRoaXMgc3RhdGUgd2hlbiBpdHMgZGF0YSBpcyBwb3B1bGF0ZWQuCiAgLy8gTW9zdCBvZiBhIHJlY29yZCdzIGxpZmVjeWNsZSBpcyBzcGVudCBpbnNpZGUgc3Vic3RhdGVzCiAgLy8gb2YgdGhlIGBsb2FkZWRgIHN0YXRlLgogIGxvYWRlZDogewogICAgaW5pdGlhbFN0YXRlOiAnc2F2ZWQnLAoKICAgIC8vIEZMQUdTCiAgICBpc0xvYWRlZDogdHJ1ZSwKCiAgICAvLyBTVUJTVEFURVMKCiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gbG9jYWwgY2hhbmdlcyB0byBhIHJlY29yZCwgaXQgcmVtYWlucwogICAgLy8gaW4gdGhlIGBzYXZlZGAgc3RhdGUuCiAgICBzYXZlZDogewogICAgICBzZXR1cDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgdmFyIGF0dHJzID0gcmVjb3JkLl9hdHRyaWJ1dGVzLAogICAgICAgICAgICBpc0RpcnR5ID0gZmFsc2U7CgogICAgICAgIGZvciAodmFyIHByb3AgaW4gYXR0cnMpIHsKICAgICAgICAgIGlmIChhdHRycy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgewogICAgICAgICAgICBpc0RpcnR5ID0gdHJ1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoaXNEaXJ0eSkgewogICAgICAgICAgcmVjb3JkLmFkYXB0ZXJEaWREaXJ0eSgpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8vIEVWRU5UUwogICAgICBkaWRTZXRQcm9wZXJ0eTogZGlkU2V0UHJvcGVydHksCgogICAgICBwdXNoZWREYXRhOiBFbWJlci5LLAoKICAgICAgYmVjb21lRGlydHk6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ3VwZGF0ZWQudW5jb21taXR0ZWQnKTsKICAgICAgfSwKCiAgICAgIHdpbGxDb21taXQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ3VwZGF0ZWQuaW5GbGlnaHQnKTsKICAgICAgfSwKCiAgICAgIHJlbG9hZFJlY29yZDogZnVuY3Rpb24ocmVjb3JkLCByZXNvbHZlKSB7CiAgICAgICAgcmVzb2x2ZShnZXQocmVjb3JkLCAnc3RvcmUnKS5yZWxvYWRSZWNvcmQocmVjb3JkKSk7CiAgICAgIH0sCgogICAgICBkZWxldGVSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2RlbGV0ZWQudW5jb21taXR0ZWQnKTsKICAgICAgICByZWNvcmQuY2xlYXJSZWxhdGlvbnNoaXBzKCk7CiAgICAgIH0sCgogICAgICB1bmxvYWRSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIC8vIGNsZWFyIHJlbGF0aW9uc2hpcHMgYmVmb3JlIG1vdmluZyB0byBkZWxldGVkIHN0YXRlCiAgICAgICAgLy8gb3RoZXJ3aXNlIGl0IGZhaWxzCiAgICAgICAgcmVjb3JkLmNsZWFyUmVsYXRpb25zaGlwcygpOwogICAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2RlbGV0ZWQuc2F2ZWQnKTsKICAgICAgfSwKCiAgICAgIGRpZENvbW1pdDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgcmVjb3JkLnNlbmQoJ2ludm9rZUxpZmVjeWNsZUNhbGxiYWNrcycsIGdldChyZWNvcmQsICdsYXN0RGlydHlUeXBlJykpOwogICAgICB9LAoKICAgICAgLy8gbG9hZGVkLnNhdmVkLm5vdEZvdW5kIHdvdWxkIGJlIHRyaWdnZXJlZCBieSBhIGZhaWxlZAogICAgICAvLyBgcmVsb2FkKClgIG9uIGFuIHVuY2hhbmdlZCByZWNvcmQKICAgICAgbm90Rm91bmQ6IEVtYmVyLksKCiAgICB9LAoKICAgIC8vIEEgcmVjb3JkIGlzIGluIHRoaXMgc3RhdGUgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9jYWxseQogICAgLy8gY3JlYXRlZCBidXQgYmVmb3JlIHRoZSBhZGFwdGVyIGhhcyBpbmRpY2F0ZWQgdGhhdAogICAgLy8gaXQgaGFzIGJlZW4gc2F2ZWQuCiAgICBjcmVhdGVkOiBjcmVhdGVkU3RhdGUsCgogICAgLy8gQSByZWNvcmQgaXMgaW4gdGhpcyBzdGF0ZSBpZiBpdCBoYXMgYWxyZWFkeSBiZWVuCiAgICAvLyBzYXZlZCB0byB0aGUgc2VydmVyLCBidXQgdGhlcmUgYXJlIG5ldyBsb2NhbCBjaGFuZ2VzCiAgICAvLyB0aGF0IGhhdmUgbm90IHlldCBiZWVuIHNhdmVkLgogICAgdXBkYXRlZDogdXBkYXRlZFN0YXRlCiAgfSwKCiAgLy8gQSByZWNvcmQgaXMgaW4gdGhpcyBzdGF0ZSBpZiBpdCB3YXMgZGVsZXRlZCBmcm9tIHRoZSBzdG9yZS4KICBkZWxldGVkOiB7CiAgICBpbml0aWFsU3RhdGU6ICd1bmNvbW1pdHRlZCcsCiAgICBkaXJ0eVR5cGU6ICdkZWxldGVkJywKCiAgICAvLyBGTEFHUwogICAgaXNEZWxldGVkOiB0cnVlLAogICAgaXNMb2FkZWQ6IHRydWUsCiAgICBpc0RpcnR5OiB0cnVlLAoKICAgIC8vIFRSQU5TSVRJT05TCiAgICBzZXR1cDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC51cGRhdGVSZWNvcmRBcnJheXMoKTsKICAgIH0sCgogICAgLy8gU1VCU1RBVEVTCgogICAgLy8gV2hlbiBhIHJlY29yZCBpcyBkZWxldGVkLCBpdCBlbnRlcnMgdGhlIGBzdGFydGAKICAgIC8vIHN0YXRlLiBJdCB3aWxsIGV4aXQgdGhpcyBzdGF0ZSB3aGVuIHRoZSByZWNvcmQKICAgIC8vIHN0YXJ0cyB0byBjb21taXQuCiAgICB1bmNvbW1pdHRlZDogewoKICAgICAgLy8gRVZFTlRTCgogICAgICB3aWxsQ29tbWl0OiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdpbkZsaWdodCcpOwogICAgICB9LAoKICAgICAgcm9sbGJhY2s6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC5yb2xsYmFjaygpOwogICAgICB9LAoKICAgICAgYmVjb21lRGlydHk6IEVtYmVyLkssCiAgICAgIGRlbGV0ZVJlY29yZDogRW1iZXIuSywKCiAgICAgIHJvbGxlZEJhY2s6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2xvYWRlZC5zYXZlZCcpOwogICAgICB9CiAgICB9LAoKICAgIC8vIEFmdGVyIGEgcmVjb3JkIHN0YXJ0cyBjb21taXR0aW5nLCBidXQKICAgIC8vIGJlZm9yZSB0aGUgYWRhcHRlciBpbmRpY2F0ZXMgdGhhdCB0aGUgZGVsZXRpb24KICAgIC8vIGhhcyBzYXZlZCB0byB0aGUgc2VydmVyLCBhIHJlY29yZCBpcyBpbiB0aGUKICAgIC8vIGBpbkZsaWdodGAgc3Vic3RhdGUgb2YgYGRlbGV0ZWRgLgogICAgaW5GbGlnaHQ6IHsKICAgICAgLy8gRkxBR1MKICAgICAgaXNTYXZpbmc6IHRydWUsCgogICAgICAvLyBFVkVOVFMKCiAgICAgIC8vIFRPRE86IE1vcmUgcm9idXN0IHNlbWFudGljcyBhcm91bmQgc2F2ZS13aGlsZS1pbi1mbGlnaHQKICAgICAgd2lsbENvbW1pdDogRW1iZXIuSywKICAgICAgZGlkQ29tbWl0OiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdzYXZlZCcpOwoKICAgICAgICByZWNvcmQuc2VuZCgnaW52b2tlTGlmZWN5Y2xlQ2FsbGJhY2tzJyk7CiAgICAgIH0sCgogICAgICBiZWNhbWVFcnJvcjogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgcmVjb3JkLnRyYW5zaXRpb25UbygndW5jb21taXR0ZWQnKTsKICAgICAgICByZWNvcmQudHJpZ2dlckxhdGVyKCdiZWNhbWVFcnJvcicsIHJlY29yZCk7CiAgICAgIH0KICAgIH0sCgogICAgLy8gT25jZSB0aGUgYWRhcHRlciBpbmRpY2F0ZXMgdGhhdCB0aGUgZGVsZXRpb24gaGFzCiAgICAvLyBiZWVuIHNhdmVkLCB0aGUgcmVjb3JkIGVudGVycyB0aGUgYHNhdmVkYCBzdWJzdGF0ZQogICAgLy8gb2YgYGRlbGV0ZWRgLgogICAgc2F2ZWQ6IHsKICAgICAgLy8gRkxBR1MKICAgICAgaXNEaXJ0eTogZmFsc2UsCgogICAgICBzZXR1cDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgdmFyIHN0b3JlID0gZ2V0KHJlY29yZCwgJ3N0b3JlJyk7CiAgICAgICAgc3RvcmUuZGVtYXRlcmlhbGl6ZVJlY29yZChyZWNvcmQpOwogICAgICB9LAoKICAgICAgaW52b2tlTGlmZWN5Y2xlQ2FsbGJhY2tzOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgICByZWNvcmQudHJpZ2dlckxhdGVyKCdkaWREZWxldGUnLCByZWNvcmQpOwogICAgICAgIHJlY29yZC50cmlnZ2VyTGF0ZXIoJ2RpZENvbW1pdCcsIHJlY29yZCk7CiAgICAgIH0KICAgIH0KICB9LAoKICBpbnZva2VMaWZlY3ljbGVDYWxsYmFja3M6IGZ1bmN0aW9uKHJlY29yZCwgZGlydHlUeXBlKSB7CiAgICBpZiAoZGlydHlUeXBlID09PSAnY3JlYXRlZCcpIHsKICAgICAgcmVjb3JkLnRyaWdnZXJMYXRlcignZGlkQ3JlYXRlJywgcmVjb3JkKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlY29yZC50cmlnZ2VyTGF0ZXIoJ2RpZFVwZGF0ZScsIHJlY29yZCk7CiAgICB9CgogICAgcmVjb3JkLnRyaWdnZXJMYXRlcignZGlkQ29tbWl0JywgcmVjb3JkKTsKICB9Cn07CgpmdW5jdGlvbiB3aXJlU3RhdGUob2JqZWN0LCBwYXJlbnQsIG5hbWUpIHsKICAvKmpzaGludCBwcm90bzp0cnVlKi8KICAvLyBUT0RPOiBVc2UgT2JqZWN0LmNyZWF0ZSBhbmQgY29weSBpbnN0ZWFkCiAgb2JqZWN0ID0gbWl4aW4ocGFyZW50ID8gRW1iZXIuY3JlYXRlKHBhcmVudCkgOiB7fSwgb2JqZWN0KTsKICBvYmplY3QucGFyZW50U3RhdGUgPSBwYXJlbnQ7CiAgb2JqZWN0LnN0YXRlTmFtZSA9IG5hbWU7CgogIGZvciAodmFyIHByb3AgaW4gb2JqZWN0KSB7CiAgICBpZiAoIW9iamVjdC5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCBwcm9wID09PSAncGFyZW50U3RhdGUnIHx8IHByb3AgPT09ICdzdGF0ZU5hbWUnKSB7IGNvbnRpbnVlOyB9CiAgICBpZiAodHlwZW9mIG9iamVjdFtwcm9wXSA9PT0gJ29iamVjdCcpIHsKICAgICAgb2JqZWN0W3Byb3BdID0gd2lyZVN0YXRlKG9iamVjdFtwcm9wXSwgb2JqZWN0LCBuYW1lICsgIi4iICsgcHJvcCk7CiAgICB9CiAgfQoKICByZXR1cm4gb2JqZWN0Owp9CgpSb290U3RhdGUgPSB3aXJlU3RhdGUoUm9vdFN0YXRlLCBudWxsLCAicm9vdCIpOwoKRFMuUm9vdFN0YXRlID0gUm9vdFN0YXRlOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBpc0VtcHR5ID0gRW1iZXIuaXNFbXB0eTsKCi8qKgpAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCi8qKgogIEhvbGRzIHZhbGlkYXRpb24gZXJyb3JzIGZvciBhIGdpdmVuIHJlY29yZCBvcmdhbml6ZWQgYnkgYXR0cmlidXRlIG5hbWVzLgoKICBAY2xhc3MgRXJyb3JzCiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRzIEVtYmVyLk9iamVjdAogIEB1c2VzIEVtYmVyLkVudW1lcmFibGUKICBAdXNlcyBFbWJlci5FdmVudGVkCiAqLwpEUy5FcnJvcnMgPSBFbWJlci5PYmplY3QuZXh0ZW5kKEVtYmVyLkVudW1lcmFibGUsIEVtYmVyLkV2ZW50ZWQsIHsKICAvKioKICAgIFJlZ2lzdGVyIHdpdGggdGFyZ2V0IGhhbmRsZXIKCiAgICBAbWV0aG9kIHJlZ2lzdGVySGFuZGxlcnMKICAgIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQKICAgIEBwYXJhbSB7RnVuY3Rpb259IGJlY2FtZUludmFsaWQKICAgIEBwYXJhbSB7RnVuY3Rpb259IGJlY2FtZVZhbGlkCiAgKi8KICByZWdpc3RlckhhbmRsZXJzOiBmdW5jdGlvbih0YXJnZXQsIGJlY2FtZUludmFsaWQsIGJlY2FtZVZhbGlkKSB7CiAgICB0aGlzLm9uKCdiZWNhbWVJbnZhbGlkJywgdGFyZ2V0LCBiZWNhbWVJbnZhbGlkKTsKICAgIHRoaXMub24oJ2JlY2FtZVZhbGlkJywgdGFyZ2V0LCBiZWNhbWVWYWxpZCk7CiAgfSwKCiAgLyoqCiAgICBAcHJvcGVydHkgZXJyb3JzQnlBdHRyaWJ1dGVOYW1lCiAgICBAdHlwZSB7RW1iZXIuTWFwV2l0aERlZmF1bHR9CiAgICBAcHJpdmF0ZQogICovCiAgZXJyb3JzQnlBdHRyaWJ1dGVOYW1lOiBFbWJlci5yZWR1Y2VDb21wdXRlZCgiY29udGVudCIsIHsKICAgIGluaXRpYWxWYWx1ZTogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBFbWJlci5NYXBXaXRoRGVmYXVsdC5jcmVhdGUoewogICAgICAgIGRlZmF1bHRWYWx1ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gRW1iZXIuQSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIGFkZGVkSXRlbTogZnVuY3Rpb24oZXJyb3JzLCBlcnJvcikgewogICAgICBlcnJvcnMuZ2V0KGVycm9yLmF0dHJpYnV0ZSkucHVzaE9iamVjdChlcnJvcik7CgogICAgICByZXR1cm4gZXJyb3JzOwogICAgfSwKCiAgICByZW1vdmVkSXRlbTogZnVuY3Rpb24oZXJyb3JzLCBlcnJvcikgewogICAgICBlcnJvcnMuZ2V0KGVycm9yLmF0dHJpYnV0ZSkucmVtb3ZlT2JqZWN0KGVycm9yKTsKCiAgICAgIHJldHVybiBlcnJvcnM7CiAgICB9CiAgfSksCgogIC8qKgogICAgUmV0dXJucyBlcnJvcnMgZm9yIGEgZ2l2ZW4gYXR0cmlidXRlCgogICAgQG1ldGhvZCBlcnJvcnNGb3IKICAgIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGUKICAgIEByZXR1cm5zIHtBcnJheX0KICAqLwogIGVycm9yc0ZvcjogZnVuY3Rpb24oYXR0cmlidXRlKSB7CiAgICByZXR1cm4gZ2V0KHRoaXMsICdlcnJvcnNCeUF0dHJpYnV0ZU5hbWUnKS5nZXQoYXR0cmlidXRlKTsKICB9LAoKICAvKioKICAqLwogIG1lc3NhZ2VzOiBFbWJlci5jb21wdXRlZC5tYXBCeSgnY29udGVudCcsICdtZXNzYWdlJyksCgogIC8qKgogICAgQHByb3BlcnR5IGNvbnRlbnQKICAgIEB0eXBlIHtBcnJheX0KICAgIEBwcml2YXRlCiAgKi8KICBjb250ZW50OiBFbWJlci5jb21wdXRlZChmdW5jdGlvbigpIHsKICAgIHJldHVybiBFbWJlci5BKCk7CiAgfSksCgogIC8qKgogICAgQG1ldGhvZCB1bmtub3duUHJvcGVydHkKICAgIEBwcml2YXRlCiAgKi8KICB1bmtub3duUHJvcGVydHk6IGZ1bmN0aW9uKGF0dHJpYnV0ZSkgewogICAgdmFyIGVycm9ycyA9IHRoaXMuZXJyb3JzRm9yKGF0dHJpYnV0ZSk7CiAgICBpZiAoaXNFbXB0eShlcnJvcnMpKSB7IHJldHVybiBudWxsOyB9CiAgICByZXR1cm4gZXJyb3JzOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBuZXh0T2JqZWN0CiAgICBAcHJpdmF0ZQogICovCiAgbmV4dE9iamVjdDogZnVuY3Rpb24oaW5kZXgsIHByZXZpb3VzT2JqZWN0LCBjb250ZXh0KSB7CiAgICByZXR1cm4gZ2V0KHRoaXMsICdjb250ZW50Jykub2JqZWN0QXQoaW5kZXgpOwogIH0sCgogIC8qKgogICAgVG90YWwgbnVtYmVyIG9mIGVycm9ycy4KCiAgICBAcHJvcGVydHkgbGVuZ3RoCiAgICBAdHlwZSB7TnVtYmVyfQogICAgQHJlYWRPbmx5CiAgKi8KICBsZW5ndGg6IEVtYmVyLmNvbXB1dGVkLm9uZVdheSgnY29udGVudC5sZW5ndGgnKS5yZWFkT25seSgpLAoKICAvKioKICAgIEBwcm9wZXJ0eSBpc0VtcHR5CiAgICBAdHlwZSB7Qm9vbGVhbn0KICAgIEByZWFkT25seQogICovCiAgaXNFbXB0eTogRW1iZXIuY29tcHV0ZWQubm90KCdsZW5ndGgnKS5yZWFkT25seSgpLAoKICAvKioKICAgIEFkZHMgZXJyb3IgbWVzc2FnZXMgdG8gYSBnaXZlbiBhdHRyaWJ1dGUgYW5kIHNlbmRzCiAgICBgYmVjYW1lSW52YWxpZGAgZXZlbnQgdG8gdGhlIHJlY29yZC4KCiAgICBAbWV0aG9kIGFkZAogICAgQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZQogICAgQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1lc3NhZ2VzCiAgKi8KICBhZGQ6IGZ1bmN0aW9uKGF0dHJpYnV0ZSwgbWVzc2FnZXMpIHsKICAgIHZhciB3YXNFbXB0eSA9IGdldCh0aGlzLCAnaXNFbXB0eScpOwoKICAgIG1lc3NhZ2VzID0gdGhpcy5fZmluZE9yQ3JlYXRlTWVzc2FnZXMoYXR0cmlidXRlLCBtZXNzYWdlcyk7CiAgICBnZXQodGhpcywgJ2NvbnRlbnQnKS5hZGRPYmplY3RzKG1lc3NhZ2VzKTsKCiAgICB0aGlzLm5vdGlmeVByb3BlcnR5Q2hhbmdlKGF0dHJpYnV0ZSk7CiAgICB0aGlzLmVudW1lcmFibGVDb250ZW50RGlkQ2hhbmdlKCk7CgogICAgaWYgKHdhc0VtcHR5ICYmICFnZXQodGhpcywgJ2lzRW1wdHknKSkgewogICAgICB0aGlzLnRyaWdnZXIoJ2JlY2FtZUludmFsaWQnKTsKICAgIH0KICB9LAoKICAvKioKICAgIEBtZXRob2QgX2ZpbmRPckNyZWF0ZU1lc3NhZ2VzCiAgICBAcHJpdmF0ZQogICovCiAgX2ZpbmRPckNyZWF0ZU1lc3NhZ2VzOiBmdW5jdGlvbihhdHRyaWJ1dGUsIG1lc3NhZ2VzKSB7CiAgICB2YXIgZXJyb3JzID0gdGhpcy5lcnJvcnNGb3IoYXR0cmlidXRlKTsKCiAgICByZXR1cm4gRW1iZXIubWFrZUFycmF5KG1lc3NhZ2VzKS5tYXAoZnVuY3Rpb24obWVzc2FnZSkgewogICAgICByZXR1cm4gZXJyb3JzLmZpbmRCeSgnbWVzc2FnZScsIG1lc3NhZ2UpIHx8IHsKICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSwKICAgICAgICBtZXNzYWdlOiBtZXNzYWdlCiAgICAgIH07CiAgICB9KTsKICB9LAoKICAvKioKICAgIFJlbW92ZXMgYWxsIGVycm9yIG1lc3NhZ2VzIGZyb20gdGhlIGdpdmVuIGF0dHJpYnV0ZSBhbmQgc2VuZHMKICAgIGBiZWNhbWVWYWxpZGAgZXZlbnQgdG8gdGhlIHJlY29yZCBpZiB0aGVyZSBubyBtb3JlIGVycm9ycyBsZWZ0LgoKICAgIEBtZXRob2QgcmVtb3ZlCiAgICBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlCiAgKi8KICByZW1vdmU6IGZ1bmN0aW9uKGF0dHJpYnV0ZSkgewogICAgaWYgKGdldCh0aGlzLCAnaXNFbXB0eScpKSB7IHJldHVybjsgfQoKICAgIHZhciBjb250ZW50ID0gZ2V0KHRoaXMsICdjb250ZW50JykucmVqZWN0QnkoJ2F0dHJpYnV0ZScsIGF0dHJpYnV0ZSk7CiAgICBnZXQodGhpcywgJ2NvbnRlbnQnKS5zZXRPYmplY3RzKGNvbnRlbnQpOwoKICAgIHRoaXMubm90aWZ5UHJvcGVydHlDaGFuZ2UoYXR0cmlidXRlKTsKICAgIHRoaXMuZW51bWVyYWJsZUNvbnRlbnREaWRDaGFuZ2UoKTsKCiAgICBpZiAoZ2V0KHRoaXMsICdpc0VtcHR5JykpIHsKICAgICAgdGhpcy50cmlnZ2VyKCdiZWNhbWVWYWxpZCcpOwogICAgfQogIH0sCgogIC8qKgogICAgUmVtb3ZlcyBhbGwgZXJyb3IgbWVzc2FnZXMgYW5kIHNlbmRzIGBiZWNhbWVWYWxpZGAgZXZlbnQKICAgIHRvIHRoZSByZWNvcmQuCgogICAgQG1ldGhvZCBjbGVhcgogICovCiAgY2xlYXI6IGZ1bmN0aW9uKCkgewogICAgaWYgKGdldCh0aGlzLCAnaXNFbXB0eScpKSB7IHJldHVybjsgfQoKICAgIGdldCh0aGlzLCAnY29udGVudCcpLmNsZWFyKCk7CiAgICB0aGlzLmVudW1lcmFibGVDb250ZW50RGlkQ2hhbmdlKCk7CgogICAgdGhpcy50cmlnZ2VyKCdiZWNhbWVWYWxpZCcpOwogIH0sCgogIC8qKgogICAgQ2hlY2tzIGlmIHRoZXJlIGlzIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgZ2l2ZW4gYXR0cmlidXRlLgoKICAgIEBtZXRob2QgaGFzCiAgICBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlCiAgICBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGVyZSBzb21lIGVycm9ycyBvbiBnaXZlbiBhdHRyaWJ1dGUKICAqLwogIGhhczogZnVuY3Rpb24oYXR0cmlidXRlKSB7CiAgICByZXR1cm4gIWlzRW1wdHkodGhpcy5lcnJvcnNGb3IoYXR0cmlidXRlKSk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQsCiAgICBtZXJnZSA9IEVtYmVyLm1lcmdlLCBvbmNlID0gRW1iZXIucnVuLm9uY2U7Cgp2YXIgcmV0cmlldmVGcm9tQ3VycmVudFN0YXRlID0gRW1iZXIuY29tcHV0ZWQoJ2N1cnJlbnRTdGF0ZScsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICByZXR1cm4gZ2V0KGdldCh0aGlzLCAnY3VycmVudFN0YXRlJyksIGtleSk7Cn0pLnJlYWRPbmx5KCk7CgovKioKCiAgVGhlIG1vZGVsIGNsYXNzIHRoYXQgYWxsIEVtYmVyIERhdGEgcmVjb3JkcyBkZXNjZW5kIGZyb20uCgogIEBjbGFzcyBNb2RlbAogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBFbWJlci5PYmplY3QKICBAdXNlcyBFbWJlci5FdmVudGVkCiovCkRTLk1vZGVsID0gRW1iZXIuT2JqZWN0LmV4dGVuZChFbWJlci5FdmVudGVkLCB7CiAgLyoqCiAgICBJZiB0aGlzIHByb3BlcnR5IGlzIGB0cnVlYCB0aGUgcmVjb3JkIGlzIGluIHRoZSBgZW1wdHlgCiAgICBzdGF0ZS4gRW1wdHkgaXMgdGhlIGZpcnN0IHN0YXRlIGFsbCByZWNvcmRzIGVudGVyIGFmdGVyIHRoZXkgaGF2ZQogICAgYmVlbiBjcmVhdGVkLiBNb3N0IHJlY29yZHMgY3JlYXRlZCBieSB0aGUgc3RvcmUgd2lsbCBxdWlja2x5CiAgICB0cmFuc2l0aW9uIHRvIHRoZSBgbG9hZGluZ2Agc3RhdGUgaWYgZGF0YSBuZWVkcyB0byBiZSBmZXRjaGVkIGZyb20KICAgIHRoZSBzZXJ2ZXIgb3IgdGhlIGBjcmVhdGVkYCBzdGF0ZSBpZiB0aGUgcmVjb3JkIGlzIGNyZWF0ZWQgb24gdGhlCiAgICBjbGllbnQuIEEgcmVjb3JkIGNhbiBhbHNvIGVudGVyIHRoZSBlbXB0eSBzdGF0ZSBpZiB0aGUgYWRhcHRlciBpcwogICAgdW5hYmxlIHRvIGxvY2F0ZSB0aGUgcmVjb3JkLgoKICAgIEBwcm9wZXJ0eSBpc0VtcHR5CiAgICBAdHlwZSB7Qm9vbGVhbn0KICAgIEByZWFkT25seQogICovCiAgaXNFbXB0eTogcmV0cmlldmVGcm9tQ3VycmVudFN0YXRlLAogIC8qKgogICAgSWYgdGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgdGhlIHJlY29yZCBpcyBpbiB0aGUgYGxvYWRpbmdgIHN0YXRlLiBBCiAgICByZWNvcmQgZW50ZXJzIHRoaXMgc3RhdGUgd2hlbiB0aGUgc3RvcmUgYXNrZXMgdGhlIGFkYXB0ZXIgZm9yIGl0cwogICAgZGF0YS4gSXQgcmVtYWlucyBpbiB0aGlzIHN0YXRlIHVudGlsIHRoZSBhZGFwdGVyIHByb3ZpZGVzIHRoZQogICAgcmVxdWVzdGVkIGRhdGEuCgogICAgQHByb3BlcnR5IGlzTG9hZGluZwogICAgQHR5cGUge0Jvb2xlYW59CiAgICBAcmVhZE9ubHkKICAqLwogIGlzTG9hZGluZzogcmV0cmlldmVGcm9tQ3VycmVudFN0YXRlLAogIC8qKgogICAgSWYgdGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgdGhlIHJlY29yZCBpcyBpbiB0aGUgYGxvYWRlZGAgc3RhdGUuIEEKICAgIHJlY29yZCBlbnRlcnMgdGhpcyBzdGF0ZSB3aGVuIGl0cyBkYXRhIGlzIHBvcHVsYXRlZC4gTW9zdCBvZiBhCiAgICByZWNvcmQncyBsaWZlY3ljbGUgaXMgc3BlbnQgaW5zaWRlIHN1YnN0YXRlcyBvZiB0aGUgYGxvYWRlZGAKICAgIHN0YXRlLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICB2YXIgcmVjb3JkID0gc3RvcmUuY3JlYXRlUmVjb3JkKEFwcC5Nb2RlbCk7CiAgICByZWNvcmQuZ2V0KCdpc0xvYWRlZCcpOyAvLyB0cnVlCgogICAgc3RvcmUuZmluZCgnbW9kZWwnLCAxKS50aGVuKGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgIG1vZGVsLmdldCgnaXNMb2FkZWQnKTsgLy8gdHJ1ZQogICAgfSk7CiAgICBgYGAKCiAgICBAcHJvcGVydHkgaXNMb2FkZWQKICAgIEB0eXBlIHtCb29sZWFufQogICAgQHJlYWRPbmx5CiAgKi8KICBpc0xvYWRlZDogcmV0cmlldmVGcm9tQ3VycmVudFN0YXRlLAogIC8qKgogICAgSWYgdGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgdGhlIHJlY29yZCBpcyBpbiB0aGUgYGRpcnR5YCBzdGF0ZS4gVGhlCiAgICByZWNvcmQgaGFzIGxvY2FsIGNoYW5nZXMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBzYXZlZCBieSB0aGUKICAgIGFkYXB0ZXIuIFRoaXMgaW5jbHVkZXMgcmVjb3JkcyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkIChidXQgbm90IHlldAogICAgc2F2ZWQpIG9yIGRlbGV0ZWQuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIHZhciByZWNvcmQgPSBzdG9yZS5jcmVhdGVSZWNvcmQoQXBwLk1vZGVsKTsKICAgIHJlY29yZC5nZXQoJ2lzRGlydHknKTsgLy8gdHJ1ZQoKICAgIHN0b3JlLmZpbmQoJ21vZGVsJywgMSkudGhlbihmdW5jdGlvbihtb2RlbCkgewogICAgICBtb2RlbC5nZXQoJ2lzRGlydHknKTsgLy8gZmFsc2UKICAgICAgbW9kZWwuc2V0KCdmb28nLCAnc29tZSB2YWx1ZScpOwogICAgICBtb2RlbC5zZXQoJ2lzRGlydHknKTsgLy8gdHJ1ZQogICAgfSk7CiAgICBgYGAKCiAgICBAcHJvcGVydHkgaXNEaXJ0eQogICAgQHR5cGUge0Jvb2xlYW59CiAgICBAcmVhZE9ubHkKICAqLwogIGlzRGlydHk6IHJldHJpZXZlRnJvbUN1cnJlbnRTdGF0ZSwKICAvKioKICAgIElmIHRoaXMgcHJvcGVydHkgaXMgYHRydWVgIHRoZSByZWNvcmQgaXMgaW4gdGhlIGBzYXZpbmdgIHN0YXRlLiBBCiAgICByZWNvcmQgZW50ZXJzIHRoZSBzYXZpbmcgc3RhdGUgd2hlbiBgc2F2ZWAgaXMgY2FsbGVkLCBidXQgdGhlCiAgICBhZGFwdGVyIGhhcyBub3QgeWV0IGFja25vd2xlZGdlZCB0aGF0IHRoZSBjaGFuZ2VzIGhhdmUgYmVlbgogICAgcGVyc2lzdGVkIHRvIHRoZSBiYWNrZW5kLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICB2YXIgcmVjb3JkID0gc3RvcmUuY3JlYXRlUmVjb3JkKEFwcC5Nb2RlbCk7CiAgICByZWNvcmQuZ2V0KCdpc1NhdmluZycpOyAvLyBmYWxzZQogICAgdmFyIHByb21pc2UgPSByZWNvcmQuc2F2ZSgpOwogICAgcmVjb3JkLmdldCgnaXNTYXZpbmcnKTsgLy8gdHJ1ZQogICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkgewogICAgICByZWNvcmQuZ2V0KCdpc1NhdmluZycpOyAvLyBmYWxzZQogICAgfSk7CiAgICBgYGAKCiAgICBAcHJvcGVydHkgaXNTYXZpbmcKICAgIEB0eXBlIHtCb29sZWFufQogICAgQHJlYWRPbmx5CiAgKi8KICBpc1NhdmluZzogcmV0cmlldmVGcm9tQ3VycmVudFN0YXRlLAogIC8qKgogICAgSWYgdGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgdGhlIHJlY29yZCBpcyBpbiB0aGUgYGRlbGV0ZWRgIHN0YXRlCiAgICBhbmQgaGFzIGJlZW4gbWFya2VkIGZvciBkZWxldGlvbi4gV2hlbiBgaXNEZWxldGVkYCBpcyB0cnVlIGFuZAogICAgYGlzRGlydHlgIGlzIHRydWUsIHRoZSByZWNvcmQgaXMgZGVsZXRlZCBsb2NhbGx5IGJ1dCB0aGUgZGVsZXRpb24KICAgIHdhcyBub3QgeWV0IHBlcnNpc3RlZC4gV2hlbiBgaXNTYXZpbmdgIGlzIHRydWUsIHRoZSBjaGFuZ2UgaXMKICAgIGluLWZsaWdodC4gV2hlbiBib3RoIGBpc0RpcnR5YCBhbmQgYGlzU2F2aW5nYCBhcmUgZmFsc2UsIHRoZQogICAgY2hhbmdlIGhhcyBwZXJzaXN0ZWQuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIHZhciByZWNvcmQgPSBzdG9yZS5jcmVhdGVSZWNvcmQoQXBwLk1vZGVsKTsKICAgIHJlY29yZC5nZXQoJ2lzRGVsZXRlZCcpOyAvLyBmYWxzZQogICAgcmVjb3JkLmRlbGV0ZVJlY29yZCgpOwogICAgcmVjb3JkLmdldCgnaXNEZWxldGVkJyk7IC8vIHRydWUKICAgIGBgYAoKICAgIEBwcm9wZXJ0eSBpc0RlbGV0ZWQKICAgIEB0eXBlIHtCb29sZWFufQogICAgQHJlYWRPbmx5CiAgKi8KICBpc0RlbGV0ZWQ6IHJldHJpZXZlRnJvbUN1cnJlbnRTdGF0ZSwKICAvKioKICAgIElmIHRoaXMgcHJvcGVydHkgaXMgYHRydWVgIHRoZSByZWNvcmQgaXMgaW4gdGhlIGBuZXdgIHN0YXRlLiBBCiAgICByZWNvcmQgd2lsbCBiZSBpbiB0aGUgYG5ld2Agc3RhdGUgd2hlbiBpdCBoYXMgYmVlbiBjcmVhdGVkIG9uIHRoZQogICAgY2xpZW50IGFuZCB0aGUgYWRhcHRlciBoYXMgbm90IHlldCByZXBvcnQgdGhhdCBpdCB3YXMgc3VjY2Vzc2Z1bGx5CiAgICBzYXZlZC4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIHJlY29yZCA9IHN0b3JlLmNyZWF0ZVJlY29yZChBcHAuTW9kZWwpOwogICAgcmVjb3JkLmdldCgnaXNOZXcnKTsgLy8gdHJ1ZQoKICAgIHN0b3JlLmZpbmQoJ21vZGVsJywgMSkudGhlbihmdW5jdGlvbihtb2RlbCkgewogICAgICBtb2RlbC5nZXQoJ2lzTmV3Jyk7IC8vIGZhbHNlCiAgICB9KTsKICAgIGBgYAoKICAgIEBwcm9wZXJ0eSBpc05ldwogICAgQHR5cGUge0Jvb2xlYW59CiAgICBAcmVhZE9ubHkKICAqLwogIGlzTmV3OiByZXRyaWV2ZUZyb21DdXJyZW50U3RhdGUsCiAgLyoqCiAgICBJZiB0aGlzIHByb3BlcnR5IGlzIGB0cnVlYCB0aGUgcmVjb3JkIGlzIGluIHRoZSBgdmFsaWRgIHN0YXRlLiBBCiAgICByZWNvcmQgd2lsbCBiZSBpbiB0aGUgYHZhbGlkYCBzdGF0ZSB3aGVuIG5vIGNsaWVudC1zaWRlCiAgICB2YWxpZGF0aW9ucyBoYXZlIGZhaWxlZCBhbmQgdGhlIGFkYXB0ZXIgZGlkIG5vdCByZXBvcnQgYW55CiAgICBzZXJ2ZXItc2lkZSB2YWxpZGF0aW9uIGZhaWx1cmVzLgoKICAgIEBwcm9wZXJ0eSBpc1ZhbGlkCiAgICBAdHlwZSB7Qm9vbGVhbn0KICAgIEByZWFkT25seQogICovCiAgaXNWYWxpZDogcmV0cmlldmVGcm9tQ3VycmVudFN0YXRlLAogIC8qKgogICAgSWYgdGhlIHJlY29yZCBpcyBpbiB0aGUgZGlydHkgc3RhdGUgdGhpcyBwcm9wZXJ0eSB3aWxsIHJlcG9ydCB3aGF0CiAgICBraW5kIG9mIGNoYW5nZSBoYXMgY2F1c2VkIGl0IHRvIG1vdmUgaW50byB0aGUgZGlydHkKICAgIHN0YXRlLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOgoKICAgIC0gYGNyZWF0ZWRgIFRoZSByZWNvcmQgaGFzIGJlZW4gY3JlYXRlZCBieSB0aGUgY2xpZW50IGFuZCBub3QgeWV0IHNhdmVkIHRvIHRoZSBhZGFwdGVyLgogICAgLSBgdXBkYXRlZGAgVGhlIHJlY29yZCBoYXMgYmVlbiB1cGRhdGVkIGJ5IHRoZSBjbGllbnQgYW5kIG5vdCB5ZXQgc2F2ZWQgdG8gdGhlIGFkYXB0ZXIuCiAgICAtIGBkZWxldGVkYCBUaGUgcmVjb3JkIGhhcyBiZWVuIGRlbGV0ZWQgYnkgdGhlIGNsaWVudCBhbmQgbm90IHlldCBzYXZlZCB0byB0aGUgYWRhcHRlci4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIHJlY29yZCA9IHN0b3JlLmNyZWF0ZVJlY29yZChBcHAuTW9kZWwpOwogICAgcmVjb3JkLmdldCgnZGlydHlUeXBlJyk7IC8vICdjcmVhdGVkJwogICAgYGBgCgogICAgQHByb3BlcnR5IGRpcnR5VHlwZQogICAgQHR5cGUge1N0cmluZ30KICAgIEByZWFkT25seQogICovCiAgZGlydHlUeXBlOiByZXRyaWV2ZUZyb21DdXJyZW50U3RhdGUsCgogIC8qKgogICAgSWYgYHRydWVgIHRoZSBhZGFwdGVyIHJlcG9ydGVkIHRoYXQgaXQgd2FzIHVuYWJsZSB0byBzYXZlIGxvY2FsCiAgICBjaGFuZ2VzIHRvIHRoZSBiYWNrZW5kLiBUaGlzIG1heSBhbHNvIHJlc3VsdCBpbiB0aGUgcmVjb3JkIGhhdmluZwogICAgaXRzIGBpc1ZhbGlkYCBwcm9wZXJ0eSBiZWNvbWUgZmFsc2UgaWYgdGhlIGFkYXB0ZXIgcmVwb3J0ZWQgdGhhdAogICAgc2VydmVyLXNpZGUgdmFsaWRhdGlvbnMgZmFpbGVkLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICByZWNvcmQuZ2V0KCdpc0Vycm9yJyk7IC8vIGZhbHNlCiAgICByZWNvcmQuc2V0KCdmb28nLCAnaW52YWxpZCB2YWx1ZScpOwogICAgcmVjb3JkLnNhdmUoKS50aGVuKG51bGwsIGZ1bmN0aW9uKCkgewogICAgICByZWNvcmQuZ2V0KCdpc0Vycm9yJyk7IC8vIHRydWUKICAgIH0pOwogICAgYGBgCgogICAgQHByb3BlcnR5IGlzRXJyb3IKICAgIEB0eXBlIHtCb29sZWFufQogICAgQHJlYWRPbmx5CiAgKi8KICBpc0Vycm9yOiBmYWxzZSwKICAvKioKICAgIElmIGB0cnVlYCB0aGUgc3RvcmUgaXMgYXR0ZW1wdGluZyB0byByZWxvYWQgdGhlIHJlY29yZCBmb3JtIHRoZSBhZGFwdGVyLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICByZWNvcmQuZ2V0KCdpc1JlbG9hZGluZycpOyAvLyBmYWxzZQogICAgcmVjb3JkLnJlbG9hZCgpOwogICAgcmVjb3JkLmdldCgnaXNSZWxvYWRpbmcnKTsgLy8gdHJ1ZQogICAgYGBgCgogICAgQHByb3BlcnR5IGlzUmVsb2FkaW5nCiAgICBAdHlwZSB7Qm9vbGVhbn0KICAgIEByZWFkT25seQogICovCiAgaXNSZWxvYWRpbmc6IGZhbHNlLAoKICAvKioKICAgIFRoZSBgY2xpZW50SWRgIHByb3BlcnR5IGlzIGEgdHJhbnNpZW50IG51bWVyaWNhbCBpZGVudGlmaWVyCiAgICBnZW5lcmF0ZWQgYXQgcnVudGltZSBieSB0aGUgZGF0YSBzdG9yZS4gSXQgaXMgaW1wb3J0YW50CiAgICBwcmltYXJpbHkgYmVjYXVzZSBuZXdseSBjcmVhdGVkIG9iamVjdHMgbWF5IG5vdCB5ZXQgaGF2ZSBhbgogICAgZXh0ZXJuYWxseSBnZW5lcmF0ZWQgaWQuCgogICAgQHByb3BlcnR5IGNsaWVudElkCiAgICBAcHJpdmF0ZQogICAgQHR5cGUge051bWJlcnxTdHJpbmd9CiAgKi8KICBjbGllbnRJZDogbnVsbCwKICAvKioKICAgIEFsbCBlbWJlciBtb2RlbHMgaGF2ZSBhbiBpZCBwcm9wZXJ0eS4gVGhpcyBpcyBhbiBpZGVudGlmaWVyCiAgICBtYW5hZ2VkIGJ5IGFuIGV4dGVybmFsIHNvdXJjZS4gVGhlc2UgYXJlIGFsd2F5cyBjb2VyY2VkIHRvIGJlCiAgICBzdHJpbmdzIGJlZm9yZSBiZWluZyB1c2VkIGludGVybmFsbHkuIE5vdGUgd2hlbiBkZWNsYXJpbmcgdGhlCiAgICBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsIGl0IGlzIGFuIGVycm9yIHRvIGRlY2xhcmUgYW4gaWQKICAgIGF0dHJpYnV0ZS4KCiAgICBgYGBqYXZhc2NyaXB0CiAgICB2YXIgcmVjb3JkID0gc3RvcmUuY3JlYXRlUmVjb3JkKEFwcC5Nb2RlbCk7CiAgICByZWNvcmQuZ2V0KCdpZCcpOyAvLyBudWxsCgogICAgc3RvcmUuZmluZCgnbW9kZWwnLCAxKS50aGVuKGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgIG1vZGVsLmdldCgnaWQnKTsgLy8gJzEnCiAgICB9KTsKICAgIGBgYAoKICAgIEBwcm9wZXJ0eSBpZAogICAgQHR5cGUge1N0cmluZ30KICAqLwogIGlkOiBudWxsLAogIHRyYW5zYWN0aW9uOiBudWxsLAogIC8qKgogICAgQHByb3BlcnR5IGN1cnJlbnRTdGF0ZQogICAgQHByaXZhdGUKICAgIEB0eXBlIHtPYmplY3R9CiAgKi8KICBjdXJyZW50U3RhdGU6IG51bGwsCiAgLyoqCiAgICBXaGVuIHRoZSByZWNvcmQgaXMgaW4gdGhlIGBpbnZhbGlkYCBzdGF0ZSB0aGlzIG9iamVjdCB3aWxsIGNvbnRhaW4KICAgIGFueSBlcnJvcnMgcmV0dXJuZWQgYnkgdGhlIGFkYXB0ZXIuIFdoZW4gcHJlc2VudCB0aGUgZXJyb3JzIGhhc2gKICAgIHR5cGljYWxseSBjb250YWlucyBrZXlzIGNvcmVzcG9uZGluZyB0byB0aGUgaW52YWxpZCBwcm9wZXJ0eSBuYW1lcwogICAgYW5kIHZhbHVlcyB3aGljaCBhcmUgYW4gYXJyYXkgb2YgZXJyb3IgbWVzc2FnZXMuCgogICAgYGBgamF2YXNjcmlwdAogICAgcmVjb3JkLmdldCgnZXJyb3JzLmxlbmd0aCcpOyAvLyAwCiAgICByZWNvcmQuc2V0KCdmb28nLCAnaW52YWxpZCB2YWx1ZScpOwogICAgcmVjb3JkLnNhdmUoKS50aGVuKG51bGwsIGZ1bmN0aW9uKCkgewogICAgICByZWNvcmQuZ2V0KCdlcnJvcnMnKS5nZXQoJ2ZvbycpOyAvLyBbJ2ZvbyBzaG91bGQgYmUgYSBudW1iZXIuJ10KICAgIH0pOwogICAgYGBgCgogICAgQHByb3BlcnR5IGVycm9ycwogICAgQHR5cGUge09iamVjdH0KICAqLwogIGVycm9yczogbnVsbCwKCiAgLyoqCiAgICBDcmVhdGUgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZWNvcmQsIHVzaW5nIHRoZSBzZXJpYWxpemF0aW9uCiAgICBzdHJhdGVneSBvZiB0aGUgc3RvcmUncyBhZGFwdGVyLgoKICAgYHNlcmlhbGl6ZWAgdGFrZXMgYW4gb3B0aW9uYWwgaGFzaCBhcyBhIHBhcmFtZXRlciwgY3VycmVudGx5CiAgICBzdXBwb3J0ZWQgb3B0aW9ucyBhcmU6CgogICAtIGBpbmNsdWRlSWRgOiBgdHJ1ZWAgaWYgdGhlIHJlY29yZCdzIElEIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUKICAgICAgSlNPTiByZXByZXNlbnRhdGlvbi4KCiAgICBAbWV0aG9kIHNlcmlhbGl6ZQogICAgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICAgIEByZXR1cm5zIHtPYmplY3R9IGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHByaW1pdGl2ZSBKU09OIHZhbHVlcyBvbmx5CiAgKi8KICBzZXJpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgIHZhciBzdG9yZSA9IGdldCh0aGlzLCAnc3RvcmUnKTsKICAgIHJldHVybiBzdG9yZS5zZXJpYWxpemUodGhpcywgb3B0aW9ucyk7CiAgfSwKCiAgLyoqCiAgICBVc2UgW0RTLkpTT05TZXJpYWxpemVyXShEUy5KU09OU2VyaWFsaXplci5odG1sKSB0bwogICAgZ2V0IHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGEgcmVjb3JkLgoKICAgIGB0b0pTT05gIHRha2VzIGFuIG9wdGlvbmFsIGhhc2ggYXMgYSBwYXJhbWV0ZXIsIGN1cnJlbnRseQogICAgc3VwcG9ydGVkIG9wdGlvbnMgYXJlOgoKICAgIC0gYGluY2x1ZGVJZGA6IGB0cnVlYCBpZiB0aGUgcmVjb3JkJ3MgSUQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZQogICAgICBKU09OIHJlcHJlc2VudGF0aW9uLgoKICAgIEBtZXRob2QgdG9KU09OCiAgICBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogICAgQHJldHVybnMge09iamVjdH0gQSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3QuCiAgKi8KICB0b0pTT046IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgIC8vIGNvbnRhaW5lciBpcyBmb3IgbGF6eSB0cmFuc2Zvcm0gbG9va3VwcwogICAgdmFyIHNlcmlhbGl6ZXIgPSBEUy5KU09OU2VyaWFsaXplci5jcmVhdGUoeyBjb250YWluZXI6IHRoaXMuY29udGFpbmVyIH0pOwogICAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplKHRoaXMsIG9wdGlvbnMpOwogIH0sCgogIC8qKgogICAgRmlyZWQgd2hlbiB0aGUgcmVjb3JkIGlzIGxvYWRlZCBmcm9tIHRoZSBzZXJ2ZXIuCgogICAgQGV2ZW50IGRpZExvYWQKICAqLwogIGRpZExvYWQ6IEVtYmVyLkssCgogIC8qKgogICAgRmlyZWQgd2hlbiB0aGUgcmVjb3JkIGlzIHVwZGF0ZWQuCgogICAgQGV2ZW50IGRpZFVwZGF0ZQogICovCiAgZGlkVXBkYXRlOiBFbWJlci5LLAoKICAvKioKICAgIEZpcmVkIHdoZW4gdGhlIHJlY29yZCBpcyBjcmVhdGVkLgoKICAgIEBldmVudCBkaWRDcmVhdGUKICAqLwogIGRpZENyZWF0ZTogRW1iZXIuSywKCiAgLyoqCiAgICBGaXJlZCB3aGVuIHRoZSByZWNvcmQgaXMgZGVsZXRlZC4KCiAgICBAZXZlbnQgZGlkRGVsZXRlCiAgKi8KICBkaWREZWxldGU6IEVtYmVyLkssCgogIC8qKgogICAgRmlyZWQgd2hlbiB0aGUgcmVjb3JkIGJlY29tZXMgaW52YWxpZC4KCiAgICBAZXZlbnQgYmVjYW1lSW52YWxpZAogICovCiAgYmVjYW1lSW52YWxpZDogRW1iZXIuSywKCiAgLyoqCiAgICBGaXJlZCB3aGVuIHRoZSByZWNvcmQgZW50ZXJzIHRoZSBlcnJvciBzdGF0ZS4KCiAgICBAZXZlbnQgYmVjYW1lRXJyb3IKICAqLwogIGJlY2FtZUVycm9yOiBFbWJlci5LLAoKICAvKioKICAgIEBwcm9wZXJ0eSBkYXRhCiAgICBAcHJpdmF0ZQogICAgQHR5cGUge09iamVjdH0KICAqLwogIGRhdGE6IEVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKCkgewogICAgdGhpcy5fZGF0YSA9IHRoaXMuX2RhdGEgfHwge307CiAgICByZXR1cm4gdGhpcy5fZGF0YTsKICB9KS5wcm9wZXJ0eSgpLAoKICBfZGF0YTogbnVsbCwKCiAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICBzZXQodGhpcywgJ2N1cnJlbnRTdGF0ZScsIERTLlJvb3RTdGF0ZS5lbXB0eSk7CiAgICB2YXIgZXJyb3JzID0gRFMuRXJyb3JzLmNyZWF0ZSgpOwogICAgZXJyb3JzLnJlZ2lzdGVySGFuZGxlcnModGhpcywgZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuc2VuZCgnYmVjYW1lSW52YWxpZCcpOwogICAgfSwgZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuc2VuZCgnYmVjYW1lVmFsaWQnKTsKICAgIH0pOwogICAgc2V0KHRoaXMsICdlcnJvcnMnLCBlcnJvcnMpOwogICAgdGhpcy5fc3VwZXIoKTsKICAgIHRoaXMuX3NldHVwKCk7CiAgfSwKCiAgX3NldHVwOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuX2NoYW5nZXNUb1N5bmMgPSB7fTsKICAgIHRoaXMuX2RlZmVycmVkVHJpZ2dlcnMgPSBbXTsKICAgIHRoaXMuX2RhdGEgPSB7fTsKICAgIHRoaXMuX2F0dHJpYnV0ZXMgPSB7fTsKICAgIHRoaXMuX2luRmxpZ2h0QXR0cmlidXRlcyA9IHt9OwogICAgdGhpcy5fcmVsYXRpb25zaGlwcyA9IHt9OwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBzZW5kCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtTdHJpbmd9IG5hbWUKICAgIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0CiAgKi8KICBzZW5kOiBmdW5jdGlvbihuYW1lLCBjb250ZXh0KSB7CiAgICB2YXIgY3VycmVudFN0YXRlID0gZ2V0KHRoaXMsICdjdXJyZW50U3RhdGUnKTsKCiAgICBpZiAoIWN1cnJlbnRTdGF0ZVtuYW1lXSkgewogICAgICB0aGlzLl91bmhhbmRsZWRFdmVudChjdXJyZW50U3RhdGUsIG5hbWUsIGNvbnRleHQpOwogICAgfQoKICAgIHJldHVybiBjdXJyZW50U3RhdGVbbmFtZV0odGhpcywgY29udGV4dCk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHRyYW5zaXRpb25UbwogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAgKi8KICB0cmFuc2l0aW9uVG86IGZ1bmN0aW9uKG5hbWUpIHsKICAgIC8vIFBPU1NJQkxFIFRPRE86IFJlbW92ZSB0aGlzIGNvZGUgYW5kIHJlcGxhY2Ugd2l0aAogICAgLy8gYWx3YXlzIGhhdmluZyBkaXJlY3QgcmVmZXJlbmNlcyB0byBzdGF0ZSBvYmplY3RzCgogICAgdmFyIHBpdm90TmFtZSA9IG5hbWUuc3BsaXQoIi4iLCAxKSwKICAgICAgICBjdXJyZW50U3RhdGUgPSBnZXQodGhpcywgJ2N1cnJlbnRTdGF0ZScpLAogICAgICAgIHN0YXRlID0gY3VycmVudFN0YXRlOwoKICAgIGRvIHsKICAgICAgaWYgKHN0YXRlLmV4aXQpIHsgc3RhdGUuZXhpdCh0aGlzKTsgfQogICAgICBzdGF0ZSA9IHN0YXRlLnBhcmVudFN0YXRlOwogICAgfSB3aGlsZSAoIXN0YXRlLmhhc093blByb3BlcnR5KHBpdm90TmFtZSkpOwoKICAgIHZhciBwYXRoID0gbmFtZS5zcGxpdCgiLiIpOwoKICAgIHZhciBzZXR1cHMgPSBbXSwgZW50ZXJzID0gW10sIGksIGw7CgogICAgZm9yIChpPTAsIGw9cGF0aC5sZW5ndGg7IGk8bDsgaSsrKSB7CiAgICAgIHN0YXRlID0gc3RhdGVbcGF0aFtpXV07CgogICAgICBpZiAoc3RhdGUuZW50ZXIpIHsgZW50ZXJzLnB1c2goc3RhdGUpOyB9CiAgICAgIGlmIChzdGF0ZS5zZXR1cCkgeyBzZXR1cHMucHVzaChzdGF0ZSk7IH0KICAgIH0KCiAgICBmb3IgKGk9MCwgbD1lbnRlcnMubGVuZ3RoOyBpPGw7IGkrKykgewogICAgICBlbnRlcnNbaV0uZW50ZXIodGhpcyk7CiAgICB9CgogICAgc2V0KHRoaXMsICdjdXJyZW50U3RhdGUnLCBzdGF0ZSk7CgogICAgZm9yIChpPTAsIGw9c2V0dXBzLmxlbmd0aDsgaTxsOyBpKyspIHsKICAgICAgc2V0dXBzW2ldLnNldHVwKHRoaXMpOwogICAgfQoKICAgIHRoaXMudXBkYXRlUmVjb3JkQXJyYXlzTGF0ZXIoKTsKICB9LAoKICBfdW5oYW5kbGVkRXZlbnQ6IGZ1bmN0aW9uKHN0YXRlLCBuYW1lLCBjb250ZXh0KSB7CiAgICB2YXIgZXJyb3JNZXNzYWdlID0gIkF0dGVtcHRlZCB0byBoYW5kbGUgZXZlbnQgYCIgKyBuYW1lICsgImAgIjsKICAgIGVycm9yTWVzc2FnZSAgICArPSAib24gIiArIFN0cmluZyh0aGlzKSArICIgd2hpbGUgaW4gc3RhdGUgIjsKICAgIGVycm9yTWVzc2FnZSAgICArPSBzdGF0ZS5zdGF0ZU5hbWUgKyAiLiAiOwoKICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgZXJyb3JNZXNzYWdlICArPSAiQ2FsbGVkIHdpdGggIiArIEVtYmVyLmluc3BlY3QoY29udGV4dCkgKyAiLiI7CiAgICB9CgogICAgdGhyb3cgbmV3IEVtYmVyLkVycm9yKGVycm9yTWVzc2FnZSk7CiAgfSwKCiAgd2l0aFRyYW5zYWN0aW9uOiBmdW5jdGlvbihmbikgewogICAgdmFyIHRyYW5zYWN0aW9uID0gZ2V0KHRoaXMsICd0cmFuc2FjdGlvbicpOwogICAgaWYgKHRyYW5zYWN0aW9uKSB7IGZuKHRyYW5zYWN0aW9uKTsgfQogIH0sCgogIC8qKgogICAgQG1ldGhvZCBsb2FkaW5nRGF0YQogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgbG9hZGluZ0RhdGE6IGZ1bmN0aW9uKHByb21pc2UpIHsKICAgIHRoaXMuc2VuZCgnbG9hZGluZ0RhdGEnLCBwcm9taXNlKTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgbG9hZGVkRGF0YQogICAgQHByaXZhdGUKICAqLwogIGxvYWRlZERhdGE6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5zZW5kKCdsb2FkZWREYXRhJyk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIG5vdEZvdW5kCiAgICBAcHJpdmF0ZQogICovCiAgbm90Rm91bmQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5zZW5kKCdub3RGb3VuZCcpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBwdXNoZWREYXRhCiAgICBAcHJpdmF0ZQogICovCiAgcHVzaGVkRGF0YTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnNlbmQoJ3B1c2hlZERhdGEnKTsKICB9LAoKICAvKioKICAgIE1hcmtzIHRoZSByZWNvcmQgYXMgZGVsZXRlZCBidXQgZG9lcyBub3Qgc2F2ZSBpdC4gWW91IG11c3QgY2FsbAogICAgYHNhdmVgIGFmdGVyd2FyZHMgaWYgeW91IHdhbnQgdG8gcGVyc2lzdCBpdC4gWW91IG1pZ2h0IHVzZSB0aGlzCiAgICBtZXRob2QgaWYgeW91IHdhbnQgdG8gYWxsb3cgdGhlIHVzZXIgdG8gc3RpbGwgYHJvbGxiYWNrKClgIGEKICAgIGRlbGV0ZSBhZnRlciBpdCB3YXMgbWFkZS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLk1vZGVsRGVsZXRlUm91dGUgPSBFbWJlci5Sb3V0ZS5leHRlbmQoewogICAgICBhY3Rpb25zOiB7CiAgICAgICAgc29mdERlbGV0ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICB0aGlzLmdldCgnbW9kZWwnKS5kZWxldGVSZWNvcmQoKTsKICAgICAgICB9LAogICAgICAgIGNvbmZpcm06IGZ1bmN0aW9uKCkgewogICAgICAgICAgdGhpcy5nZXQoJ21vZGVsJykuc2F2ZSgpOwogICAgICAgIH0sCiAgICAgICAgdW5kbzogZnVuY3Rpb24oKSB7CiAgICAgICAgICB0aGlzLmdldCgnbW9kZWwnKS5yb2xsYmFjaygpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIGRlbGV0ZVJlY29yZAogICovCiAgZGVsZXRlUmVjb3JkOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuc2VuZCgnZGVsZXRlUmVjb3JkJyk7CiAgfSwKCiAgLyoqCiAgICBTYW1lIGFzIGBkZWxldGVSZWNvcmRgLCBidXQgc2F2ZXMgdGhlIHJlY29yZCBpbW1lZGlhdGVseS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLk1vZGVsRGVsZXRlUm91dGUgPSBFbWJlci5Sb3V0ZS5leHRlbmQoewogICAgICBhY3Rpb25zOiB7CiAgICAgICAgZGVsZXRlOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBjb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyOwogICAgICAgICAgdGhpcy5nZXQoJ21vZGVsJykuZGVzdHJveVJlY29yZCgpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIudHJhbnNpdGlvblRvUm91dGUoJ21vZGVsLmluZGV4Jyk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBkZXN0cm95UmVjb3JkCiAgICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIGFkYXB0ZXIgcmV0dXJucwogICAgc3VjY2Vzc2Z1bGx5IG9yIHJlamVjdGVkIGlmIHRoZSBhZGFwdGVyIHJldHVybnMgd2l0aCBhbiBlcnJvci4KICAqLwogIGRlc3Ryb3lSZWNvcmQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5kZWxldGVSZWNvcmQoKTsKICAgIHJldHVybiB0aGlzLnNhdmUoKTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgdW5sb2FkUmVjb3JkCiAgICBAcHJpdmF0ZQogICovCiAgdW5sb2FkUmVjb3JkOiBmdW5jdGlvbigpIHsKICAgIEVtYmVyLmFzc2VydCgiWW91IGNhbiBvbmx5IHVubG9hZCBhIGxvYWRlZCwgbm9uLWRpcnR5IHJlY29yZC4iLCAhZ2V0KHRoaXMsICdpc0RpcnR5JykpOwoKICAgIHRoaXMuc2VuZCgndW5sb2FkUmVjb3JkJyk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGNsZWFyUmVsYXRpb25zaGlwcwogICAgQHByaXZhdGUKICAqLwogIGNsZWFyUmVsYXRpb25zaGlwczogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmVhY2hSZWxhdGlvbnNoaXAoZnVuY3Rpb24obmFtZSwgcmVsYXRpb25zaGlwKSB7CiAgICAgIGlmIChyZWxhdGlvbnNoaXAua2luZCA9PT0gJ2JlbG9uZ3NUbycpIHsKICAgICAgICBzZXQodGhpcywgbmFtZSwgbnVsbCk7CiAgICAgIH0gZWxzZSBpZiAocmVsYXRpb25zaGlwLmtpbmQgPT09ICdoYXNNYW55JykgewogICAgICAgIHZhciBoYXNNYW55ID0gdGhpcy5fcmVsYXRpb25zaGlwc1tyZWxhdGlvbnNoaXAubmFtZV07CiAgICAgICAgaWYgKGhhc01hbnkpIHsgaGFzTWFueS5jbGVhcigpOyB9CiAgICAgIH0KICAgIH0sIHRoaXMpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCB1cGRhdGVSZWNvcmRBcnJheXMKICAgIEBwcml2YXRlCiAgKi8KICB1cGRhdGVSZWNvcmRBcnJheXM6IGZ1bmN0aW9uKCkgewogICAgZ2V0KHRoaXMsICdzdG9yZScpLmRhdGFXYXNVcGRhdGVkKHRoaXMuY29uc3RydWN0b3IsIHRoaXMpOwogIH0sCgogIC8qKgogICAgUmV0dXJucyBhbiBvYmplY3QsIHdob3NlIGtleXMgYXJlIGNoYW5nZWQgcHJvcGVydGllcywgYW5kIHZhbHVlIGlzCiAgICBhbiBbb2xkUHJvcCwgbmV3UHJvcF0gYXJyYXkuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5NYXNjb3QgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgICBuYW1lOiBhdHRyKCdzdHJpbmcnKQogICAgfSk7CgogICAgdmFyIHBlcnNvbiA9IHN0b3JlLmNyZWF0ZVJlY29yZCgncGVyc29uJyk7CiAgICBwZXJzb24uY2hhbmdlZEF0dHJpYnV0ZXMoKTsgLy8ge30KICAgIHBlcnNvbi5zZXQoJ25hbWUnLCAnVG9tc3RlcicpOwogICAgcGVyc29uLmNoYW5nZWRBdHRyaWJ1dGVzKCk7IC8vIHtuYW1lOiBbdW5kZWZpbmVkLCAnVG9tc3RlciddfQogICAgYGBgCgogICAgQG1ldGhvZCBjaGFuZ2VkQXR0cmlidXRlcwogICAgQHJldHVybiB7T2JqZWN0fSBhbiBvYmplY3QsIHdob3NlIGtleXMgYXJlIGNoYW5nZWQgcHJvcGVydGllcywKICAgICAgYW5kIHZhbHVlIGlzIGFuIFtvbGRQcm9wLCBuZXdQcm9wXSBhcnJheS4KICAqLwogIGNoYW5nZWRBdHRyaWJ1dGVzOiBmdW5jdGlvbigpIHsKICAgIHZhciBvbGREYXRhID0gZ2V0KHRoaXMsICdfZGF0YScpLAogICAgICAgIG5ld0RhdGEgPSBnZXQodGhpcywgJ19hdHRyaWJ1dGVzJyksCiAgICAgICAgZGlmZkRhdGEgPSB7fSwKICAgICAgICBwcm9wOwoKICAgIGZvciAocHJvcCBpbiBuZXdEYXRhKSB7CiAgICAgIGRpZmZEYXRhW3Byb3BdID0gW29sZERhdGFbcHJvcF0sIG5ld0RhdGFbcHJvcF1dOwogICAgfQoKICAgIHJldHVybiBkaWZmRGF0YTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgYWRhcHRlcldpbGxDb21taXQKICAgIEBwcml2YXRlCiAgKi8KICBhZGFwdGVyV2lsbENvbW1pdDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnNlbmQoJ3dpbGxDb21taXQnKTsKICB9LAoKICAvKioKICAgIElmIHRoZSBhZGFwdGVyIGRpZCBub3QgcmV0dXJuIGEgaGFzaCBpbiByZXNwb25zZSB0byBhIGNvbW1pdCwKICAgIG1lcmdlIHRoZSBjaGFuZ2VkIGF0dHJpYnV0ZXMgYW5kIHJlbGF0aW9uc2hpcHMgaW50byB0aGUgZXhpc3RpbmcKICAgIHNhdmVkIGRhdGEuCgogICAgQG1ldGhvZCBhZGFwdGVyRGlkQ29tbWl0CiAgKi8KICBhZGFwdGVyRGlkQ29tbWl0OiBmdW5jdGlvbihkYXRhKSB7CiAgICBzZXQodGhpcywgJ2lzRXJyb3InLCBmYWxzZSk7CgogICAgaWYgKGRhdGEpIHsKICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7CiAgICB9IGVsc2UgewogICAgICBFbWJlci5taXhpbih0aGlzLl9kYXRhLCB0aGlzLl9pbkZsaWdodEF0dHJpYnV0ZXMpOwogICAgfQoKICAgIHRoaXMuX2luRmxpZ2h0QXR0cmlidXRlcyA9IHt9OwoKICAgIHRoaXMuc2VuZCgnZGlkQ29tbWl0Jyk7CiAgICB0aGlzLnVwZGF0ZVJlY29yZEFycmF5c0xhdGVyKCk7CgogICAgaWYgKCFkYXRhKSB7IHJldHVybjsgfQoKICAgIHRoaXMuc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpIHsKICAgICAgdGhpcy5ub3RpZnlQcm9wZXJ0eUNoYW5nZSgnZGF0YScpOwogICAgfSk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGFkYXB0ZXJEaWREaXJ0eQogICAgQHByaXZhdGUKICAqLwogIGFkYXB0ZXJEaWREaXJ0eTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnNlbmQoJ2JlY29tZURpcnR5Jyk7CiAgICB0aGlzLnVwZGF0ZVJlY29yZEFycmF5c0xhdGVyKCk7CiAgfSwKCiAgZGF0YURpZENoYW5nZTogRW1iZXIub2JzZXJ2ZXIoZnVuY3Rpb24oKSB7CiAgICB0aGlzLnJlbG9hZEhhc01hbnlzKCk7CiAgfSwgJ2RhdGEnKSwKCiAgcmVsb2FkSGFzTWFueXM6IGZ1bmN0aW9uKCkgewogICAgdmFyIHJlbGF0aW9uc2hpcHMgPSBnZXQodGhpcy5jb25zdHJ1Y3RvciwgJ3JlbGF0aW9uc2hpcHNCeU5hbWUnKTsKICAgIHRoaXMudXBkYXRlUmVjb3JkQXJyYXlzTGF0ZXIoKTsKICAgIHJlbGF0aW9uc2hpcHMuZm9yRWFjaChmdW5jdGlvbihuYW1lLCByZWxhdGlvbnNoaXApIHsKICAgICAgaWYgKHRoaXMuX2RhdGEubGlua3MgJiYgdGhpcy5fZGF0YS5saW5rc1tuYW1lXSkgeyByZXR1cm47IH0KICAgICAgaWYgKHJlbGF0aW9uc2hpcC5raW5kID09PSAnaGFzTWFueScpIHsKICAgICAgICB0aGlzLmhhc01hbnlEaWRDaGFuZ2UocmVsYXRpb25zaGlwLmtleSk7CiAgICAgIH0KICAgIH0sIHRoaXMpOwogIH0sCgogIGhhc01hbnlEaWRDaGFuZ2U6IGZ1bmN0aW9uKGtleSkgewogICAgdmFyIGhhc01hbnkgPSB0aGlzLl9yZWxhdGlvbnNoaXBzW2tleV07CgogICAgaWYgKGhhc01hbnkpIHsKICAgICAgdmFyIHJlY29yZHMgPSB0aGlzLl9kYXRhW2tleV0gfHwgW107CgogICAgICBzZXQoaGFzTWFueSwgJ2NvbnRlbnQnLCBFbWJlci5BKHJlY29yZHMpKTsKICAgICAgc2V0KGhhc01hbnksICdpc0xvYWRlZCcsIHRydWUpOwogICAgICBoYXNNYW55LnRyaWdnZXIoJ2RpZExvYWQnKTsKICAgIH0KICB9LAoKICAvKioKICAgIEBtZXRob2QgdXBkYXRlUmVjb3JkQXJyYXlzTGF0ZXIKICAgIEBwcml2YXRlCiAgKi8KICB1cGRhdGVSZWNvcmRBcnJheXNMYXRlcjogZnVuY3Rpb24oKSB7CiAgICBFbWJlci5ydW4ub25jZSh0aGlzLCB0aGlzLnVwZGF0ZVJlY29yZEFycmF5cyk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHNldHVwRGF0YQogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAgICBAcGFyYW0ge0Jvb2xlYW59IHBhcnRpYWwgdGhlIGRhdGEgc2hvdWxkIGJlIG1lcmdlZCBpbnRvCiAgICAgIHRoZSBleGlzdGluZyBkYXRhLCBub3QgcmVwbGFjZSBpdC4KICAqLwogIHNldHVwRGF0YTogZnVuY3Rpb24oZGF0YSwgcGFydGlhbCkgewogICAgaWYgKHBhcnRpYWwpIHsKICAgICAgRW1iZXIubWVyZ2UodGhpcy5fZGF0YSwgZGF0YSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9kYXRhID0gZGF0YTsKICAgIH0KCiAgICB2YXIgcmVsYXRpb25zaGlwcyA9IHRoaXMuX3JlbGF0aW9uc2hpcHM7CgogICAgdGhpcy5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9uKG5hbWUsIHJlbCkgewogICAgICBpZiAoZGF0YS5saW5rcyAmJiBkYXRhLmxpbmtzW25hbWVdKSB7IHJldHVybjsgfQogICAgICBpZiAocmVsLm9wdGlvbnMuYXN5bmMpIHsgcmVsYXRpb25zaGlwc1tuYW1lXSA9IG51bGw7IH0KICAgIH0pOwoKICAgIGlmIChkYXRhKSB7IHRoaXMucHVzaGVkRGF0YSgpOyB9CgogICAgdGhpcy5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0aW9uKCkgewogICAgICB0aGlzLm5vdGlmeVByb3BlcnR5Q2hhbmdlKCdkYXRhJyk7CiAgICB9KTsKICB9LAoKICBtYXRlcmlhbGl6ZUlkOiBmdW5jdGlvbihpZCkgewogICAgc2V0KHRoaXMsICdpZCcsIGlkKTsKICB9LAoKICBtYXRlcmlhbGl6ZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpIHsKICAgIEVtYmVyLmFzc2VydCgiTXVzdCBwYXNzIGEgaGFzaCBvZiBhdHRyaWJ1dGVzIHRvIG1hdGVyaWFsaXplQXR0cmlidXRlcyIsICEhYXR0cmlidXRlcyk7CiAgICBtZXJnZSh0aGlzLl9kYXRhLCBhdHRyaWJ1dGVzKTsKICB9LAoKICBtYXRlcmlhbGl6ZUF0dHJpYnV0ZTogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgIHRoaXMuX2RhdGFbbmFtZV0gPSB2YWx1ZTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgdXBkYXRlSGFzTWFueQogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAgICBAcGFyYW0ge0FycmF5fSByZWNvcmRzCiAgKi8KICB1cGRhdGVIYXNNYW55OiBmdW5jdGlvbihuYW1lLCByZWNvcmRzKSB7CiAgICB0aGlzLl9kYXRhW25hbWVdID0gcmVjb3JkczsKICAgIHRoaXMuaGFzTWFueURpZENoYW5nZShuYW1lKTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgdXBkYXRlQmVsb25nc1RvCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtTdHJpbmd9IG5hbWUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICovCiAgdXBkYXRlQmVsb25nc1RvOiBmdW5jdGlvbihuYW1lLCByZWNvcmQpIHsKICAgIHRoaXMuX2RhdGFbbmFtZV0gPSByZWNvcmQ7CiAgfSwKCiAgLyoqCiAgICBJZiB0aGUgbW9kZWwgYGlzRGlydHlgIHRoaXMgZnVuY3Rpb24gd2lsbCB3aGljaCBkaXNjYXJkIGFueSB1bnNhdmVkCiAgICBjaGFuZ2VzCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIHJlY29yZC5nZXQoJ25hbWUnKTsgLy8gJ1VudGl0bGVkIERvY3VtZW50JwogICAgcmVjb3JkLnNldCgnbmFtZScsICdEb2MgMScpOwogICAgcmVjb3JkLmdldCgnbmFtZScpOyAvLyAnRG9jIDEnCiAgICByZWNvcmQucm9sbGJhY2soKTsKICAgIHJlY29yZC5nZXQoJ25hbWUnKTsgLy8gJ1VudGl0bGVkIERvY3VtZW50JwogICAgYGBgCgogICAgQG1ldGhvZCByb2xsYmFjawogICovCiAgcm9sbGJhY2s6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5fYXR0cmlidXRlcyA9IHt9OwoKICAgIGlmIChnZXQodGhpcywgJ2lzRXJyb3InKSkgewogICAgICB0aGlzLl9pbkZsaWdodEF0dHJpYnV0ZXMgPSB7fTsKICAgICAgc2V0KHRoaXMsICdpc0Vycm9yJywgZmFsc2UpOwogICAgfQoKICAgIGlmICghZ2V0KHRoaXMsICdpc1ZhbGlkJykpIHsKICAgICAgdGhpcy5faW5GbGlnaHRBdHRyaWJ1dGVzID0ge307CiAgICB9CgogICAgdGhpcy5zZW5kKCdyb2xsZWRCYWNrJyk7CgogICAgdGhpcy5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0aW9uKCkgewogICAgICB0aGlzLm5vdGlmeVByb3BlcnR5Q2hhbmdlKCdkYXRhJyk7CiAgICB9KTsKICB9LAoKICB0b1N0cmluZ0V4dGVuc2lvbjogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZ2V0KHRoaXMsICdpZCcpOwogIH0sCgogIC8qKgogICAgVGhlIGdvYWwgb2YgdGhpcyBtZXRob2QgaXMgdG8gdGVtcG9yYXJpbHkgZGlzYWJsZSBzcGVjaWZpYyBvYnNlcnZlcnMKICAgIHRoYXQgdGFrZSBhY3Rpb24gaW4gcmVzcG9uc2UgdG8gYXBwbGljYXRpb24gY2hhbmdlcy4KCiAgICBUaGlzIGFsbG93cyB0aGUgc3lzdGVtIHRvIG1ha2UgY2hhbmdlcyAoc3VjaCBhcyBtYXRlcmlhbGl6YXRpb24gYW5kCiAgICByb2xsYmFjaykgdGhhdCBzaG91bGQgbm90IHRyaWdnZXIgc2Vjb25kYXJ5IGJlaGF2aW9yIChzdWNoIGFzIHNldHRpbmcgYW4KICAgIGludmVyc2UgcmVsYXRpb25zaGlwIG9yIG1hcmtpbmcgcmVjb3JkcyBhcyBkaXJ0eSkuCgogICAgVGhlIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIHdpbGwgbGlrZWx5IGNoYW5nZSBhcyBFbWJlciBwcm9wZXIgcHJvdmlkZXMKICAgIGJldHRlciBpbmZyYXN0cnVjdHVyZSBmb3Igc3VzcGVuZGluZyBncm91cHMgb2Ygb2JzZXJ2ZXJzLCBhbmQgaWYgQXJyYXkKICAgIG9ic2VydmF0aW9uIGJlY29tZXMgbW9yZSB1bmlmaWVkIHdpdGggcmVndWxhciBvYnNlcnZlcnMuCgogICAgQG1ldGhvZCBzdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIGNhbGxiYWNrCiAgICBAcGFyYW0gYmluZGluZwogICovCiAgc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVyczogZnVuY3Rpb24oY2FsbGJhY2ssIGJpbmRpbmcpIHsKICAgIHZhciBvYnNlcnZlcnMgPSBnZXQodGhpcy5jb25zdHJ1Y3RvciwgJ3JlbGF0aW9uc2hpcE5hbWVzJykuYmVsb25nc1RvOwogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIHRyeSB7CiAgICAgIHRoaXMuX3N1c3BlbmRlZFJlbGF0aW9uc2hpcHMgPSB0cnVlOwogICAgICBFbWJlci5fc3VzcGVuZE9ic2VydmVycyhzZWxmLCBvYnNlcnZlcnMsIG51bGwsICdiZWxvbmdzVG9EaWRDaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICBFbWJlci5fc3VzcGVuZEJlZm9yZU9ic2VydmVycyhzZWxmLCBvYnNlcnZlcnMsIG51bGwsICdiZWxvbmdzVG9XaWxsQ2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBjYWxsYmFjay5jYWxsKGJpbmRpbmcgfHwgc2VsZik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSBmaW5hbGx5IHsKICAgICAgdGhpcy5fc3VzcGVuZGVkUmVsYXRpb25zaGlwcyA9IGZhbHNlOwogICAgfQogIH0sCgogIC8qKgogICAgU2F2ZSB0aGUgcmVjb3JkIGFuZCBwZXJzaXN0IGFueSBjaGFuZ2VzIHRvIHRoZSByZWNvcmQgdG8gYW4KICAgIGV4dGVuYWwgc291cmNlIHZpYSB0aGUgYWRhcHRlci4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgcmVjb3JkLnNldCgnbmFtZScsICdUb21zdGVyJyk7CiAgICByZWNvcmQuc2F2ZSgpLnRoZW4oZnVuY3Rpb24oKXsKICAgICAgLy8gU3VjY2VzcyBjYWxsYmFjawogICAgfSwgZnVuY3Rpb24oKSB7CiAgICAgIC8vIEVycm9yIGNhbGxiYWNrCiAgICB9KTsKICAgIGBgYAogICAgQG1ldGhvZCBzYXZlCiAgICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIGFkYXB0ZXIgcmV0dXJucwogICAgc3VjY2Vzc2Z1bGx5IG9yIHJlamVjdGVkIGlmIHRoZSBhZGFwdGVyIHJldHVybnMgd2l0aCBhbiBlcnJvci4KICAqLwogIHNhdmU6IGZ1bmN0aW9uKCkgewogICAgdmFyIHByb21pc2VMYWJlbCA9ICJEUzogTW9kZWwjc2F2ZSAiICsgdGhpczsKICAgIHZhciByZXNvbHZlciA9IEVtYmVyLlJTVlAuZGVmZXIocHJvbWlzZUxhYmVsKTsKCiAgICB0aGlzLmdldCgnc3RvcmUnKS5zY2hlZHVsZVNhdmUodGhpcywgcmVzb2x2ZXIpOwogICAgdGhpcy5faW5GbGlnaHRBdHRyaWJ1dGVzID0gdGhpcy5fYXR0cmlidXRlczsKICAgIHRoaXMuX2F0dHJpYnV0ZXMgPSB7fTsKCiAgICByZXR1cm4gRFMuUHJvbWlzZU9iamVjdC5jcmVhdGUoeyBwcm9taXNlOiByZXNvbHZlci5wcm9taXNlIH0pOwogIH0sCgogIC8qKgogICAgUmVsb2FkIHRoZSByZWNvcmQgZnJvbSB0aGUgYWRhcHRlci4KCiAgICBUaGlzIHdpbGwgb25seSB3b3JrIGlmIHRoZSByZWNvcmQgaGFzIGFscmVhZHkgZmluaXNoZWQgbG9hZGluZwogICAgYW5kIGhhcyBub3QgeWV0IGJlZW4gbW9kaWZpZWQgKGBpc0xvYWRlZGAgYnV0IG5vdCBgaXNEaXJ0eWAsCiAgICBvciBgaXNTYXZpbmdgKS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLk1vZGVsVmlld1JvdXRlID0gRW1iZXIuUm91dGUuZXh0ZW5kKHsKICAgICAgYWN0aW9uczogewogICAgICAgIHJlbG9hZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICB0aGlzLmdldCgnbW9kZWwnKS5yZWxvYWQoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCByZWxvYWQKICAgIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmVjb3JkIHdoZW4gdGhlCiAgICBhZGFwdGVyIHJldHVybnMgc3VjY2Vzc2Z1bGx5IG9yIHJlamVjdGVkIGlmIHRoZSBhZGFwdGVyIHJldHVybnMKICAgIHdpdGggYW4gZXJyb3IuCiAgKi8KICByZWxvYWQ6IGZ1bmN0aW9uKCkgewogICAgc2V0KHRoaXMsICdpc1JlbG9hZGluZycsIHRydWUpOwoKICAgIHZhciAgcmVjb3JkID0gdGhpczsKCiAgICB2YXIgcHJvbWlzZUxhYmVsID0gIkRTOiBNb2RlbCNyZWxvYWQgb2YgIiArIHRoaXM7CiAgICB2YXIgcHJvbWlzZSA9IG5ldyBFbWJlci5SU1ZQLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSl7CiAgICAgICByZWNvcmQuc2VuZCgncmVsb2FkUmVjb3JkJywgcmVzb2x2ZSk7CiAgICB9LCBwcm9taXNlTGFiZWwpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgIHJlY29yZC5zZXQoJ2lzUmVsb2FkaW5nJywgZmFsc2UpOwogICAgICByZWNvcmQuc2V0KCdpc0Vycm9yJywgZmFsc2UpOwogICAgICByZXR1cm4gcmVjb3JkOwogICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgIHJlY29yZC5zZXQoJ2lzRXJyb3InLCB0cnVlKTsKICAgICAgdGhyb3cgcmVhc29uOwogICAgfSwgIkRTOiBNb2RlbCNyZWxvYWQgY29tcGxldGUsIHVwZGF0ZSBmbGFncyIpOwoKICAgIHJldHVybiBEUy5Qcm9taXNlT2JqZWN0LmNyZWF0ZSh7IHByb21pc2U6IHByb21pc2UgfSk7CiAgfSwKCiAgLy8gRk9SIFVTRSBEVVJJTkcgQ09NTUlUIFBST0NFU1MKCiAgYWRhcHRlckRpZFVwZGF0ZUF0dHJpYnV0ZTogZnVuY3Rpb24oYXR0cmlidXRlTmFtZSwgdmFsdWUpIHsKCiAgICAvLyBJZiBhIHZhbHVlIGlzIHBhc3NlZCBpbiwgdXBkYXRlIHRoZSBpbnRlcm5hbCBhdHRyaWJ1dGVzIGFuZCBjbGVhcgogICAgLy8gdGhlIGF0dHJpYnV0ZSBjYWNoZSBzbyBpdCBwaWNrcyB1cCB0aGUgbmV3IHZhbHVlLiBPdGhlcndpc2UsCiAgICAvLyBjb2xsYXBzZSB0aGUgY3VycmVudCB2YWx1ZSBpbnRvIHRoZSBpbnRlcm5hbCBhdHRyaWJ1dGVzIGJlY2F1c2UKICAgIC8vIHRoZSBhZGFwdGVyIGhhcyBhY2tub3dsZWRnZWQgaXQuCiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgewogICAgICB0aGlzLl9kYXRhW2F0dHJpYnV0ZU5hbWVdID0gdmFsdWU7CiAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlDaGFuZ2UoYXR0cmlidXRlTmFtZSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9kYXRhW2F0dHJpYnV0ZU5hbWVdID0gdGhpcy5faW5GbGlnaHRBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdOwogICAgfQoKICAgIHRoaXMudXBkYXRlUmVjb3JkQXJyYXlzTGF0ZXIoKTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgYWRhcHRlckRpZEludmFsaWRhdGUKICAgIEBwcml2YXRlCiAgKi8KICBhZGFwdGVyRGlkSW52YWxpZGF0ZTogZnVuY3Rpb24oZXJyb3JzKSB7CiAgICB2YXIgcmVjb3JkRXJyb3JzID0gZ2V0KHRoaXMsICdlcnJvcnMnKTsKICAgIGZ1bmN0aW9uIGFkZEVycm9yKG5hbWUpIHsKICAgICAgaWYgKGVycm9yc1tuYW1lXSkgewogICAgICAgIHJlY29yZEVycm9ycy5hZGQobmFtZSwgZXJyb3JzW25hbWVdKTsKICAgICAgfQogICAgfQoKICAgIHRoaXMuZWFjaEF0dHJpYnV0ZShhZGRFcnJvcik7CiAgICB0aGlzLmVhY2hSZWxhdGlvbnNoaXAoYWRkRXJyb3IpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBhZGFwdGVyRGlkRXJyb3IKICAgIEBwcml2YXRlCiAgKi8KICBhZGFwdGVyRGlkRXJyb3I6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5zZW5kKCdiZWNhbWVFcnJvcicpOwogICAgc2V0KHRoaXMsICdpc0Vycm9yJywgdHJ1ZSk7CiAgfSwKCiAgLyoqCiAgICBPdmVycmlkZSB0aGUgZGVmYXVsdCBldmVudCBmaXJpbmcgZnJvbSBFbWJlci5FdmVudGVkIHRvCiAgICBhbHNvIGNhbGwgbWV0aG9kcyB3aXRoIHRoZSBnaXZlbiBuYW1lLgoKICAgIEBtZXRob2QgdHJpZ2dlcgogICAgQHByaXZhdGUKICAgIEBwYXJhbSBuYW1lCiAgKi8KICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7CiAgICBFbWJlci50cnlJbnZva2UodGhpcywgbmFtZSwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIHRoaXMuX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfSwKCiAgdHJpZ2dlckxhdGVyOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuX2RlZmVycmVkVHJpZ2dlcnMucHVzaChhcmd1bWVudHMpOwogICAgb25jZSh0aGlzLCAnX3RyaWdnZXJEZWZlcnJlZFRyaWdnZXJzJyk7CiAgfSwKCiAgX3RyaWdnZXJEZWZlcnJlZFRyaWdnZXJzOiBmdW5jdGlvbigpIHsKICAgIGZvciAodmFyIGk9MCwgbD10aGlzLl9kZWZlcnJlZFRyaWdnZXJzLmxlbmd0aDsgaTxsOyBpKyspIHsKICAgICAgdGhpcy50cmlnZ2VyLmFwcGx5KHRoaXMsIHRoaXMuX2RlZmVycmVkVHJpZ2dlcnNbaV0pOwogICAgfQoKICAgIHRoaXMuX2RlZmVycmVkVHJpZ2dlcnMgPSBbXTsKICB9Cn0pOwoKRFMuTW9kZWwucmVvcGVuQ2xhc3MoewoKICAvKioKICAgIEFsaWFzIERTLk1vZGVsJ3MgYGNyZWF0ZWAgbWV0aG9kIHRvIGBfY3JlYXRlYC4gVGhpcyBhbGxvd3MgdXMgdG8gY3JlYXRlIERTLk1vZGVsCiAgICBpbnN0YW5jZXMgZnJvbSB3aXRoaW4gdGhlIHN0b3JlLCBidXQgaWYgZW5kIHVzZXJzIGFjY2lkZW50YWxseSBjYWxsIGBjcmVhdGUoKWAKICAgIChpbnN0ZWFkIG9mIGBjcmVhdGVSZWNvcmQoKWApLCB3ZSBjYW4gcmFpc2UgYW4gZXJyb3IuCgogICAgQG1ldGhvZCBfY3JlYXRlCiAgICBAcHJpdmF0ZQogICAgQHN0YXRpYwogICovCiAgX2NyZWF0ZTogRFMuTW9kZWwuY3JlYXRlLAoKICAvKioKICAgIE92ZXJyaWRlIHRoZSBjbGFzcycgYGNyZWF0ZSgpYCBtZXRob2QgdG8gcmFpc2UgYW4gZXJyb3IuIFRoaXMKICAgIHByZXZlbnRzIGVuZCB1c2VycyBmcm9tIGluYWR2ZXJ0ZW50bHkgY2FsbGluZyBgY3JlYXRlKClgIGluc3RlYWQKICAgIG9mIGBjcmVhdGVSZWNvcmQoKWAuIFRoZSBzdG9yZSBpcyBzdGlsbCBhYmxlIHRvIGNyZWF0ZSBpbnN0YW5jZXMKICAgIGJ5IGNhbGxpbmcgdGhlIGBfY3JlYXRlKClgIG1ldGhvZC4gVG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIGEKICAgIGBEUy5Nb2RlbGAgdXNlIFtzdG9yZS5jcmVhdGVSZWNvcmRdKERTLlN0b3JlLmh0bWwjbWV0aG9kX2NyZWF0ZVJlY29yZCkuCgogICAgQG1ldGhvZCBjcmVhdGUKICAgIEBwcml2YXRlCiAgICBAc3RhdGljCiAgKi8KICBjcmVhdGU6IGZ1bmN0aW9uKCkgewogICAgdGhyb3cgbmV3IEVtYmVyLkVycm9yKCJZb3Ugc2hvdWxkIG5vdCBjYWxsIGBjcmVhdGVgIG9uIGEgbW9kZWwuIEluc3RlYWQsIGNhbGwgYHN0b3JlLmNyZWF0ZVJlY29yZGAgd2l0aCB0aGUgYXR0cmlidXRlcyB5b3Ugd291bGQgbGlrZSB0byBzZXQuIik7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0OwoKLyoqCiAgQGNsYXNzIE1vZGVsCiAgQG5hbWVzcGFjZSBEUwoqLwpEUy5Nb2RlbC5yZW9wZW5DbGFzcyh7CiAgLyoqCiAgICBBIG1hcCB3aG9zZSBrZXlzIGFyZSB0aGUgYXR0cmlidXRlcyBvZiB0aGUgbW9kZWwgKHByb3BlcnRpZXMKICAgIGRlc2NyaWJlZCBieSBEUy5hdHRyKSBhbmQgd2hvc2UgdmFsdWVzIGFyZSB0aGUgbWV0YSBvYmplY3QgZm9yIHRoZQogICAgcHJvcGVydHkuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKCiAgICBBcHAuUGVyc29uID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgICAgZmlyc3ROYW1lOiBhdHRyKCdzdHJpbmcnKSwKICAgICAgbGFzdE5hbWU6IGF0dHIoJ3N0cmluZycpLAogICAgICBiaXJ0aGRheTogYXR0cignZGF0ZScpCiAgICB9KTsKCiAgICB2YXIgYXR0cmlidXRlcyA9IEVtYmVyLmdldChBcHAuUGVyc29uLCAnYXR0cmlidXRlcycpCgogICAgYXR0cmlidXRlcy5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUsIG1ldGEpIHsKICAgICAgY29uc29sZS5sb2cobmFtZSwgbWV0YSk7CiAgICB9KTsKCiAgICAvLyBwcmludHM6CiAgICAvLyBmaXJzdE5hbWUge3R5cGU6ICJzdHJpbmciLCBpc0F0dHJpYnV0ZTogdHJ1ZSwgb3B0aW9uczogT2JqZWN0LCBwYXJlbnRUeXBlOiBmdW5jdGlvbiwgbmFtZTogImZpcnN0TmFtZSJ9CiAgICAvLyBsYXN0TmFtZSB7dHlwZTogInN0cmluZyIsIGlzQXR0cmlidXRlOiB0cnVlLCBvcHRpb25zOiBPYmplY3QsIHBhcmVudFR5cGU6IGZ1bmN0aW9uLCBuYW1lOiAibGFzdE5hbWUifQogICAgLy8gYmlydGhkYXkge3R5cGU6ICJkYXRlIiwgaXNBdHRyaWJ1dGU6IHRydWUsIG9wdGlvbnM6IE9iamVjdCwgcGFyZW50VHlwZTogZnVuY3Rpb24sIG5hbWU6ICJiaXJ0aGRheSJ9CiAgICBgYGAKCiAgICBAcHJvcGVydHkgYXR0cmlidXRlcwogICAgQHN0YXRpYwogICAgQHR5cGUge0VtYmVyLk1hcH0KICAgIEByZWFkT25seQogICovCiAgYXR0cmlidXRlczogRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oKSB7CiAgICB2YXIgbWFwID0gRW1iZXIuTWFwLmNyZWF0ZSgpOwoKICAgIHRoaXMuZWFjaENvbXB1dGVkUHJvcGVydHkoZnVuY3Rpb24obmFtZSwgbWV0YSkgewogICAgICBpZiAobWV0YS5pc0F0dHJpYnV0ZSkgewogICAgICAgIEVtYmVyLmFzc2VydCgiWW91IG1heSBub3Qgc2V0IGBpZGAgYXMgYW4gYXR0cmlidXRlIG9uIHlvdXIgbW9kZWwuIFBsZWFzZSByZW1vdmUgYW55IGxpbmVzIHRoYXQgbG9vayBsaWtlOiBgaWQ6IERTLmF0dHIoJzx0eXBlPicpYCBmcm9tICIgKyB0aGlzLnRvU3RyaW5nKCksIG5hbWUgIT09ICdpZCcpOwoKICAgICAgICBtZXRhLm5hbWUgPSBuYW1lOwogICAgICAgIG1hcC5zZXQobmFtZSwgbWV0YSk7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBtYXA7CiAgfSksCgogIC8qKgogICAgQSBtYXAgd2hvc2Uga2V5cyBhcmUgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIG1vZGVsIChwcm9wZXJ0aWVzCiAgICBkZXNjcmliZWQgYnkgRFMuYXR0cikgYW5kIHdob3NlIHZhbHVlcyBhcmUgdHlwZSBvZiB0cmFuc2Zvcm1hdGlvbgogICAgYXBwbGllZCB0byBlYWNoIGF0dHJpYnV0ZS4gVGhpcyBtYXAgZG9lcyBub3QgaW5jbHVkZSBhbnkKICAgIGF0dHJpYnV0ZXMgdGhhdCBkbyBub3QgaGF2ZSBhbiB0cmFuc2Zvcm1hdGlvbiB0eXBlLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuUGVyc29uID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgICAgZmlyc3ROYW1lOiBhdHRyKCksCiAgICAgIGxhc3ROYW1lOiBhdHRyKCdzdHJpbmcnKSwKICAgICAgYmlydGhkYXk6IGF0dHIoJ2RhdGUnKQogICAgfSk7CgogICAgdmFyIHRyYW5zZm9ybWVkQXR0cmlidXRlcyA9IEVtYmVyLmdldChBcHAuUGVyc29uLCAndHJhbnNmb3JtZWRBdHRyaWJ1dGVzJykKCiAgICB0cmFuc2Zvcm1lZEF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCwgdHlwZSkgewogICAgICBjb25zb2xlLmxvZyhmaWVsZCwgdHlwZSk7CiAgICB9KTsKCiAgICAvLyBwcmludHM6CiAgICAvLyBsYXN0TmFtZSBzdHJpbmcKICAgIC8vIGJpcnRoZGF5IGRhdGUKICAgIGBgYAoKICAgIEBwcm9wZXJ0eSB0cmFuc2Zvcm1lZEF0dHJpYnV0ZXMKICAgIEBzdGF0aWMKICAgIEB0eXBlIHtFbWJlci5NYXB9CiAgICBAcmVhZE9ubHkKICAqLwogIHRyYW5zZm9ybWVkQXR0cmlidXRlczogRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oKSB7CiAgICB2YXIgbWFwID0gRW1iZXIuTWFwLmNyZWF0ZSgpOwoKICAgIHRoaXMuZWFjaEF0dHJpYnV0ZShmdW5jdGlvbihrZXksIG1ldGEpIHsKICAgICAgaWYgKG1ldGEudHlwZSkgewogICAgICAgIG1hcC5zZXQoa2V5LCBtZXRhLnR5cGUpOwogICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gbWFwOwogIH0pLAoKICAvKioKICAgIEl0ZXJhdGVzIHRocm91Z2ggdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIG1vZGVsLCBjYWxsaW5nIHRoZSBwYXNzZWQgZnVuY3Rpb24gb24gZWFjaAogICAgYXR0cmlidXRlLgoKICAgIFRoZSBjYWxsYmFjayBtZXRob2QgeW91IHByb3ZpZGUgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBzaWduYXR1cmUgKGFsbAogICAgcGFyYW1ldGVycyBhcmUgb3B0aW9uYWwpOgoKICAgIGBgYGphdmFzY3JpcHQKICAgIGZ1bmN0aW9uKG5hbWUsIG1ldGEpOwogICAgYGBgCgogICAgLSBgbmFtZWAgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnQgcHJvcGVydHkgaW4gdGhlIGl0ZXJhdGlvbgogICAgLSBgbWV0YWAgdGhlIG1ldGEgb2JqZWN0IGZvciB0aGUgYXR0cmlidXRlIHByb3BlcnR5IGluIHRoZSBpdGVyYXRpb24KCiAgICBOb3RlIHRoYXQgaW4gYWRkaXRpb24gdG8gYSBjYWxsYmFjaywgeW91IGNhbiBhbHNvIHBhc3MgYW4gb3B0aW9uYWwgdGFyZ2V0CiAgICBvYmplY3QgdGhhdCB3aWxsIGJlIHNldCBhcyBgdGhpc2Agb24gdGhlIGNvbnRleHQuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5QZXJzb24gPSBEUy5Nb2RlbC5leHRlbmQoewogICAgICBmaXJzdE5hbWU6IGF0dHIoJ3N0cmluZycpLAogICAgICBsYXN0TmFtZTogYXR0cignc3RyaW5nJyksCiAgICAgIGJpcnRoZGF5OiBhdHRyKCdkYXRlJykKICAgIH0pOwoKICAgIEFwcC5QZXJzb24uZWFjaEF0dHJpYnV0ZShmdW5jdGlvbihuYW1lLCBtZXRhKSB7CiAgICAgIGNvbnNvbGUubG9nKG5hbWUsIG1ldGEpOwogICAgfSk7CgogICAgLy8gcHJpbnRzOgogICAgLy8gZmlyc3ROYW1lIHt0eXBlOiAic3RyaW5nIiwgaXNBdHRyaWJ1dGU6IHRydWUsIG9wdGlvbnM6IE9iamVjdCwgcGFyZW50VHlwZTogZnVuY3Rpb24sIG5hbWU6ICJmaXJzdE5hbWUifQogICAgLy8gbGFzdE5hbWUge3R5cGU6ICJzdHJpbmciLCBpc0F0dHJpYnV0ZTogdHJ1ZSwgb3B0aW9uczogT2JqZWN0LCBwYXJlbnRUeXBlOiBmdW5jdGlvbiwgbmFtZTogImxhc3ROYW1lIn0KICAgIC8vIGJpcnRoZGF5IHt0eXBlOiAiZGF0ZSIsIGlzQXR0cmlidXRlOiB0cnVlLCBvcHRpb25zOiBPYmplY3QsIHBhcmVudFR5cGU6IGZ1bmN0aW9uLCBuYW1lOiAiYmlydGhkYXkifQogICBgYGAKCiAgICBAbWV0aG9kIGVhY2hBdHRyaWJ1dGUKICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBleGVjdXRlCiAgICBAcGFyYW0ge09iamVjdH0gW3RhcmdldF0gVGhlIHRhcmdldCBvYmplY3QgdG8gdXNlCiAgICBAc3RhdGljCiAgKi8KICBlYWNoQXR0cmlidXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYmluZGluZykgewogICAgZ2V0KHRoaXMsICdhdHRyaWJ1dGVzJykuZm9yRWFjaChmdW5jdGlvbihuYW1lLCBtZXRhKSB7CiAgICAgIGNhbGxiYWNrLmNhbGwoYmluZGluZywgbmFtZSwgbWV0YSk7CiAgICB9LCBiaW5kaW5nKTsKICB9LAoKICAvKioKICAgIEl0ZXJhdGVzIHRocm91Z2ggdGhlIHRyYW5zZm9ybWVkQXR0cmlidXRlcyBvZiB0aGUgbW9kZWwsIGNhbGxpbmcKICAgIHRoZSBwYXNzZWQgZnVuY3Rpb24gb24gZWFjaCBhdHRyaWJ1dGUuIE5vdGUgdGhlIGNhbGxiYWNrIHdpbGwgbm90IGJlCiAgICBjYWxsZWQgZm9yIGFueSBhdHRyaWJ1dGVzIHRoYXQgZG8gbm90IGhhdmUgYW4gdHJhbnNmb3JtYXRpb24gdHlwZS4KCiAgICBUaGUgY2FsbGJhY2sgbWV0aG9kIHlvdSBwcm92aWRlIHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgc2lnbmF0dXJlIChhbGwKICAgIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsKToKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBmdW5jdGlvbihuYW1lLCB0eXBlKTsKICAgIGBgYAoKICAgIC0gYG5hbWVgIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHByb3BlcnR5IGluIHRoZSBpdGVyYXRpb24KICAgIC0gYHR5cGVgIGEgdHJpbmcgY29udHJpbmluZyB0aGUgbmFtZSBvZiB0aGUgdHlwZSBvZiB0cmFuc2Zvcm1lZAogICAgICBhcHBsaWVkIHRvIHRoZSBhdHRyaWJ1dGUKCiAgICBOb3RlIHRoYXQgaW4gYWRkaXRpb24gdG8gYSBjYWxsYmFjaywgeW91IGNhbiBhbHNvIHBhc3MgYW4gb3B0aW9uYWwgdGFyZ2V0CiAgICBvYmplY3QgdGhhdCB3aWxsIGJlIHNldCBhcyBgdGhpc2Agb24gdGhlIGNvbnRleHQuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5QZXJzb24gPSBEUy5Nb2RlbC5leHRlbmQoewogICAgICBmaXJzdE5hbWU6IGF0dHIoKSwKICAgICAgbGFzdE5hbWU6IGF0dHIoJ3N0cmluZycpLAogICAgICBiaXJ0aGRheTogYXR0cignZGF0ZScpCiAgICB9KTsKCiAgICBBcHAuUGVyc29uLmVhY2hUcmFuc2Zvcm1lZEF0dHJpYnV0ZShmdW5jdGlvbihuYW1lLCB0eXBlKSB7CiAgICAgIGNvbnNvbGUubG9nKG5hbWUsIHR5cGUpOwogICAgfSk7CgogICAgLy8gcHJpbnRzOgogICAgLy8gbGFzdE5hbWUgc3RyaW5nCiAgICAvLyBiaXJ0aGRheSBkYXRlCiAgIGBgYAoKICAgIEBtZXRob2QgZWFjaFRyYW5zZm9ybWVkQXR0cmlidXRlCiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gZXhlY3V0ZQogICAgQHBhcmFtIHtPYmplY3R9IFt0YXJnZXRdIFRoZSB0YXJnZXQgb2JqZWN0IHRvIHVzZQogICAgQHN0YXRpYwogICovCiAgZWFjaFRyYW5zZm9ybWVkQXR0cmlidXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYmluZGluZykgewogICAgZ2V0KHRoaXMsICd0cmFuc2Zvcm1lZEF0dHJpYnV0ZXMnKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUsIHR5cGUpIHsKICAgICAgY2FsbGJhY2suY2FsbChiaW5kaW5nLCBuYW1lLCB0eXBlKTsKICAgIH0pOwogIH0KfSk7CgoKRFMuTW9kZWwucmVvcGVuKHsKICBlYWNoQXR0cmlidXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYmluZGluZykgewogICAgdGhpcy5jb25zdHJ1Y3Rvci5lYWNoQXR0cmlidXRlKGNhbGxiYWNrLCBiaW5kaW5nKTsKICB9Cn0pOwoKZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKHJlY29yZCwgb3B0aW9ucywga2V5KSB7CiAgaWYgKHR5cGVvZiBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9PT0gImZ1bmN0aW9uIikgewogICAgcmV0dXJuIG9wdGlvbnMuZGVmYXVsdFZhbHVlKCk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBvcHRpb25zLmRlZmF1bHRWYWx1ZTsKICB9Cn0KCmZ1bmN0aW9uIGhhc1ZhbHVlKHJlY29yZCwga2V5KSB7CiAgcmV0dXJuIHJlY29yZC5fYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8CiAgICAgICAgIHJlY29yZC5faW5GbGlnaHRBdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkgfHwKICAgICAgICAgcmVjb3JkLl9kYXRhLmhhc093blByb3BlcnR5KGtleSk7Cn0KCmZ1bmN0aW9uIGdldFZhbHVlKHJlY29yZCwga2V5KSB7CiAgaWYgKHJlY29yZC5fYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICByZXR1cm4gcmVjb3JkLl9hdHRyaWJ1dGVzW2tleV07CiAgfSBlbHNlIGlmIChyZWNvcmQuX2luRmxpZ2h0QXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICByZXR1cm4gcmVjb3JkLl9pbkZsaWdodEF0dHJpYnV0ZXNba2V5XTsKICB9IGVsc2UgewogICAgcmV0dXJuIHJlY29yZC5fZGF0YVtrZXldOwogIH0KfQoKLyoqCiAgYERTLmF0dHJgIGRlZmluZXMgYW4gYXR0cmlidXRlIG9uIGEgW0RTLk1vZGVsXShEUy5Nb2RlbC5odG1sKS4KICBCeSBkZWZhdWx0LCBhdHRyaWJ1dGVzIGFyZSBwYXNzZWQgdGhyb3VnaCBhcy1pcywgaG93ZXZlciB5b3UgY2FuIHNwZWNpZnkgYW4KICBvcHRpb25hbCB0eXBlIHRvIGhhdmUgdGhlIHZhbHVlIGF1dG9tYXRpY2FsbHkgdHJhbnNmb3JtZWQuCiAgRW1iZXIgRGF0YSBzaGlwcyB3aXRoIGZvdXIgYmFzaWMgdHJhbnNmb3JtIHR5cGVzOiBgc3RyaW5nYCwgYG51bWJlcmAsCiAgYGJvb2xlYW5gIGFuZCBgZGF0ZWAuIFlvdSBjYW4gZGVmaW5lIHlvdXIgb3duIHRyYW5zZm9ybXMgYnkgc3ViY2xhc3NpbmcKICBbRFMuVHJhbnNmb3JtXShEUy5UcmFuc2Zvcm0uaHRtbCkuCgogIGBEUy5hdHRyYCB0YWtlcyBhbiBvcHRpb25hbCBoYXNoIGFzIGEgc2Vjb25kIHBhcmFtZXRlciwgY3VycmVudGx5CiAgc3VwcG9ydGVkIG9wdGlvbnMgYXJlOgoKICAtIGBkZWZhdWx0VmFsdWVgOiBQYXNzIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHRvIHNldCB0aGUgYXR0cmlidXRlCiAgICAgICAgICAgICAgICAgICAgdG8gYSBkZWZhdWx0IHZhbHVlIGlmIG5vbmUgaXMgc3VwcGxpZWQuCgogIEV4YW1wbGUKCiAgYGBgamF2YXNjcmlwdAogIHZhciBhdHRyID0gRFMuYXR0cjsKCiAgQXBwLlVzZXIgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgdXNlcm5hbWU6IGF0dHIoJ3N0cmluZycpLAogICAgZW1haWw6IGF0dHIoJ3N0cmluZycpLAogICAgdmVyaWZpZWQ6IGF0dHIoJ2Jvb2xlYW4nLCB7ZGVmYXVsdFZhbHVlOiBmYWxzZX0pCiAgfSk7CiAgYGBgCgogIEBuYW1lc3BhY2UKICBAbWV0aG9kIGF0dHIKICBAZm9yIERTCiAgQHBhcmFtIHtTdHJpbmd9IHR5cGUgdGhlIGF0dHJpYnV0ZSB0eXBlCiAgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYSBoYXNoIG9mIG9wdGlvbnMKICBAcmV0dXJuIHtBdHRyaWJ1dGV9CiovCgpEUy5hdHRyID0gZnVuY3Rpb24odHlwZSwgb3B0aW9ucykgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICB2YXIgbWV0YSA9IHsKICAgIHR5cGU6IHR5cGUsCiAgICBpc0F0dHJpYnV0ZTogdHJ1ZSwKICAgIG9wdGlvbnM6IG9wdGlvbnMKICB9OwoKICByZXR1cm4gRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgIEVtYmVyLmFzc2VydCgiWW91IG1heSBub3Qgc2V0IGBpZGAgYXMgYW4gYXR0cmlidXRlIG9uIHlvdXIgbW9kZWwuIFBsZWFzZSByZW1vdmUgYW55IGxpbmVzIHRoYXQgbG9vayBsaWtlOiBgaWQ6IERTLmF0dHIoJzx0eXBlPicpYCBmcm9tICIgKyB0aGlzLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCksIGtleSAhPT0gJ2lkJyk7CiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMuX2F0dHJpYnV0ZXNba2V5XSB8fCB0aGlzLl9pbkZsaWdodEF0dHJpYnV0ZXNba2V5XSB8fCB0aGlzLl9kYXRhW2tleV07CgogICAgICB0aGlzLnNlbmQoJ2RpZFNldFByb3BlcnR5JywgewogICAgICAgIG5hbWU6IGtleSwKICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWUsCiAgICAgICAgb3JpZ2luYWxWYWx1ZTogdGhpcy5fZGF0YVtrZXldLAogICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICB9KTsKCiAgICAgIHRoaXMuX2F0dHJpYnV0ZXNba2V5XSA9IHZhbHVlOwogICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlKHRoaXMsIGtleSkpIHsKICAgICAgcmV0dXJuIGdldFZhbHVlKHRoaXMsIGtleSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZ2V0RGVmYXVsdFZhbHVlKHRoaXMsIG9wdGlvbnMsIGtleSk7CiAgICB9CgogIC8vIGBkYXRhYCBpcyBuZXZlciBzZXQgZGlyZWN0bHkuIEhvd2V2ZXIsIGl0IG1heSBiZQogIC8vIGludmFsaWRhdGVkIGZyb20gdGhlIHN0YXRlIG1hbmFnZXIncyBzZXREYXRhCiAgLy8gZXZlbnQuCiAgfSkucHJvcGVydHkoJ2RhdGEnKS5tZXRhKG1ldGEpOwp9OwoKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKLyoqCiAgQW4gQXR0cmlidXRlQ2hhbmdlIG9iamVjdCBpcyBjcmVhdGVkIHdoZW5ldmVyIGEgcmVjb3JkJ3MKICBhdHRyaWJ1dGUgY2hhbmdlcyB2YWx1ZS4gSXQgaXMgdXNlZCB0byB0cmFjayBjaGFuZ2VzIHRvIGEKICByZWNvcmQgYmV0d2VlbiB0cmFuc2FjdGlvbiBjb21taXRzLgoKICBAY2xhc3MgQXR0cmlidXRlQ2hhbmdlCiAgQG5hbWVzcGFjZSBEUwogIEBwcml2YXRlCiAgQGNvbnN0cnVjdG9yCiovCnZhciBBdHRyaWJ1dGVDaGFuZ2UgPSBEUy5BdHRyaWJ1dGVDaGFuZ2UgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgdGhpcy5yZWNvcmQgPSBvcHRpb25zLnJlY29yZDsKICB0aGlzLnN0b3JlID0gb3B0aW9ucy5zdG9yZTsKICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7CiAgdGhpcy52YWx1ZSA9IG9wdGlvbnMudmFsdWU7CiAgdGhpcy5vbGRWYWx1ZSA9IG9wdGlvbnMub2xkVmFsdWU7Cn07CgpBdHRyaWJ1dGVDaGFuZ2UuY3JlYXRlQ2hhbmdlID0gZnVuY3Rpb24ob3B0aW9ucykgewogIHJldHVybiBuZXcgQXR0cmlidXRlQ2hhbmdlKG9wdGlvbnMpOwp9OwoKQXR0cmlidXRlQ2hhbmdlLnByb3RvdHlwZSA9IHsKICBzeW5jOiBmdW5jdGlvbigpIHsKICAgIGlmICh0aGlzLnZhbHVlICE9PSB0aGlzLm9sZFZhbHVlKSB7CiAgICAgIHRoaXMucmVjb3JkLnNlbmQoJ2JlY29tZURpcnR5Jyk7CiAgICAgIHRoaXMucmVjb3JkLnVwZGF0ZVJlY29yZEFycmF5c0xhdGVyKCk7CiAgICB9CgogICAgLy8gVE9ETzogVXNlIHRoaXMgb2JqZWN0IGluIHRoZSBjb21taXQgcHJvY2VzcwogICAgdGhpcy5kZXN0cm95KCk7CiAgfSwKCiAgLyoqCiAgICBJZiB0aGUgQXR0cmlidXRlQ2hhbmdlIGlzIGRlc3Ryb3llZCAoZWl0aGVyIGJ5IGJlaW5nIHJvbGxlZCBiYWNrCiAgICBvciBiZWluZyBjb21taXR0ZWQpLCByZW1vdmUgaXQgZnJvbSB0aGUgbGlzdCBvZiBwZW5kaW5nIGNoYW5nZXMKICAgIG9uIHRoZSByZWNvcmQuCgogICAgQG1ldGhvZCBkZXN0cm95CiAgKi8KICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgIGRlbGV0ZSB0aGlzLnJlY29yZC5fY2hhbmdlc1RvU3luY1t0aGlzLm5hbWVdOwogIH0KfTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQ7CnZhciBmb3JFYWNoID0gRW1iZXIuRW51bWVyYWJsZVV0aWxzLmZvckVhY2g7CgovKioKICBAY2xhc3MgUmVsYXRpb25zaGlwQ2hhbmdlCiAgQG5hbWVzcGFjZSBEUwogIEBwcml2YXRlCiAgQGNvbnN0cnV0b3IKKi8KRFMuUmVsYXRpb25zaGlwQ2hhbmdlID0gZnVuY3Rpb24ob3B0aW9ucykgewogIHRoaXMucGFyZW50UmVjb3JkID0gb3B0aW9ucy5wYXJlbnRSZWNvcmQ7CiAgdGhpcy5jaGlsZFJlY29yZCA9IG9wdGlvbnMuY2hpbGRSZWNvcmQ7CiAgdGhpcy5maXJzdFJlY29yZCA9IG9wdGlvbnMuZmlyc3RSZWNvcmQ7CiAgdGhpcy5maXJzdFJlY29yZEtpbmQgPSBvcHRpb25zLmZpcnN0UmVjb3JkS2luZDsKICB0aGlzLmZpcnN0UmVjb3JkTmFtZSA9IG9wdGlvbnMuZmlyc3RSZWNvcmROYW1lOwogIHRoaXMuc2Vjb25kUmVjb3JkID0gb3B0aW9ucy5zZWNvbmRSZWNvcmQ7CiAgdGhpcy5zZWNvbmRSZWNvcmRLaW5kID0gb3B0aW9ucy5zZWNvbmRSZWNvcmRLaW5kOwogIHRoaXMuc2Vjb25kUmVjb3JkTmFtZSA9IG9wdGlvbnMuc2Vjb25kUmVjb3JkTmFtZTsKICB0aGlzLmNoYW5nZVR5cGUgPSBvcHRpb25zLmNoYW5nZVR5cGU7CiAgdGhpcy5zdG9yZSA9IG9wdGlvbnMuc3RvcmU7CgogIHRoaXMuY29tbWl0dGVkID0ge307Cn07CgovKioKICBAY2xhc3MgUmVsYXRpb25zaGlwQ2hhbmdlQWRkCiAgQG5hbWVzcGFjZSBEUwogIEBwcml2YXRlCiAgQGNvbnN0cnV0b3IKKi8KRFMuUmVsYXRpb25zaGlwQ2hhbmdlQWRkID0gZnVuY3Rpb24ob3B0aW9ucyl7CiAgRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNhbGwodGhpcywgb3B0aW9ucyk7Cn07CgovKioKICBAY2xhc3MgUmVsYXRpb25zaGlwQ2hhbmdlUmVtb3ZlCiAgQG5hbWVzcGFjZSBEUwogIEBwcml2YXRlCiAgQGNvbnN0cnV0b3IKKi8KRFMuUmVsYXRpb25zaGlwQ2hhbmdlUmVtb3ZlID0gZnVuY3Rpb24ob3B0aW9ucyl7CiAgRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNhbGwodGhpcywgb3B0aW9ucyk7Cn07CgpEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykgewogIHJldHVybiBuZXcgRFMuUmVsYXRpb25zaGlwQ2hhbmdlKG9wdGlvbnMpOwp9OwoKRFMuUmVsYXRpb25zaGlwQ2hhbmdlQWRkLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICByZXR1cm4gbmV3IERTLlJlbGF0aW9uc2hpcENoYW5nZUFkZChvcHRpb25zKTsKfTsKCkRTLlJlbGF0aW9uc2hpcENoYW5nZVJlbW92ZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgcmV0dXJuIG5ldyBEUy5SZWxhdGlvbnNoaXBDaGFuZ2VSZW1vdmUob3B0aW9ucyk7Cn07CgpEUy5PbmVUb01hbnlDaGFuZ2UgPSB7fTsKRFMuT25lVG9Ob25lQ2hhbmdlID0ge307CkRTLk1hbnlUb05vbmVDaGFuZ2UgPSB7fTsKRFMuT25lVG9PbmVDaGFuZ2UgPSB7fTsKRFMuTWFueVRvTWFueUNoYW5nZSA9IHt9OwoKRFMuUmVsYXRpb25zaGlwQ2hhbmdlLl9jcmVhdGVDaGFuZ2UgPSBmdW5jdGlvbihvcHRpb25zKXsKICBpZihvcHRpb25zLmNoYW5nZVR5cGUgPT09ICJhZGQiKXsKICAgIHJldHVybiBEUy5SZWxhdGlvbnNoaXBDaGFuZ2VBZGQuY3JlYXRlKG9wdGlvbnMpOwogIH0KICBpZihvcHRpb25zLmNoYW5nZVR5cGUgPT09ICJyZW1vdmUiKXsKICAgIHJldHVybiBEUy5SZWxhdGlvbnNoaXBDaGFuZ2VSZW1vdmUuY3JlYXRlKG9wdGlvbnMpOwogIH0KfTsKCgpEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuZGV0ZXJtaW5lUmVsYXRpb25zaGlwVHlwZSA9IGZ1bmN0aW9uKHJlY29yZFR5cGUsIGtub3duU2lkZSl7CiAgdmFyIGtub3duS2V5ID0ga25vd25TaWRlLmtleSwga2V5LCBvdGhlcktpbmQ7CiAgdmFyIGtub3duS2luZCA9IGtub3duU2lkZS5raW5kOwoKICB2YXIgaW52ZXJzZSA9IHJlY29yZFR5cGUuaW52ZXJzZUZvcihrbm93bktleSk7CgogIGlmIChpbnZlcnNlKXsKICAgIGtleSA9IGludmVyc2UubmFtZTsKICAgIG90aGVyS2luZCA9IGludmVyc2Uua2luZDsKICB9CgogIGlmICghaW52ZXJzZSl7CiAgICByZXR1cm4ga25vd25LaW5kID09PSAiYmVsb25nc1RvIiA/ICJvbmVUb05vbmUiIDogIm1hbnlUb05vbmUiOwogIH0KICBlbHNlewogICAgaWYob3RoZXJLaW5kID09PSAiYmVsb25nc1RvIil7CiAgICAgIHJldHVybiBrbm93bktpbmQgPT09ICJiZWxvbmdzVG8iID8gIm9uZVRvT25lIiA6ICJtYW55VG9PbmUiOwogICAgfQogICAgZWxzZXsKICAgICAgcmV0dXJuIGtub3duS2luZCA9PT0gImJlbG9uZ3NUbyIgPyAib25lVG9NYW55IiA6ICJtYW55VG9NYW55IjsKICAgIH0KICB9Cgp9OwoKRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGZpcnN0UmVjb3JkLCBzZWNvbmRSZWNvcmQsIHN0b3JlLCBvcHRpb25zKXsKICAvLyBHZXQgdGhlIHR5cGUgb2YgdGhlIGNoaWxkIGJhc2VkIG9uIHRoZSBjaGlsZCdzIGNsaWVudCBJRAogIHZhciBmaXJzdFJlY29yZFR5cGUgPSBmaXJzdFJlY29yZC5jb25zdHJ1Y3RvciwgY2hhbmdlVHlwZTsKICBjaGFuZ2VUeXBlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmRldGVybWluZVJlbGF0aW9uc2hpcFR5cGUoZmlyc3RSZWNvcmRUeXBlLCBvcHRpb25zKTsKICBpZiAoY2hhbmdlVHlwZSA9PT0gIm9uZVRvTWFueSIpewogICAgcmV0dXJuIERTLk9uZVRvTWFueUNoYW5nZS5jcmVhdGVDaGFuZ2UoZmlyc3RSZWNvcmQsIHNlY29uZFJlY29yZCwgc3RvcmUsIG9wdGlvbnMpOwogIH0KICBlbHNlIGlmIChjaGFuZ2VUeXBlID09PSAibWFueVRvT25lIil7CiAgICByZXR1cm4gRFMuT25lVG9NYW55Q2hhbmdlLmNyZWF0ZUNoYW5nZShzZWNvbmRSZWNvcmQsIGZpcnN0UmVjb3JkLCBzdG9yZSwgb3B0aW9ucyk7CiAgfQogIGVsc2UgaWYgKGNoYW5nZVR5cGUgPT09ICJvbmVUb05vbmUiKXsKICAgIHJldHVybiBEUy5PbmVUb05vbmVDaGFuZ2UuY3JlYXRlQ2hhbmdlKGZpcnN0UmVjb3JkLCBzZWNvbmRSZWNvcmQsIHN0b3JlLCBvcHRpb25zKTsKICB9CiAgZWxzZSBpZiAoY2hhbmdlVHlwZSA9PT0gIm1hbnlUb05vbmUiKXsKICAgIHJldHVybiBEUy5NYW55VG9Ob25lQ2hhbmdlLmNyZWF0ZUNoYW5nZShmaXJzdFJlY29yZCwgc2Vjb25kUmVjb3JkLCBzdG9yZSwgb3B0aW9ucyk7CiAgfQogIGVsc2UgaWYgKGNoYW5nZVR5cGUgPT09ICJvbmVUb09uZSIpewogICAgcmV0dXJuIERTLk9uZVRvT25lQ2hhbmdlLmNyZWF0ZUNoYW5nZShmaXJzdFJlY29yZCwgc2Vjb25kUmVjb3JkLCBzdG9yZSwgb3B0aW9ucyk7CiAgfQogIGVsc2UgaWYgKGNoYW5nZVR5cGUgPT09ICJtYW55VG9NYW55Iil7CiAgICByZXR1cm4gRFMuTWFueVRvTWFueUNoYW5nZS5jcmVhdGVDaGFuZ2UoZmlyc3RSZWNvcmQsIHNlY29uZFJlY29yZCwgc3RvcmUsIG9wdGlvbnMpOwogIH0KfTsKCkRTLk9uZVRvTm9uZUNoYW5nZS5jcmVhdGVDaGFuZ2UgPSBmdW5jdGlvbihjaGlsZFJlY29yZCwgcGFyZW50UmVjb3JkLCBzdG9yZSwgb3B0aW9ucykgewogIHZhciBrZXkgPSBvcHRpb25zLmtleTsKICB2YXIgY2hhbmdlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLl9jcmVhdGVDaGFuZ2UoewogICAgICBwYXJlbnRSZWNvcmQ6IHBhcmVudFJlY29yZCwKICAgICAgY2hpbGRSZWNvcmQ6IGNoaWxkUmVjb3JkLAogICAgICBmaXJzdFJlY29yZDogY2hpbGRSZWNvcmQsCiAgICAgIHN0b3JlOiBzdG9yZSwKICAgICAgY2hhbmdlVHlwZTogb3B0aW9ucy5jaGFuZ2VUeXBlLAogICAgICBmaXJzdFJlY29yZE5hbWU6IGtleSwKICAgICAgZmlyc3RSZWNvcmRLaW5kOiAiYmVsb25nc1RvIgogIH0pOwoKICBzdG9yZS5hZGRSZWxhdGlvbnNoaXBDaGFuZ2VGb3IoY2hpbGRSZWNvcmQsIGtleSwgcGFyZW50UmVjb3JkLCBudWxsLCBjaGFuZ2UpOwoKICByZXR1cm4gY2hhbmdlOwp9OwoKRFMuTWFueVRvTm9uZUNoYW5nZS5jcmVhdGVDaGFuZ2UgPSBmdW5jdGlvbihjaGlsZFJlY29yZCwgcGFyZW50UmVjb3JkLCBzdG9yZSwgb3B0aW9ucykgewogIHZhciBrZXkgPSBvcHRpb25zLmtleTsKICB2YXIgY2hhbmdlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLl9jcmVhdGVDaGFuZ2UoewogICAgICBwYXJlbnRSZWNvcmQ6IGNoaWxkUmVjb3JkLAogICAgICBjaGlsZFJlY29yZDogcGFyZW50UmVjb3JkLAogICAgICBzZWNvbmRSZWNvcmQ6IGNoaWxkUmVjb3JkLAogICAgICBzdG9yZTogc3RvcmUsCiAgICAgIGNoYW5nZVR5cGU6IG9wdGlvbnMuY2hhbmdlVHlwZSwKICAgICAgc2Vjb25kUmVjb3JkTmFtZTogb3B0aW9ucy5rZXksCiAgICAgIHNlY29uZFJlY29yZEtpbmQ6ICJoYXNNYW55IgogIH0pOwoKICBzdG9yZS5hZGRSZWxhdGlvbnNoaXBDaGFuZ2VGb3IoY2hpbGRSZWNvcmQsIGtleSwgcGFyZW50UmVjb3JkLCBudWxsLCBjaGFuZ2UpOwogIHJldHVybiBjaGFuZ2U7Cn07CgoKRFMuTWFueVRvTWFueUNoYW5nZS5jcmVhdGVDaGFuZ2UgPSBmdW5jdGlvbihjaGlsZFJlY29yZCwgcGFyZW50UmVjb3JkLCBzdG9yZSwgb3B0aW9ucykgewogIC8vIElmIHRoZSBuYW1lIG9mIHRoZSBiZWxvbmdzVG8gc2lkZSBvZiB0aGUgcmVsYXRpb25zaGlwIGlzIHNwZWNpZmllZCwKICAvLyB1c2UgdGhhdAogIC8vIElmIHRoZSB0eXBlIG9mIHRoZSBwYXJlbnQgaXMgc3BlY2lmaWVkLCBsb29rIGl0IHVwIG9uIHRoZSBjaGlsZCdzIHR5cGUKICAvLyBkZWZpbml0aW9uLgogIHZhciBrZXkgPSBvcHRpb25zLmtleTsKCiAgdmFyIGNoYW5nZSA9IERTLlJlbGF0aW9uc2hpcENoYW5nZS5fY3JlYXRlQ2hhbmdlKHsKICAgICAgcGFyZW50UmVjb3JkOiBwYXJlbnRSZWNvcmQsCiAgICAgIGNoaWxkUmVjb3JkOiBjaGlsZFJlY29yZCwKICAgICAgZmlyc3RSZWNvcmQ6IGNoaWxkUmVjb3JkLAogICAgICBzZWNvbmRSZWNvcmQ6IHBhcmVudFJlY29yZCwKICAgICAgZmlyc3RSZWNvcmRLaW5kOiAiaGFzTWFueSIsCiAgICAgIHNlY29uZFJlY29yZEtpbmQ6ICJoYXNNYW55IiwKICAgICAgc3RvcmU6IHN0b3JlLAogICAgICBjaGFuZ2VUeXBlOiBvcHRpb25zLmNoYW5nZVR5cGUsCiAgICAgIGZpcnN0UmVjb3JkTmFtZTogIGtleQogIH0pOwoKICBzdG9yZS5hZGRSZWxhdGlvbnNoaXBDaGFuZ2VGb3IoY2hpbGRSZWNvcmQsIGtleSwgcGFyZW50UmVjb3JkLCBudWxsLCBjaGFuZ2UpOwoKCiAgcmV0dXJuIGNoYW5nZTsKfTsKCkRTLk9uZVRvT25lQ2hhbmdlLmNyZWF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGNoaWxkUmVjb3JkLCBwYXJlbnRSZWNvcmQsIHN0b3JlLCBvcHRpb25zKSB7CiAgdmFyIGtleTsKCiAgLy8gSWYgdGhlIG5hbWUgb2YgdGhlIGJlbG9uZ3NUbyBzaWRlIG9mIHRoZSByZWxhdGlvbnNoaXAgaXMgc3BlY2lmaWVkLAogIC8vIHVzZSB0aGF0CiAgLy8gSWYgdGhlIHR5cGUgb2YgdGhlIHBhcmVudCBpcyBzcGVjaWZpZWQsIGxvb2sgaXQgdXAgb24gdGhlIGNoaWxkJ3MgdHlwZQogIC8vIGRlZmluaXRpb24uCiAgaWYgKG9wdGlvbnMucGFyZW50VHlwZSkgewogICAga2V5ID0gb3B0aW9ucy5wYXJlbnRUeXBlLmludmVyc2VGb3Iob3B0aW9ucy5rZXkpLm5hbWU7CiAgfSBlbHNlIGlmIChvcHRpb25zLmtleSkgewogICAga2V5ID0gb3B0aW9ucy5rZXk7CiAgfSBlbHNlIHsKICAgIEVtYmVyLmFzc2VydCgiWW91IG11c3QgcGFzcyBlaXRoZXIgYSBwYXJlbnRUeXBlIG9yIGJlbG9uZ3NUb05hbWUgb3B0aW9uIHRvIE9uZVRvTWFueUNoYW5nZS5mb3JDaGlsZEFuZFBhcmVudCIsIGZhbHNlKTsKICB9CgogIHZhciBjaGFuZ2UgPSBEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuX2NyZWF0ZUNoYW5nZSh7CiAgICAgIHBhcmVudFJlY29yZDogcGFyZW50UmVjb3JkLAogICAgICBjaGlsZFJlY29yZDogY2hpbGRSZWNvcmQsCiAgICAgIGZpcnN0UmVjb3JkOiBjaGlsZFJlY29yZCwKICAgICAgc2Vjb25kUmVjb3JkOiBwYXJlbnRSZWNvcmQsCiAgICAgIGZpcnN0UmVjb3JkS2luZDogImJlbG9uZ3NUbyIsCiAgICAgIHNlY29uZFJlY29yZEtpbmQ6ICJiZWxvbmdzVG8iLAogICAgICBzdG9yZTogc3RvcmUsCiAgICAgIGNoYW5nZVR5cGU6IG9wdGlvbnMuY2hhbmdlVHlwZSwKICAgICAgZmlyc3RSZWNvcmROYW1lOiAga2V5CiAgfSk7CgogIHN0b3JlLmFkZFJlbGF0aW9uc2hpcENoYW5nZUZvcihjaGlsZFJlY29yZCwga2V5LCBwYXJlbnRSZWNvcmQsIG51bGwsIGNoYW5nZSk7CgoKICByZXR1cm4gY2hhbmdlOwp9OwoKRFMuT25lVG9PbmVDaGFuZ2UubWFpbnRhaW5JbnZhcmlhbnQgPSBmdW5jdGlvbihvcHRpb25zLCBzdG9yZSwgY2hpbGRSZWNvcmQsIGtleSl7CiAgaWYgKG9wdGlvbnMuY2hhbmdlVHlwZSA9PT0gImFkZCIgJiYgc3RvcmUucmVjb3JkSXNNYXRlcmlhbGl6ZWQoY2hpbGRSZWNvcmQpKSB7CiAgICB2YXIgb2xkUGFyZW50ID0gZ2V0KGNoaWxkUmVjb3JkLCBrZXkpOwogICAgaWYgKG9sZFBhcmVudCl7CiAgICAgIHZhciBjb3JyZXNwb25kaW5nQ2hhbmdlID0gRFMuT25lVG9PbmVDaGFuZ2UuY3JlYXRlQ2hhbmdlKGNoaWxkUmVjb3JkLCBvbGRQYXJlbnQsIHN0b3JlLCB7CiAgICAgICAgICBwYXJlbnRUeXBlOiBvcHRpb25zLnBhcmVudFR5cGUsCiAgICAgICAgICBoYXNNYW55TmFtZTogb3B0aW9ucy5oYXNNYW55TmFtZSwKICAgICAgICAgIGNoYW5nZVR5cGU6ICJyZW1vdmUiLAogICAgICAgICAga2V5OiBvcHRpb25zLmtleQogICAgICAgIH0pOwogICAgICBzdG9yZS5hZGRSZWxhdGlvbnNoaXBDaGFuZ2VGb3IoY2hpbGRSZWNvcmQsIGtleSwgb3B0aW9ucy5wYXJlbnRSZWNvcmQgLCBudWxsLCBjb3JyZXNwb25kaW5nQ2hhbmdlKTsKICAgICBjb3JyZXNwb25kaW5nQ2hhbmdlLnN5bmMoKTsKICAgIH0KICB9Cn07CgpEUy5PbmVUb01hbnlDaGFuZ2UuY3JlYXRlQ2hhbmdlID0gZnVuY3Rpb24oY2hpbGRSZWNvcmQsIHBhcmVudFJlY29yZCwgc3RvcmUsIG9wdGlvbnMpIHsKICB2YXIga2V5OwoKICAvLyBJZiB0aGUgbmFtZSBvZiB0aGUgYmVsb25nc1RvIHNpZGUgb2YgdGhlIHJlbGF0aW9uc2hpcCBpcyBzcGVjaWZpZWQsCiAgLy8gdXNlIHRoYXQKICAvLyBJZiB0aGUgdHlwZSBvZiB0aGUgcGFyZW50IGlzIHNwZWNpZmllZCwgbG9vayBpdCB1cCBvbiB0aGUgY2hpbGQncyB0eXBlCiAgLy8gZGVmaW5pdGlvbi4KICBpZiAob3B0aW9ucy5wYXJlbnRUeXBlKSB7CiAgICBrZXkgPSBvcHRpb25zLnBhcmVudFR5cGUuaW52ZXJzZUZvcihvcHRpb25zLmtleSkubmFtZTsKICAgIERTLk9uZVRvTWFueUNoYW5nZS5tYWludGFpbkludmFyaWFudCggb3B0aW9ucywgc3RvcmUsIGNoaWxkUmVjb3JkLCBrZXkgKTsKICB9IGVsc2UgaWYgKG9wdGlvbnMua2V5KSB7CiAgICBrZXkgPSBvcHRpb25zLmtleTsKICB9IGVsc2UgewogICAgRW1iZXIuYXNzZXJ0KCJZb3UgbXVzdCBwYXNzIGVpdGhlciBhIHBhcmVudFR5cGUgb3IgYmVsb25nc1RvTmFtZSBvcHRpb24gdG8gT25lVG9NYW55Q2hhbmdlLmZvckNoaWxkQW5kUGFyZW50IiwgZmFsc2UpOwogIH0KCiAgdmFyIGNoYW5nZSA9IERTLlJlbGF0aW9uc2hpcENoYW5nZS5fY3JlYXRlQ2hhbmdlKHsKICAgICAgcGFyZW50UmVjb3JkOiBwYXJlbnRSZWNvcmQsCiAgICAgIGNoaWxkUmVjb3JkOiBjaGlsZFJlY29yZCwKICAgICAgZmlyc3RSZWNvcmQ6IGNoaWxkUmVjb3JkLAogICAgICBzZWNvbmRSZWNvcmQ6IHBhcmVudFJlY29yZCwKICAgICAgZmlyc3RSZWNvcmRLaW5kOiAiYmVsb25nc1RvIiwKICAgICAgc2Vjb25kUmVjb3JkS2luZDogImhhc01hbnkiLAogICAgICBzdG9yZTogc3RvcmUsCiAgICAgIGNoYW5nZVR5cGU6IG9wdGlvbnMuY2hhbmdlVHlwZSwKICAgICAgZmlyc3RSZWNvcmROYW1lOiAga2V5CiAgfSk7CgogIHN0b3JlLmFkZFJlbGF0aW9uc2hpcENoYW5nZUZvcihjaGlsZFJlY29yZCwga2V5LCBwYXJlbnRSZWNvcmQsIGNoYW5nZS5nZXRTZWNvbmRSZWNvcmROYW1lKCksIGNoYW5nZSk7CgoKICByZXR1cm4gY2hhbmdlOwp9OwoKCkRTLk9uZVRvTWFueUNoYW5nZS5tYWludGFpbkludmFyaWFudCA9IGZ1bmN0aW9uKG9wdGlvbnMsIHN0b3JlLCBjaGlsZFJlY29yZCwga2V5KXsKICBpZiAob3B0aW9ucy5jaGFuZ2VUeXBlID09PSAiYWRkIiAmJiBjaGlsZFJlY29yZCkgewogICAgdmFyIG9sZFBhcmVudCA9IGdldChjaGlsZFJlY29yZCwga2V5KTsKICAgIGlmIChvbGRQYXJlbnQpewogICAgICB2YXIgY29ycmVzcG9uZGluZ0NoYW5nZSA9IERTLk9uZVRvTWFueUNoYW5nZS5jcmVhdGVDaGFuZ2UoY2hpbGRSZWNvcmQsIG9sZFBhcmVudCwgc3RvcmUsIHsKICAgICAgICAgIHBhcmVudFR5cGU6IG9wdGlvbnMucGFyZW50VHlwZSwKICAgICAgICAgIGhhc01hbnlOYW1lOiBvcHRpb25zLmhhc01hbnlOYW1lLAogICAgICAgICAgY2hhbmdlVHlwZTogInJlbW92ZSIsCiAgICAgICAgICBrZXk6IG9wdGlvbnMua2V5CiAgICAgICAgfSk7CiAgICAgIHN0b3JlLmFkZFJlbGF0aW9uc2hpcENoYW5nZUZvcihjaGlsZFJlY29yZCwga2V5LCBvcHRpb25zLnBhcmVudFJlY29yZCwgY29ycmVzcG9uZGluZ0NoYW5nZS5nZXRTZWNvbmRSZWNvcmROYW1lKCksIGNvcnJlc3BvbmRpbmdDaGFuZ2UpOwogICAgICBjb3JyZXNwb25kaW5nQ2hhbmdlLnN5bmMoKTsKICAgIH0KICB9Cn07CgovKioKICBAY2xhc3MgUmVsYXRpb25zaGlwQ2hhbmdlCiAgQG5hbWVzcGFjZSBEUwoqLwpEUy5SZWxhdGlvbnNoaXBDaGFuZ2UucHJvdG90eXBlID0gewoKICBnZXRTZWNvbmRSZWNvcmROYW1lOiBmdW5jdGlvbigpIHsKICAgIHZhciBuYW1lID0gdGhpcy5zZWNvbmRSZWNvcmROYW1lLCBwYXJlbnQ7CgogICAgaWYgKCFuYW1lKSB7CiAgICAgIHBhcmVudCA9IHRoaXMuc2Vjb25kUmVjb3JkOwogICAgICBpZiAoIXBhcmVudCkgeyByZXR1cm47IH0KCiAgICAgIHZhciBjaGlsZFR5cGUgPSB0aGlzLmZpcnN0UmVjb3JkLmNvbnN0cnVjdG9yOwogICAgICB2YXIgaW52ZXJzZSA9IGNoaWxkVHlwZS5pbnZlcnNlRm9yKHRoaXMuZmlyc3RSZWNvcmROYW1lKTsKICAgICAgdGhpcy5zZWNvbmRSZWNvcmROYW1lID0gaW52ZXJzZS5uYW1lOwogICAgfQoKICAgIHJldHVybiB0aGlzLnNlY29uZFJlY29yZE5hbWU7CiAgfSwKCiAgLyoqCiAgICBHZXQgdGhlIG5hbWUgb2YgdGhlIHJlbGF0aW9uc2hpcCBvbiB0aGUgYmVsb25nc1RvIHNpZGUuCgogICAgQG1ldGhvZCBnZXRGaXJzdFJlY29yZE5hbWUKICAgIEByZXR1cm4ge1N0cmluZ30KICAqLwogIGdldEZpcnN0UmVjb3JkTmFtZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbmFtZSA9IHRoaXMuZmlyc3RSZWNvcmROYW1lOwogICAgcmV0dXJuIG5hbWU7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGRlc3Ryb3kKICAgIEBwcml2YXRlCiAgKi8KICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgIHZhciBjaGlsZFJlY29yZCA9IHRoaXMuY2hpbGRSZWNvcmQsCiAgICAgICAgYmVsb25nc1RvTmFtZSA9IHRoaXMuZ2V0Rmlyc3RSZWNvcmROYW1lKCksCiAgICAgICAgaGFzTWFueU5hbWUgPSB0aGlzLmdldFNlY29uZFJlY29yZE5hbWUoKSwKICAgICAgICBzdG9yZSA9IHRoaXMuc3RvcmU7CgogICAgc3RvcmUucmVtb3ZlUmVsYXRpb25zaGlwQ2hhbmdlRm9yKGNoaWxkUmVjb3JkLCBiZWxvbmdzVG9OYW1lLCB0aGlzLnBhcmVudFJlY29yZCwgaGFzTWFueU5hbWUsIHRoaXMuY2hhbmdlVHlwZSk7CiAgfSwKCiAgZ2V0U2Vjb25kUmVjb3JkOiBmdW5jdGlvbigpewogICAgcmV0dXJuIHRoaXMuc2Vjb25kUmVjb3JkOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBnZXRGaXJzdFJlY29yZAogICAgQHByaXZhdGUKICAqLwogIGdldEZpcnN0UmVjb3JkOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmZpcnN0UmVjb3JkOwogIH0sCgogIGNvYWxlc2NlOiBmdW5jdGlvbigpewogICAgdmFyIHJlbGF0aW9uc2hpcFBhaXJzID0gdGhpcy5zdG9yZS5yZWxhdGlvbnNoaXBDaGFuZ2VQYWlyc0Zvcih0aGlzLmZpcnN0UmVjb3JkKTsKICAgIGZvckVhY2gocmVsYXRpb25zaGlwUGFpcnMsIGZ1bmN0aW9uKHBhaXIpewogICAgICB2YXIgYWRkZWRDaGFuZ2UgPSBwYWlyWyJhZGQiXTsKICAgICAgdmFyIHJlbW92ZWRDaGFuZ2UgPSBwYWlyWyJyZW1vdmUiXTsKICAgICAgaWYoYWRkZWRDaGFuZ2UgJiYgcmVtb3ZlZENoYW5nZSkgewogICAgICAgIGFkZGVkQ2hhbmdlLmRlc3Ryb3koKTsKICAgICAgICByZW1vdmVkQ2hhbmdlLmRlc3Ryb3koKTsKICAgICAgfQogICAgfSk7CiAgfQp9OwoKRFMuUmVsYXRpb25zaGlwQ2hhbmdlQWRkLnByb3RvdHlwZSA9IEVtYmVyLmNyZWF0ZShEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuY3JlYXRlKHt9KSk7CkRTLlJlbGF0aW9uc2hpcENoYW5nZVJlbW92ZS5wcm90b3R5cGUgPSBFbWJlci5jcmVhdGUoRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0ZSh7fSkpOwoKLy8gdGhlIG9iamVjdCBpcyBhIHZhbHVlLCBhbmQgbm90IGEgcHJvbWlzZQpmdW5jdGlvbiBpc1ZhbHVlKG9iamVjdCkgewogIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiAoIW9iamVjdC50aGVuIHx8IHR5cGVvZiBvYmplY3QudGhlbiAhPT0gJ2Z1bmN0aW9uJyk7Cn0KCkRTLlJlbGF0aW9uc2hpcENoYW5nZUFkZC5wcm90b3R5cGUuY2hhbmdlVHlwZSA9ICJhZGQiOwpEUy5SZWxhdGlvbnNoaXBDaGFuZ2VBZGQucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbigpIHsKICB2YXIgc2Vjb25kUmVjb3JkTmFtZSA9IHRoaXMuZ2V0U2Vjb25kUmVjb3JkTmFtZSgpLAogICAgICBmaXJzdFJlY29yZE5hbWUgPSB0aGlzLmdldEZpcnN0UmVjb3JkTmFtZSgpLAogICAgICBmaXJzdFJlY29yZCA9IHRoaXMuZ2V0Rmlyc3RSZWNvcmQoKSwKICAgICAgc2Vjb25kUmVjb3JkID0gdGhpcy5nZXRTZWNvbmRSZWNvcmQoKTsKCiAgLy9FbWJlci5hc3NlcnQoIllvdSBzcGVjaWZpZWQgYSBoYXNNYW55ICgiICsgaGFzTWFueU5hbWUgKyAiKSBvbiAiICsgKCFiZWxvbmdzVG9OYW1lICYmIChuZXdQYXJlbnQgfHwgb2xkUGFyZW50IHx8IHRoaXMubGFzdFBhcmVudCkuY29uc3RydWN0b3IpICsgIiBidXQgZGlkIG5vdCBzcGVjaWZ5IGFuIGludmVyc2UgYmVsb25nc1RvIG9uICIgKyBjaGlsZC5jb25zdHJ1Y3RvciwgYmVsb25nc1RvTmFtZSk7CiAgLy9FbWJlci5hc3NlcnQoIllvdSBzcGVjaWZpZWQgYSBiZWxvbmdzVG8gKCIgKyBiZWxvbmdzVG9OYW1lICsgIikgb24gIiArIGNoaWxkLmNvbnN0cnVjdG9yICsgIiBidXQgZGlkIG5vdCBzcGVjaWZ5IGFuIGludmVyc2UgaGFzTWFueSBvbiAiICsgKCFoYXNNYW55TmFtZSAmJiAobmV3UGFyZW50IHx8IG9sZFBhcmVudCB8fCB0aGlzLmxhc3RQYXJlbnRSZWNvcmQpLmNvbnN0cnVjdG9yKSwgaGFzTWFueU5hbWUpOwoKICBpZiAoc2Vjb25kUmVjb3JkIGluc3RhbmNlb2YgRFMuTW9kZWwgJiYgZmlyc3RSZWNvcmQgaW5zdGFuY2VvZiBEUy5Nb2RlbCkgewogICAgaWYodGhpcy5zZWNvbmRSZWNvcmRLaW5kID09PSAiYmVsb25nc1RvIil7CiAgICAgIHNlY29uZFJlY29yZC5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0aW9uKCl7CiAgICAgICAgc2V0KHNlY29uZFJlY29yZCwgc2Vjb25kUmVjb3JkTmFtZSwgZmlyc3RSZWNvcmQpOwogICAgICB9KTsKCiAgICAgfQogICAgIGVsc2UgaWYodGhpcy5zZWNvbmRSZWNvcmRLaW5kID09PSAiaGFzTWFueSIpewogICAgICBzZWNvbmRSZWNvcmQuc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpewogICAgICAgIHZhciByZWxhdGlvbnNoaXAgPSBnZXQoc2Vjb25kUmVjb3JkLCBzZWNvbmRSZWNvcmROYW1lKTsKICAgICAgICBpZiAoaXNWYWx1ZShyZWxhdGlvbnNoaXApKSB7IHJlbGF0aW9uc2hpcC5hZGRPYmplY3QoZmlyc3RSZWNvcmQpOyB9CiAgICAgIH0pOwogICAgfQogIH0KCiAgaWYgKGZpcnN0UmVjb3JkIGluc3RhbmNlb2YgRFMuTW9kZWwgJiYgc2Vjb25kUmVjb3JkIGluc3RhbmNlb2YgRFMuTW9kZWwgJiYgZ2V0KGZpcnN0UmVjb3JkLCBmaXJzdFJlY29yZE5hbWUpICE9PSBzZWNvbmRSZWNvcmQpIHsKICAgIGlmKHRoaXMuZmlyc3RSZWNvcmRLaW5kID09PSAiYmVsb25nc1RvIil7CiAgICAgIGZpcnN0UmVjb3JkLnN1c3BlbmRSZWxhdGlvbnNoaXBPYnNlcnZlcnMoZnVuY3Rpb24oKXsKICAgICAgICBzZXQoZmlyc3RSZWNvcmQsIGZpcnN0UmVjb3JkTmFtZSwgc2Vjb25kUmVjb3JkKTsKICAgICAgfSk7CiAgICB9CiAgICBlbHNlIGlmKHRoaXMuZmlyc3RSZWNvcmRLaW5kID09PSAiaGFzTWFueSIpewogICAgICBmaXJzdFJlY29yZC5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIHJlbGF0aW9uc2hpcCA9IGdldChmaXJzdFJlY29yZCwgZmlyc3RSZWNvcmROYW1lKTsKICAgICAgICBpZiAoaXNWYWx1ZShyZWxhdGlvbnNoaXApKSB7IHJlbGF0aW9uc2hpcC5hZGRPYmplY3Qoc2Vjb25kUmVjb3JkKTsgfQogICAgICB9KTsKICAgIH0KICB9CgogIHRoaXMuY29hbGVzY2UoKTsKfTsKCkRTLlJlbGF0aW9uc2hpcENoYW5nZVJlbW92ZS5wcm90b3R5cGUuY2hhbmdlVHlwZSA9ICJyZW1vdmUiOwpEUy5SZWxhdGlvbnNoaXBDaGFuZ2VSZW1vdmUucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbigpIHsKICB2YXIgc2Vjb25kUmVjb3JkTmFtZSA9IHRoaXMuZ2V0U2Vjb25kUmVjb3JkTmFtZSgpLAogICAgICBmaXJzdFJlY29yZE5hbWUgPSB0aGlzLmdldEZpcnN0UmVjb3JkTmFtZSgpLAogICAgICBmaXJzdFJlY29yZCA9IHRoaXMuZ2V0Rmlyc3RSZWNvcmQoKSwKICAgICAgc2Vjb25kUmVjb3JkID0gdGhpcy5nZXRTZWNvbmRSZWNvcmQoKTsKCiAgLy9FbWJlci5hc3NlcnQoIllvdSBzcGVjaWZpZWQgYSBoYXNNYW55ICgiICsgaGFzTWFueU5hbWUgKyAiKSBvbiAiICsgKCFiZWxvbmdzVG9OYW1lICYmIChuZXdQYXJlbnQgfHwgb2xkUGFyZW50IHx8IHRoaXMubGFzdFBhcmVudCkuY29uc3RydWN0b3IpICsgIiBidXQgZGlkIG5vdCBzcGVjaWZ5IGFuIGludmVyc2UgYmVsb25nc1RvIG9uICIgKyBjaGlsZC5jb25zdHJ1Y3RvciwgYmVsb25nc1RvTmFtZSk7CiAgLy9FbWJlci5hc3NlcnQoIllvdSBzcGVjaWZpZWQgYSBiZWxvbmdzVG8gKCIgKyBiZWxvbmdzVG9OYW1lICsgIikgb24gIiArIGNoaWxkLmNvbnN0cnVjdG9yICsgIiBidXQgZGlkIG5vdCBzcGVjaWZ5IGFuIGludmVyc2UgaGFzTWFueSBvbiAiICsgKCFoYXNNYW55TmFtZSAmJiAobmV3UGFyZW50IHx8IG9sZFBhcmVudCB8fCB0aGlzLmxhc3RQYXJlbnRSZWNvcmQpLmNvbnN0cnVjdG9yKSwgaGFzTWFueU5hbWUpOwoKICBpZiAoc2Vjb25kUmVjb3JkIGluc3RhbmNlb2YgRFMuTW9kZWwgJiYgZmlyc3RSZWNvcmQgaW5zdGFuY2VvZiBEUy5Nb2RlbCkgewogICAgaWYodGhpcy5zZWNvbmRSZWNvcmRLaW5kID09PSAiYmVsb25nc1RvIil7CiAgICAgIHNlY29uZFJlY29yZC5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0aW9uKCl7CiAgICAgICAgc2V0KHNlY29uZFJlY29yZCwgc2Vjb25kUmVjb3JkTmFtZSwgbnVsbCk7CiAgICAgIH0pOwogICAgfQogICAgZWxzZSBpZih0aGlzLnNlY29uZFJlY29yZEtpbmQgPT09ICJoYXNNYW55Iil7CiAgICAgIHNlY29uZFJlY29yZC5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIHJlbGF0aW9uc2hpcCA9IGdldChzZWNvbmRSZWNvcmQsIHNlY29uZFJlY29yZE5hbWUpOwogICAgICAgIGlmIChpc1ZhbHVlKHJlbGF0aW9uc2hpcCkpIHsgcmVsYXRpb25zaGlwLnJlbW92ZU9iamVjdChmaXJzdFJlY29yZCk7IH0KICAgICAgfSk7CiAgICB9CiAgfQoKICBpZiAoZmlyc3RSZWNvcmQgaW5zdGFuY2VvZiBEUy5Nb2RlbCAmJiBnZXQoZmlyc3RSZWNvcmQsIGZpcnN0UmVjb3JkTmFtZSkpIHsKICAgIGlmKHRoaXMuZmlyc3RSZWNvcmRLaW5kID09PSAiYmVsb25nc1RvIil7CiAgICAgIGZpcnN0UmVjb3JkLnN1c3BlbmRSZWxhdGlvbnNoaXBPYnNlcnZlcnMoZnVuY3Rpb24oKXsKICAgICAgICBzZXQoZmlyc3RSZWNvcmQsIGZpcnN0UmVjb3JkTmFtZSwgbnVsbCk7CiAgICAgIH0pOwogICAgIH0KICAgICBlbHNlIGlmKHRoaXMuZmlyc3RSZWNvcmRLaW5kID09PSAiaGFzTWFueSIpewogICAgICAgZmlyc3RSZWNvcmQuc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpewogICAgICAgICB2YXIgcmVsYXRpb25zaGlwID0gZ2V0KGZpcnN0UmVjb3JkLCBmaXJzdFJlY29yZE5hbWUpOwogICAgICAgICBpZiAoaXNWYWx1ZShyZWxhdGlvbnNoaXApKSB7IHJlbGF0aW9uc2hpcC5yZW1vdmVPYmplY3Qoc2Vjb25kUmVjb3JkKTsgfQogICAgICB9KTsKICAgIH0KICB9CgogIHRoaXMuY29hbGVzY2UoKTsKfTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7CnZhciBnZXQgPSBFbWJlci5nZXQsIHNldCA9IEVtYmVyLnNldCwKICAgIGlzTm9uZSA9IEVtYmVyLmlzTm9uZTsKCi8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKZnVuY3Rpb24gYXN5bmNCZWxvbmdzVG8odHlwZSwgb3B0aW9ucywgbWV0YSkgewogIHJldHVybiBFbWJlci5jb21wdXRlZChmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICB2YXIgZGF0YSA9IGdldCh0aGlzLCAnZGF0YScpLAogICAgICAgIHN0b3JlID0gZ2V0KHRoaXMsICdzdG9yZScpLAogICAgICAgIHByb21pc2VMYWJlbCA9ICJEUzogQXN5bmMgYmVsb25nc1RvICIgKyB0aGlzICsgIiA6ICIgKyBrZXk7CgogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHsKICAgICAgRW1iZXIuYXNzZXJ0KCJZb3UgY2FuIG9ubHkgYWRkIGEgJyIgKyB0eXBlICsgIicgcmVjb3JkIHRvIHRoaXMgcmVsYXRpb25zaGlwIiwgIXZhbHVlIHx8IHZhbHVlIGluc3RhbmNlb2Ygc3RvcmUubW9kZWxGb3IodHlwZSkpOwogICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBEUy5Qcm9taXNlT2JqZWN0LmNyZWF0ZSh7IHByb21pc2U6IEVtYmVyLlJTVlAucmVzb2x2ZSh2YWx1ZSwgcHJvbWlzZUxhYmVsKSB9KTsKICAgIH0KCiAgICB2YXIgbGluayA9IGRhdGEubGlua3MgJiYgZGF0YS5saW5rc1trZXldLAogICAgICAgIGJlbG9uZ3NUbyA9IGRhdGFba2V5XTsKCiAgICBpZighaXNOb25lKGJlbG9uZ3NUbykpIHsKICAgICAgdmFyIHByb21pc2UgPSBzdG9yZS5mZXRjaFJlY29yZChiZWxvbmdzVG8pIHx8IEVtYmVyLlJTVlAucmVzb2x2ZShiZWxvbmdzVG8sIHByb21pc2VMYWJlbCk7CiAgICAgIHJldHVybiBEUy5Qcm9taXNlT2JqZWN0LmNyZWF0ZSh7IHByb21pc2U6IHByb21pc2V9KTsKICAgIH0gZWxzZSBpZiAobGluaykgewogICAgICB2YXIgcmVzb2x2ZXIgPSBFbWJlci5SU1ZQLmRlZmVyKCJEUzogQXN5bmMgYmVsb25nc1RvIChsaW5rKSAiICsgdGhpcyArICIgOiAiICsga2V5KTsKICAgICAgc3RvcmUuZmluZEJlbG9uZ3NUbyh0aGlzLCBsaW5rLCBtZXRhLCByZXNvbHZlcik7CiAgICAgIHJldHVybiBEUy5Qcm9taXNlT2JqZWN0LmNyZWF0ZSh7IHByb21pc2U6IHJlc29sdmVyLnByb21pc2UgfSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9KS5wcm9wZXJ0eSgnZGF0YScpLm1ldGEobWV0YSk7Cn0KCi8qKgogIGBEUy5iZWxvbmdzVG9gIGlzIHVzZWQgdG8gZGVmaW5lIE9uZS1Uby1PbmUgYW5kIE9uZS1Uby1NYW55CiAgcmVsYXRpb25zaGlwcyBvbiBhIFtEUy5Nb2RlbF0oRFMuTW9kZWwuaHRtbCkuCgoKICBgRFMuYmVsb25nc1RvYCB0YWtlcyBhbiBvcHRpb25hbCBoYXNoIGFzIGEgc2Vjb25kIHBhcmFtZXRlciwgY3VycmVudGx5CiAgc3VwcG9ydGVkIG9wdGlvbnMgYXJlOgoKICAtIGBhc3luY2A6IEEgYm9vbGVhbiB2YWx1ZSB1c2VkIHRvIGV4cGxpY2l0bHkgZGVjbGFyZSB0aGlzIHRvIGJlIGFuIGFzeW5jIHJlbGF0aW9uc2hpcC4KICAtIGBpbnZlcnNlYDogQSBzdHJpbmcgdXNlZCB0byBpZGVudGlmeSB0aGUgaW52ZXJzZSBwcm9wZXJ0eSBvbiBhCiAgICByZWxhdGVkIG1vZGVsIGluIGEgT25lLVRvLU1hbnkgcmVsYXRpb25zaGlwLiBTZWUgW0V4cGxpY2l0IEludmVyc2VzXSgjdG9jX2V4cGxpY2l0LWludmVyc2VzKQoKICAjIyMjIE9uZS1Uby1PbmUKICBUbyBkZWNsYXJlIGEgb25lLXRvLW9uZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0d28gbW9kZWxzLCB1c2UKICBgRFMuYmVsb25nc1RvYDoKCiAgYGBgamF2YXNjcmlwdAogIEFwcC5Vc2VyID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIHByb2ZpbGU6IERTLmJlbG9uZ3NUbygncHJvZmlsZScpCiAgfSk7CgogIEFwcC5Qcm9maWxlID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIHVzZXI6IERTLmJlbG9uZ3NUbygndXNlcicpCiAgfSk7CiAgYGBgCgogICMjIyMgT25lLVRvLU1hbnkKICBUbyBkZWNsYXJlIGEgb25lLXRvLW1hbnkgcmVsYXRpb25zaGlwIGJldHdlZW4gdHdvIG1vZGVscywgdXNlCiAgYERTLmJlbG9uZ3NUb2AgaW4gY29tYmluYXRpb24gd2l0aCBgRFMuaGFzTWFueWAsIGxpa2UgdGhpczoKCiAgYGBgamF2YXNjcmlwdAogIEFwcC5Qb3N0ID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIGNvbW1lbnRzOiBEUy5oYXNNYW55KCdjb21tZW50JykKICB9KTsKCiAgQXBwLkNvbW1lbnQgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgcG9zdDogRFMuYmVsb25nc1RvKCdwb3N0JykKICB9KTsKICBgYGAKCiAgQG5hbWVzcGFjZQogIEBtZXRob2QgYmVsb25nc1RvCiAgQGZvciBEUwogIEBwYXJhbSB7U3RyaW5nIG9yIERTLk1vZGVsfSB0eXBlIHRoZSBtb2RlbCB0eXBlIG9mIHRoZSByZWxhdGlvbnNoaXAKICBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhIGhhc2ggb2Ygb3B0aW9ucwogIEByZXR1cm4ge0VtYmVyLmNvbXB1dGVkfSByZWxhdGlvbnNoaXAKKi8KRFMuYmVsb25nc1RvID0gZnVuY3Rpb24odHlwZSwgb3B0aW9ucykgewogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHsKICAgIG9wdGlvbnMgPSB0eXBlOwogICAgdHlwZSA9IHVuZGVmaW5lZDsKICB9IGVsc2UgewogICAgRW1iZXIuYXNzZXJ0KCJUaGUgZmlyc3QgYXJndW1lbnQgRFMuYmVsb25nc1RvIG11c3QgYmUgYSBtb2RlbCB0eXBlIG9yIHN0cmluZywgbGlrZSBEUy5iZWxvbmdzVG8oQXBwLlBlcnNvbikiLCAhIXR5cGUgJiYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCBEUy5Nb2RlbC5kZXRlY3QodHlwZSkpKTsKICB9CgogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICB2YXIgbWV0YSA9IHsgdHlwZTogdHlwZSwgaXNSZWxhdGlvbnNoaXA6IHRydWUsIG9wdGlvbnM6IG9wdGlvbnMsIGtpbmQ6ICdiZWxvbmdzVG8nIH07CgogIGlmIChvcHRpb25zLmFzeW5jKSB7CiAgICByZXR1cm4gYXN5bmNCZWxvbmdzVG8odHlwZSwgb3B0aW9ucywgbWV0YSk7CiAgfQoKICByZXR1cm4gRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgdmFyIGRhdGEgPSBnZXQodGhpcywgJ2RhdGEnKSwKICAgICAgICBzdG9yZSA9IGdldCh0aGlzLCAnc3RvcmUnKSwgYmVsb25nc1RvLCB0eXBlQ2xhc3M7CgogICAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykgewogICAgICB0eXBlQ2xhc3MgPSBzdG9yZS5tb2RlbEZvcih0eXBlKTsKICAgIH0gZWxzZSB7CiAgICAgIHR5cGVDbGFzcyA9IHR5cGU7CiAgICB9CgogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHsKICAgICAgRW1iZXIuYXNzZXJ0KCJZb3UgY2FuIG9ubHkgYWRkIGEgJyIgKyB0eXBlICsgIicgcmVjb3JkIHRvIHRoaXMgcmVsYXRpb25zaGlwIiwgIXZhbHVlIHx8IHZhbHVlIGluc3RhbmNlb2YgdHlwZUNsYXNzKTsKICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWU7CiAgICB9CgogICAgYmVsb25nc1RvID0gZGF0YVtrZXldOwoKICAgIGlmIChpc05vbmUoYmVsb25nc1RvKSkgeyByZXR1cm4gbnVsbDsgfQoKICAgIHN0b3JlLmZldGNoUmVjb3JkKGJlbG9uZ3NUbyk7CgogICAgcmV0dXJuIGJlbG9uZ3NUbzsKICB9KS5wcm9wZXJ0eSgnZGF0YScpLm1ldGEobWV0YSk7Cn07CgovKioKICBUaGVzZSBvYnNlcnZlcnMgb2JzZXJ2ZSBhbGwgYGJlbG9uZ3NUb2AgcmVsYXRpb25zaGlwcyBvbiB0aGUgcmVjb3JkLiBTZWUKICBgcmVsYXRpb25zaGlwcy9leHRgIHRvIHNlZSBob3cgdGhlc2Ugb2JzZXJ2ZXJzIGdldCB0aGVpciBkZXBlbmRlbmNpZXMuCgogIEBjbGFzcyBNb2RlbAogIEBuYW1lc3BhY2UgRFMKKi8KRFMuTW9kZWwucmVvcGVuKHsKCiAgLyoqCiAgICBAbWV0aG9kIGJlbG9uZ3NUb1dpbGxDaGFuZ2UKICAgIEBwcml2YXRlCiAgICBAc3RhdGljCiAgICBAcGFyYW0gcmVjb3JkCiAgICBAcGFyYW0ga2V5CiAgKi8KICBiZWxvbmdzVG9XaWxsQ2hhbmdlOiBFbWJlci5iZWZvcmVPYnNlcnZlcihmdW5jdGlvbihyZWNvcmQsIGtleSkgewogICAgaWYgKGdldChyZWNvcmQsICdpc0xvYWRlZCcpKSB7CiAgICAgIHZhciBvbGRQYXJlbnQgPSBnZXQocmVjb3JkLCBrZXkpOwoKICAgICAgaWYgKG9sZFBhcmVudCkgewogICAgICAgIHZhciBzdG9yZSA9IGdldChyZWNvcmQsICdzdG9yZScpLAogICAgICAgICAgICBjaGFuZ2UgPSBEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuY3JlYXRlQ2hhbmdlKHJlY29yZCwgb2xkUGFyZW50LCBzdG9yZSwgeyBrZXk6IGtleSwga2luZDogImJlbG9uZ3NUbyIsIGNoYW5nZVR5cGU6ICJyZW1vdmUiIH0pOwoKICAgICAgICBjaGFuZ2Uuc3luYygpOwogICAgICAgIHRoaXMuX2NoYW5nZXNUb1N5bmNba2V5XSA9IGNoYW5nZTsKICAgICAgfQogICAgfQogIH0pLAoKICAvKioKICAgIEBtZXRob2QgYmVsb25nc1RvRGlkQ2hhbmdlCiAgICBAcHJpdmF0ZQogICAgQHN0YXRpYwogICAgQHBhcmFtIHJlY29yZAogICAgQHBhcmFtIGtleQogICovCiAgYmVsb25nc1RvRGlkQ2hhbmdlOiBFbWJlci5pbW1lZGlhdGVPYnNlcnZlcihmdW5jdGlvbihyZWNvcmQsIGtleSkgewogICAgaWYgKGdldChyZWNvcmQsICdpc0xvYWRlZCcpKSB7CiAgICAgIHZhciBuZXdQYXJlbnQgPSBnZXQocmVjb3JkLCBrZXkpOwoKICAgICAgaWYgKG5ld1BhcmVudCkgewogICAgICAgIHZhciBzdG9yZSA9IGdldChyZWNvcmQsICdzdG9yZScpLAogICAgICAgICAgICBjaGFuZ2UgPSBEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuY3JlYXRlQ2hhbmdlKHJlY29yZCwgbmV3UGFyZW50LCBzdG9yZSwgeyBrZXk6IGtleSwga2luZDogImJlbG9uZ3NUbyIsIGNoYW5nZVR5cGU6ICJhZGQiIH0pOwoKICAgICAgICBjaGFuZ2Uuc3luYygpOwogICAgICB9CiAgICB9CgogICAgZGVsZXRlIHRoaXMuX2NoYW5nZXNUb1N5bmNba2V5XTsKICB9KQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQsIHNldFByb3BlcnRpZXMgPSBFbWJlci5zZXRQcm9wZXJ0aWVzOwoKZnVuY3Rpb24gYXN5bmNIYXNNYW55KHR5cGUsIG9wdGlvbnMsIG1ldGEpIHsKICByZXR1cm4gRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgdmFyIHJlbGF0aW9uc2hpcCA9IHRoaXMuX3JlbGF0aW9uc2hpcHNba2V5XSwKICAgICAgICBwcm9taXNlTGFiZWwgPSAiRFM6IEFzeW5jIGhhc01hbnkgIiArIHRoaXMgKyAiIDogIiArIGtleTsKCiAgICBpZiAoIXJlbGF0aW9uc2hpcCkgewogICAgICB2YXIgcmVzb2x2ZXIgPSBFbWJlci5SU1ZQLmRlZmVyKHByb21pc2VMYWJlbCk7CiAgICAgIHJlbGF0aW9uc2hpcCA9IGJ1aWxkUmVsYXRpb25zaGlwKHRoaXMsIGtleSwgb3B0aW9ucywgZnVuY3Rpb24oc3RvcmUsIGRhdGEpIHsKICAgICAgICB2YXIgbGluayA9IGRhdGEubGlua3MgJiYgZGF0YS5saW5rc1trZXldOwogICAgICAgIHZhciByZWw7CiAgICAgICAgaWYgKGxpbmspIHsKICAgICAgICAgIHJlbCA9IHN0b3JlLmZpbmRIYXNNYW55KHRoaXMsIGxpbmssIG1ldGEsIHJlc29sdmVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVsID0gc3RvcmUuZmluZE1hbnkodGhpcywgZGF0YVtrZXldLCBtZXRhLnR5cGUsIHJlc29sdmVyKTsKICAgICAgICB9CiAgICAgICAgLy8gY2FjaGUgdGhlIHByb21pc2Ugc28gd2UgY2FuIHVzZSBpdAogICAgICAgIC8vIHdoZW4gd2UgY29tZSBiYWNrIGFuZCBkb24ndCBuZWVkIHRvIHJlYnVpbGQKICAgICAgICAvLyB0aGUgcmVsYXRpb25zaGlwLgogICAgICAgIHNldChyZWwsICdwcm9taXNlJywgcmVzb2x2ZXIucHJvbWlzZSk7CiAgICAgICAgcmV0dXJuIHJlbDsKICAgICAgfSk7CiAgICB9CgogICAgdmFyIHByb21pc2UgPSByZWxhdGlvbnNoaXAuZ2V0KCdwcm9taXNlJykudGhlbihmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHJlbGF0aW9uc2hpcDsKICAgIH0sIG51bGwsICJEUzogQXN5bmMgaGFzTWFueSByZWNvcmRzIHJlY2VpdmVkIik7CgogICAgcmV0dXJuIERTLlByb21pc2VBcnJheS5jcmVhdGUoeyBwcm9taXNlOiBwcm9taXNlIH0pOwogIH0pLnByb3BlcnR5KCdkYXRhJykubWV0YShtZXRhKTsKfQoKZnVuY3Rpb24gYnVpbGRSZWxhdGlvbnNoaXAocmVjb3JkLCBrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7CiAgdmFyIHJlbHMgPSByZWNvcmQuX3JlbGF0aW9uc2hpcHM7CgogIGlmIChyZWxzW2tleV0pIHsgcmV0dXJuIHJlbHNba2V5XTsgfQoKICB2YXIgZGF0YSA9IGdldChyZWNvcmQsICdkYXRhJyksCiAgICAgIHN0b3JlID0gZ2V0KHJlY29yZCwgJ3N0b3JlJyk7CgogIHZhciByZWxhdGlvbnNoaXAgPSByZWxzW2tleV0gPSBjYWxsYmFjay5jYWxsKHJlY29yZCwgc3RvcmUsIGRhdGEpOwoKICByZXR1cm4gc2V0UHJvcGVydGllcyhyZWxhdGlvbnNoaXAsIHsKICAgIG93bmVyOiByZWNvcmQsIG5hbWU6IGtleSwgaXNQb2x5bW9ycGhpYzogb3B0aW9ucy5wb2x5bW9ycGhpYwogIH0pOwp9CgpmdW5jdGlvbiBoYXNSZWxhdGlvbnNoaXAodHlwZSwgb3B0aW9ucykgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICB2YXIgbWV0YSA9IHsgdHlwZTogdHlwZSwgaXNSZWxhdGlvbnNoaXA6IHRydWUsIG9wdGlvbnM6IG9wdGlvbnMsIGtpbmQ6ICdoYXNNYW55JyB9OwoKICBpZiAob3B0aW9ucy5hc3luYykgewogICAgcmV0dXJuIGFzeW5jSGFzTWFueSh0eXBlLCBvcHRpb25zLCBtZXRhKTsKICB9CgogIHJldHVybiBFbWJlci5jb21wdXRlZChmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICByZXR1cm4gYnVpbGRSZWxhdGlvbnNoaXAodGhpcywga2V5LCBvcHRpb25zLCBmdW5jdGlvbihzdG9yZSwgZGF0YSkgewogICAgICB2YXIgcmVjb3JkcyA9IGRhdGFba2V5XTsKICAgICAgRW1iZXIuYXNzZXJ0KCJZb3UgbG9va2VkIHVwIHRoZSAnIiArIGtleSArICInIHJlbGF0aW9uc2hpcCBvbiAnIiArIHRoaXMgKyAiJyBidXQgc29tZSBvZiB0aGUgYXNzb2NpYXRlZCByZWNvcmRzIHdlcmUgbm90IGxvYWRlZC4gRWl0aGVyIG1ha2Ugc3VyZSB0aGV5IGFyZSBhbGwgbG9hZGVkIHRvZ2V0aGVyIHdpdGggdGhlIHBhcmVudCByZWNvcmQsIG9yIHNwZWNpZnkgdGhhdCB0aGUgcmVsYXRpb25zaGlwIGlzIGFzeW5jIChgRFMuaGFzTWFueSh7IGFzeW5jOiB0cnVlIH0pYCkiLCBFbWJlci5BKHJlY29yZHMpLmV2ZXJ5UHJvcGVydHkoJ2lzRW1wdHknLCBmYWxzZSkpOwogICAgICByZXR1cm4gc3RvcmUuZmluZE1hbnkodGhpcywgZGF0YVtrZXldLCBtZXRhLnR5cGUpOwogICAgfSk7CiAgfSkucHJvcGVydHkoJ2RhdGEnKS5tZXRhKG1ldGEpOwp9CgovKioKICBgRFMuaGFzTWFueWAgaXMgdXNlZCB0byBkZWZpbmUgT25lLVRvLU1hbnkgYW5kIE1hbnktVG8tTWFueQogIHJlbGF0aW9uc2hpcHMgb24gYSBbRFMuTW9kZWxdKERTLk1vZGVsLmh0bWwpLgoKICBgRFMuaGFzTWFueWAgdGFrZXMgYW4gb3B0aW9uYWwgaGFzaCBhcyBhIHNlY29uZCBwYXJhbWV0ZXIsIGN1cnJlbnRseQogIHN1cHBvcnRlZCBvcHRpb25zIGFyZToKCiAgLSBgYXN5bmNgOiBBIGJvb2xlYW4gdmFsdWUgdXNlZCB0byBleHBsaWNpdGx5IGRlY2xhcmUgdGhpcyB0byBiZSBhbiBhc3luYyByZWxhdGlvbnNoaXAuCiAgLSBgaW52ZXJzZWA6IEEgc3RyaW5nIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGludmVyc2UgcHJvcGVydHkgb24gYSByZWxhdGVkIG1vZGVsLgoKICAjIyMjIE9uZS1Uby1NYW55CiAgVG8gZGVjbGFyZSBhIG9uZS10by1tYW55IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHR3byBtb2RlbHMsIHVzZQogIGBEUy5iZWxvbmdzVG9gIGluIGNvbWJpbmF0aW9uIHdpdGggYERTLmhhc01hbnlgLCBsaWtlIHRoaXM6CgogIGBgYGphdmFzY3JpcHQKICBBcHAuUG9zdCA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICBjb21tZW50czogRFMuaGFzTWFueSgnY29tbWVudCcpCiAgfSk7CgogIEFwcC5Db21tZW50ID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIHBvc3Q6IERTLmJlbG9uZ3NUbygncG9zdCcpCiAgfSk7CiAgYGBgCgogICMjIyMgTWFueS1Uby1NYW55CiAgVG8gZGVjbGFyZSBhIG1hbnktdG8tbWFueSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0d28gbW9kZWxzLCB1c2UKICBgRFMuaGFzTWFueWA6CgogIGBgYGphdmFzY3JpcHQKICBBcHAuUG9zdCA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICB0YWdzOiBEUy5oYXNNYW55KCd0YWcnKQogIH0pOwoKICBBcHAuVGFnID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIHBvc3RzOiBEUy5oYXNNYW55KCdwb3N0JykKICB9KTsKICBgYGAKCiAgIyMjIyBFeHBsaWNpdCBJbnZlcnNlcwoKICBFbWJlciBEYXRhIHdpbGwgZG8gaXRzIGJlc3QgdG8gZGlzY292ZXIgd2hpY2ggcmVsYXRpb25zaGlwcyBtYXAgdG8KICBvbmUgYW5vdGhlci4gSW4gdGhlIG9uZS10by1tYW55IGNvZGUgYWJvdmUsIGZvciBleGFtcGxlLCBFbWJlciBEYXRhCiAgY2FuIGZpZ3VyZSBvdXQgdGhhdCBjaGFuZ2luZyB0aGUgYGNvbW1lbnRzYCByZWxhdGlvbnNoaXAgc2hvdWxkIHVwZGF0ZQogIHRoZSBgcG9zdGAgcmVsYXRpb25zaGlwIG9uIHRoZSBpbnZlcnNlIGJlY2F1c2UgcG9zdCBpcyB0aGUgb25seQogIHJlbGF0aW9uc2hpcCB0byB0aGF0IG1vZGVsLgoKICBIb3dldmVyLCBzb21ldGltZXMgeW91IG1heSBoYXZlIG11bHRpcGxlIGBiZWxvbmdzVG9gL2BoYXNNYW55c2AgZm9yIHRoZQogIHNhbWUgdHlwZS4gWW91IGNhbiBzcGVjaWZ5IHdoaWNoIHByb3BlcnR5IG9uIHRoZSByZWxhdGVkIG1vZGVsIGlzCiAgdGhlIGludmVyc2UgdXNpbmcgYERTLmhhc01hbnlgJ3MgYGludmVyc2VgIG9wdGlvbjoKCiAgYGBgamF2YXNjcmlwdAogIHZhciBiZWxvbmdzVG8gPSBEUy5iZWxvbmdzVG8sCiAgICAgIGhhc01hbnkgPSBEUy5oYXNNYW55OwoKICBBcHAuQ29tbWVudCA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICBvbmVQb3N0OiBiZWxvbmdzVG8oJ3Bvc3QnKSwKICAgIHR3b1Bvc3Q6IGJlbG9uZ3NUbygncG9zdCcpLAogICAgcmVkUG9zdDogYmVsb25nc1RvKCdwb3N0JyksCiAgICBibHVlUG9zdDogYmVsb25nc1RvKCdwb3N0JykKICB9KTsKCiAgQXBwLlBvc3QgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgY29tbWVudHM6IGhhc01hbnkoJ2NvbW1lbnQnLCB7CiAgICAgIGludmVyc2U6ICdyZWRQb3N0JwogICAgfSkKICB9KTsKICBgYGAKCiAgWW91IGNhbiBhbHNvIHNwZWNpZnkgYW4gaW52ZXJzZSBvbiBhIGBiZWxvbmdzVG9gLCB3aGljaCB3b3JrcyBob3cKICB5b3UnZCBleHBlY3QuCgogIEBuYW1lc3BhY2UKICBAbWV0aG9kIGhhc01hbnkKICBAZm9yIERTCiAgQHBhcmFtIHtTdHJpbmcgb3IgRFMuTW9kZWx9IHR5cGUgdGhlIG1vZGVsIHR5cGUgb2YgdGhlIHJlbGF0aW9uc2hpcAogIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGEgaGFzaCBvZiBvcHRpb25zCiAgQHJldHVybiB7RW1iZXIuY29tcHV0ZWR9IHJlbGF0aW9uc2hpcAoqLwpEUy5oYXNNYW55ID0gZnVuY3Rpb24odHlwZSwgb3B0aW9ucykgewogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHsKICAgIG9wdGlvbnMgPSB0eXBlOwogICAgdHlwZSA9IHVuZGVmaW5lZDsKICB9CiAgcmV0dXJuIGhhc1JlbGF0aW9uc2hpcCh0eXBlLCBvcHRpb25zKTsKfTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKdmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0OwoKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgovKgogIFRoaXMgZmlsZSBkZWZpbmVzIHNldmVyYWwgZXh0ZW5zaW9ucyB0byB0aGUgYmFzZSBgRFMuTW9kZWxgIGNsYXNzIHRoYXQKICBhZGQgc3VwcG9ydCBmb3Igb25lLXRvLW1hbnkgcmVsYXRpb25zaGlwcy4KKi8KCi8qKgogIEBjbGFzcyBNb2RlbAogIEBuYW1lc3BhY2UgRFMKKi8KRFMuTW9kZWwucmVvcGVuKHsKCiAgLyoqCiAgICBUaGlzIEVtYmVyLmpzIGhvb2sgYWxsb3dzIGFuIG9iamVjdCB0byBiZSBub3RpZmllZCB3aGVuIGEgcHJvcGVydHkKICAgIGlzIGRlZmluZWQuCgogICAgSW4gdGhpcyBjYXNlLCB3ZSB1c2UgaXQgdG8gYmUgbm90aWZpZWQgd2hlbiBhbiBFbWJlciBEYXRhIHVzZXIgZGVmaW5lcyBhCiAgICBiZWxvbmdzLXRvIHJlbGF0aW9uc2hpcC4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHNldCB1cCBvYnNlcnZlcnMgZm9yCiAgICBlYWNoIG9uZSwgYWxsb3dpbmcgdXMgdG8gdHJhY2sgcmVsYXRpb25zaGlwIGNoYW5nZXMgYW5kIGF1dG9tYXRpY2FsbHkKICAgIHJlZmxlY3QgY2hhbmdlcyBpbiB0aGUgaW52ZXJzZSBoYXMtbWFueSBhcnJheS4KCiAgICBUaGlzIGhvb2sgcGFzc2VzIHRoZSBjbGFzcyBiZWluZyBzZXQgdXAsIGFzIHdlbGwgYXMgdGhlIGtleSBhbmQgdmFsdWUKICAgIGJlaW5nIGRlZmluZWQuIFNvLCBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgdXNlciBkb2VzIHRoaXM6CgogICAgYGBgamF2YXNjcmlwdAogICAgRFMuTW9kZWwuZXh0ZW5kKHsKICAgICAgcGFyZW50OiBEUy5iZWxvbmdzVG8oJ3VzZXInKQogICAgfSk7CiAgICBgYGAKCiAgICBUaGlzIGhvb2sgd291bGQgYmUgY2FsbGVkIHdpdGggInBhcmVudCIgYXMgdGhlIGtleSBhbmQgdGhlIGNvbXB1dGVkCiAgICBwcm9wZXJ0eSByZXR1cm5lZCBieSBgRFMuYmVsb25nc1RvYCBhcyB0aGUgdmFsdWUuCgogICAgQG1ldGhvZCBkaWREZWZpbmVQcm9wZXJ0eQogICAgQHBhcmFtIHByb3RvCiAgICBAcGFyYW0ga2V5CiAgICBAcGFyYW0gdmFsdWUKICAqLwogIGRpZERlZmluZVByb3BlcnR5OiBmdW5jdGlvbihwcm90bywga2V5LCB2YWx1ZSkgewogICAgLy8gQ2hlY2sgaWYgdGhlIHZhbHVlIGJlaW5nIHNldCBpcyBhIGNvbXB1dGVkIHByb3BlcnR5LgogICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRW1iZXIuRGVzY3JpcHRvcikgewoKICAgICAgLy8gSWYgaXQgaXMsIGdldCB0aGUgbWV0YWRhdGEgZm9yIHRoZSByZWxhdGlvbnNoaXAuIFRoaXMgaXMKICAgICAgLy8gcG9wdWxhdGVkIGJ5IHRoZSBgRFMuYmVsb25nc1RvYCBoZWxwZXIgd2hlbiBpdCBpcyBjcmVhdGluZwogICAgICAvLyB0aGUgY29tcHV0ZWQgcHJvcGVydHkuCiAgICAgIHZhciBtZXRhID0gdmFsdWUubWV0YSgpOwoKICAgICAgaWYgKG1ldGEuaXNSZWxhdGlvbnNoaXAgJiYgbWV0YS5raW5kID09PSAnYmVsb25nc1RvJykgewogICAgICAgIEVtYmVyLmFkZE9ic2VydmVyKHByb3RvLCBrZXksIG51bGwsICdiZWxvbmdzVG9EaWRDaGFuZ2UnKTsKICAgICAgICBFbWJlci5hZGRCZWZvcmVPYnNlcnZlcihwcm90bywga2V5LCBudWxsLCAnYmVsb25nc1RvV2lsbENoYW5nZScpOwogICAgICB9CgogICAgICBtZXRhLnBhcmVudFR5cGUgPSBwcm90by5jb25zdHJ1Y3RvcjsKICAgIH0KICB9Cn0pOwoKLyoKICBUaGVzZSBEUy5Nb2RlbCBleHRlbnNpb25zIGFkZCBjbGFzcyBtZXRob2RzIHRoYXQgcHJvdmlkZSByZWxhdGlvbnNoaXAKICBpbnRyb3NwZWN0aW9uIGFiaWxpdGllcyBhYm91dCByZWxhdGlvbnNoaXBzLgoKICBBIG5vdGUgYWJvdXQgdGhlIGNvbXB1dGVkIHByb3BlcnRpZXMgY29udGFpbmVkIGhlcmU6CgogICoqVGhlc2UgcHJvcGVydGllcyBhcmUgZWZmZWN0aXZlbHkgc2VhbGVkIG9uY2UgY2FsbGVkIGZvciB0aGUgZmlyc3QgdGltZS4qKgogIFRvIGF2b2lkIHJlcGVhdGVkbHkgZG9pbmcgZXhwZW5zaXZlIGl0ZXJhdGlvbiBvdmVyIGEgbW9kZWwncyBmaWVsZHMsIHRoZXNlCiAgdmFsdWVzIGFyZSBjb21wdXRlZCBvbmNlIGFuZCB0aGVuIGNhY2hlZCBmb3IgdGhlIHJlbWFpbmRlciBvZiB0aGUgcnVudGltZSBvZgogIHlvdXIgYXBwbGljYXRpb24uCgogIElmIHlvdXIgYXBwbGljYXRpb24gbmVlZHMgdG8gbW9kaWZ5IGEgY2xhc3MgYWZ0ZXIgaXRzIGluaXRpYWwgZGVmaW5pdGlvbgogIChmb3IgZXhhbXBsZSwgdXNpbmcgYHJlb3BlbigpYCB0byBhZGQgYWRkaXRpb25hbCBhdHRyaWJ1dGVzKSwgbWFrZSBzdXJlIHlvdQogIGRvIGl0IGJlZm9yZSB1c2luZyB5b3VyIG1vZGVsIHdpdGggdGhlIHN0b3JlLCB3aGljaCB1c2VzIHRoZXNlIHByb3BlcnRpZXMKICBleHRlbnNpdmVseS4KKi8KCkRTLk1vZGVsLnJlb3BlbkNsYXNzKHsKICAvKioKICAgIEZvciBhIGdpdmVuIHJlbGF0aW9uc2hpcCBuYW1lLCByZXR1cm5zIHRoZSBtb2RlbCB0eXBlIG9mIHRoZSByZWxhdGlvbnNoaXAuCgogICAgRm9yIGV4YW1wbGUsIGlmIHlvdSBkZWZpbmUgYSBtb2RlbCBsaWtlIHRoaXM6CgogICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuUG9zdCA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICAgIGNvbW1lbnRzOiBEUy5oYXNNYW55KCdjb21tZW50JykKICAgIH0pOwogICBgYGAKCiAgICBDYWxsaW5nIGBBcHAuUG9zdC50eXBlRm9yUmVsYXRpb25zaGlwKCdjb21tZW50cycpYCB3aWxsIHJldHVybiBgQXBwLkNvbW1lbnRgLgoKICAgIEBtZXRob2QgdHlwZUZvclJlbGF0aW9uc2hpcAogICAgQHN0YXRpYwogICAgQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIHJlbGF0aW9uc2hpcAogICAgQHJldHVybiB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHRoZSB0eXBlIG9mIHRoZSByZWxhdGlvbnNoaXAsIG9yIHVuZGVmaW5lZAogICovCiAgdHlwZUZvclJlbGF0aW9uc2hpcDogZnVuY3Rpb24obmFtZSkgewogICAgdmFyIHJlbGF0aW9uc2hpcCA9IGdldCh0aGlzLCAncmVsYXRpb25zaGlwc0J5TmFtZScpLmdldChuYW1lKTsKICAgIHJldHVybiByZWxhdGlvbnNoaXAgJiYgcmVsYXRpb25zaGlwLnR5cGU7CiAgfSwKCiAgaW52ZXJzZUZvcjogZnVuY3Rpb24obmFtZSkgewogICAgdmFyIGludmVyc2VUeXBlID0gdGhpcy50eXBlRm9yUmVsYXRpb25zaGlwKG5hbWUpOwoKICAgIGlmICghaW52ZXJzZVR5cGUpIHsgcmV0dXJuIG51bGw7IH0KCiAgICB2YXIgb3B0aW9ucyA9IHRoaXMubWV0YUZvclByb3BlcnR5KG5hbWUpLm9wdGlvbnM7CgogICAgaWYgKG9wdGlvbnMuaW52ZXJzZSA9PT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfQogICAgCiAgICB2YXIgaW52ZXJzZU5hbWUsIGludmVyc2VLaW5kOwoKICAgIGlmIChvcHRpb25zLmludmVyc2UpIHsKICAgICAgaW52ZXJzZU5hbWUgPSBvcHRpb25zLmludmVyc2U7CiAgICAgIGludmVyc2VLaW5kID0gRW1iZXIuZ2V0KGludmVyc2VUeXBlLCAncmVsYXRpb25zaGlwc0J5TmFtZScpLmdldChpbnZlcnNlTmFtZSkua2luZDsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBwb3NzaWJsZVJlbGF0aW9uc2hpcHMgPSBmaW5kUG9zc2libGVJbnZlcnNlcyh0aGlzLCBpbnZlcnNlVHlwZSk7CgogICAgICBpZiAocG9zc2libGVSZWxhdGlvbnNoaXBzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gbnVsbDsgfQoKICAgICAgRW1iZXIuYXNzZXJ0KCJZb3UgZGVmaW5lZCB0aGUgJyIgKyBuYW1lICsgIicgcmVsYXRpb25zaGlwIG9uICIgKyB0aGlzICsgIiwgYnV0IG11bHRpcGxlIHBvc3NpYmxlIGludmVyc2UgcmVsYXRpb25zaGlwcyBvZiB0eXBlICIgKyB0aGlzICsgIiB3ZXJlIGZvdW5kIG9uICIgKyBpbnZlcnNlVHlwZSArICIuIExvb2sgYXQgaHR0cDovL2VtYmVyanMuY29tL2d1aWRlcy9tb2RlbHMvZGVmaW5pbmctbW9kZWxzLyN0b2NfZXhwbGljaXQtaW52ZXJzZXMgZm9yIGhvdyB0byBleHBsaWNpdGx5IHNwZWNpZnkgaW52ZXJzZXMiLCBwb3NzaWJsZVJlbGF0aW9uc2hpcHMubGVuZ3RoID09PSAxKTsKCiAgICAgIGludmVyc2VOYW1lID0gcG9zc2libGVSZWxhdGlvbnNoaXBzWzBdLm5hbWU7CiAgICAgIGludmVyc2VLaW5kID0gcG9zc2libGVSZWxhdGlvbnNoaXBzWzBdLmtpbmQ7CiAgICB9CgogICAgZnVuY3Rpb24gZmluZFBvc3NpYmxlSW52ZXJzZXModHlwZSwgaW52ZXJzZVR5cGUsIHBvc3NpYmxlUmVsYXRpb25zaGlwcykgewogICAgICBwb3NzaWJsZVJlbGF0aW9uc2hpcHMgPSBwb3NzaWJsZVJlbGF0aW9uc2hpcHMgfHwgW107CgogICAgICB2YXIgcmVsYXRpb25zaGlwTWFwID0gZ2V0KGludmVyc2VUeXBlLCAncmVsYXRpb25zaGlwcycpOwogICAgICBpZiAoIXJlbGF0aW9uc2hpcE1hcCkgeyByZXR1cm47IH0KCiAgICAgIHZhciByZWxhdGlvbnNoaXBzID0gcmVsYXRpb25zaGlwTWFwLmdldCh0eXBlKTsKICAgICAgaWYgKHJlbGF0aW9uc2hpcHMpIHsKICAgICAgICBwb3NzaWJsZVJlbGF0aW9uc2hpcHMucHVzaC5hcHBseShwb3NzaWJsZVJlbGF0aW9uc2hpcHMsIHJlbGF0aW9uc2hpcE1hcC5nZXQodHlwZSkpOwogICAgICB9CgogICAgICBpZiAodHlwZS5zdXBlcmNsYXNzKSB7CiAgICAgICAgZmluZFBvc3NpYmxlSW52ZXJzZXModHlwZS5zdXBlcmNsYXNzLCBpbnZlcnNlVHlwZSwgcG9zc2libGVSZWxhdGlvbnNoaXBzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvc3NpYmxlUmVsYXRpb25zaGlwczsKICAgIH0KCiAgICByZXR1cm4gewogICAgICB0eXBlOiBpbnZlcnNlVHlwZSwKICAgICAgbmFtZTogaW52ZXJzZU5hbWUsCiAgICAgIGtpbmQ6IGludmVyc2VLaW5kCiAgICB9OwogIH0sCgogIC8qKgogICAgVGhlIG1vZGVsJ3MgcmVsYXRpb25zaGlwcyBhcyBhIG1hcCwga2V5ZWQgb24gdGhlIHR5cGUgb2YgdGhlCiAgICByZWxhdGlvbnNoaXAuIFRoZSB2YWx1ZSBvZiBlYWNoIGVudHJ5IGlzIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBkZXNjcmlwdG9yCiAgICBmb3IgZWFjaCByZWxhdGlvbnNoaXAgd2l0aCB0aGF0IHR5cGUsIGRlc2NyaWJpbmcgdGhlIG5hbWUgb2YgdGhlIHJlbGF0aW9uc2hpcAogICAgYXMgd2VsbCBhcyB0aGUgdHlwZS4KCiAgICBGb3IgZXhhbXBsZSwgZ2l2ZW4gdGhlIGZvbGxvd2luZyBtb2RlbCBkZWZpbml0aW9uOgoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5CbG9nID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgICAgdXNlcnM6IERTLmhhc01hbnkoJ3VzZXInKSwKICAgICAgb3duZXI6IERTLmJlbG9uZ3NUbygndXNlcicpLAogICAgICBwb3N0czogRFMuaGFzTWFueSgncG9zdCcpCiAgICB9KTsKICAgIGBgYAoKICAgIFRoaXMgY29tcHV0ZWQgcHJvcGVydHkgd291bGQgcmV0dXJuIGEgbWFwIGRlc2NyaWJpbmcgdGhlc2UKICAgIHJlbGF0aW9uc2hpcHMsIGxpa2UgdGhpczoKCiAgICBgYGBqYXZhc2NyaXB0CiAgICB2YXIgcmVsYXRpb25zaGlwcyA9IEVtYmVyLmdldChBcHAuQmxvZywgJ3JlbGF0aW9uc2hpcHMnKTsKICAgIHJlbGF0aW9uc2hpcHMuZ2V0KEFwcC5Vc2VyKTsKICAgIC8vPT4gWyB7IG5hbWU6ICd1c2VycycsIGtpbmQ6ICdoYXNNYW55JyB9LAogICAgLy8gICAgIHsgbmFtZTogJ293bmVyJywga2luZDogJ2JlbG9uZ3NUbycgfSBdCiAgICByZWxhdGlvbnNoaXBzLmdldChBcHAuUG9zdCk7CiAgICAvLz0+IFsgeyBuYW1lOiAncG9zdHMnLCBraW5kOiAnaGFzTWFueScgfSBdCiAgICBgYGAKCiAgICBAcHJvcGVydHkgcmVsYXRpb25zaGlwcwogICAgQHN0YXRpYwogICAgQHR5cGUgRW1iZXIuTWFwCiAgICBAcmVhZE9ubHkKICAqLwogIHJlbGF0aW9uc2hpcHM6IEVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKCkgewogICAgdmFyIG1hcCA9IG5ldyBFbWJlci5NYXBXaXRoRGVmYXVsdCh7CiAgICAgIGRlZmF1bHRWYWx1ZTogZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfQogICAgfSk7CgogICAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggY29tcHV0ZWQgcHJvcGVydHkgb24gdGhlIGNsYXNzCiAgICB0aGlzLmVhY2hDb21wdXRlZFByb3BlcnR5KGZ1bmN0aW9uKG5hbWUsIG1ldGEpIHsKCiAgICAgIC8vIElmIHRoZSBjb21wdXRlZCBwcm9wZXJ0eSBpcyBhIHJlbGF0aW9uc2hpcCwgYWRkCiAgICAgIC8vIGl0IHRvIHRoZSBtYXAuCiAgICAgIGlmIChtZXRhLmlzUmVsYXRpb25zaGlwKSB7CiAgICAgICAgaWYgKHR5cGVvZiBtZXRhLnR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICBtZXRhLnR5cGUgPSB0aGlzLnN0b3JlLm1vZGVsRm9yKG1ldGEudHlwZSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcmVsYXRpb25zaGlwc0ZvclR5cGUgPSBtYXAuZ2V0KG1ldGEudHlwZSk7CgogICAgICAgIHJlbGF0aW9uc2hpcHNGb3JUeXBlLnB1c2goeyBuYW1lOiBuYW1lLCBraW5kOiBtZXRhLmtpbmQgfSk7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBtYXA7CiAgfSksCgogIC8qKgogICAgQSBoYXNoIGNvbnRhaW5pbmcgbGlzdHMgb2YgdGhlIG1vZGVsJ3MgcmVsYXRpb25zaGlwcywgZ3JvdXBlZAogICAgYnkgdGhlIHJlbGF0aW9uc2hpcCBraW5kLiBGb3IgZXhhbXBsZSwgZ2l2ZW4gYSBtb2RlbCB3aXRoIHRoaXMKICAgIGRlZmluaXRpb246CgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLkJsb2cgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgICB1c2VyczogRFMuaGFzTWFueSgndXNlcicpLAogICAgICBvd25lcjogRFMuYmVsb25nc1RvKCd1c2VyJyksCgogICAgICBwb3N0czogRFMuaGFzTWFueSgncG9zdCcpCiAgICB9KTsKICAgIGBgYAoKICAgIFRoaXMgcHJvcGVydHkgd291bGQgY29udGFpbiB0aGUgZm9sbG93aW5nOgoKICAgIGBgYGphdmFzY3JpcHQKICAgIHZhciByZWxhdGlvbnNoaXBOYW1lcyA9IEVtYmVyLmdldChBcHAuQmxvZywgJ3JlbGF0aW9uc2hpcE5hbWVzJyk7CiAgICByZWxhdGlvbnNoaXBOYW1lcy5oYXNNYW55OwogICAgLy89PiBbJ3VzZXJzJywgJ3Bvc3RzJ10KICAgIHJlbGF0aW9uc2hpcE5hbWVzLmJlbG9uZ3NUbzsKICAgIC8vPT4gWydvd25lciddCiAgICBgYGAKCiAgICBAcHJvcGVydHkgcmVsYXRpb25zaGlwTmFtZXMKICAgIEBzdGF0aWMKICAgIEB0eXBlIE9iamVjdAogICAgQHJlYWRPbmx5CiAgKi8KICByZWxhdGlvbnNoaXBOYW1lczogRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oKSB7CiAgICB2YXIgbmFtZXMgPSB7IGhhc01hbnk6IFtdLCBiZWxvbmdzVG86IFtdIH07CgogICAgdGhpcy5lYWNoQ29tcHV0ZWRQcm9wZXJ0eShmdW5jdGlvbihuYW1lLCBtZXRhKSB7CiAgICAgIGlmIChtZXRhLmlzUmVsYXRpb25zaGlwKSB7CiAgICAgICAgbmFtZXNbbWV0YS5raW5kXS5wdXNoKG5hbWUpOwogICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gbmFtZXM7CiAgfSksCgogIC8qKgogICAgQW4gYXJyYXkgb2YgdHlwZXMgZGlyZWN0bHkgcmVsYXRlZCB0byBhIG1vZGVsLiBFYWNoIHR5cGUgd2lsbCBiZQogICAgaW5jbHVkZWQgb25jZSwgcmVnYXJkbGVzcyBvZiB0aGUgbnVtYmVyIG9mIHJlbGF0aW9uc2hpcHMgaXQgaGFzIHdpdGgKICAgIHRoZSBtb2RlbC4KCiAgICBGb3IgZXhhbXBsZSwgZ2l2ZW4gYSBtb2RlbCB3aXRoIHRoaXMgZGVmaW5pdGlvbjoKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuQmxvZyA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICAgIHVzZXJzOiBEUy5oYXNNYW55KCd1c2VyJyksCiAgICAgIG93bmVyOiBEUy5iZWxvbmdzVG8oJ3VzZXInKSwKCiAgICAgIHBvc3RzOiBEUy5oYXNNYW55KCdwb3N0JykKICAgIH0pOwogICAgYGBgCgogICAgVGhpcyBwcm9wZXJ0eSB3b3VsZCBjb250YWluIHRoZSBmb2xsb3dpbmc6CgogICAgYGBgamF2YXNjcmlwdAogICAgdmFyIHJlbGF0ZWRUeXBlcyA9IEVtYmVyLmdldChBcHAuQmxvZywgJ3JlbGF0ZWRUeXBlcycpOwogICAgLy89PiBbIEFwcC5Vc2VyLCBBcHAuUG9zdCBdCiAgICBgYGAKCiAgICBAcHJvcGVydHkgcmVsYXRlZFR5cGVzCiAgICBAc3RhdGljCiAgICBAdHlwZSBFbWJlci5BcnJheQogICAgQHJlYWRPbmx5CiAgKi8KICByZWxhdGVkVHlwZXM6IEVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKCkgewogICAgdmFyIHR5cGUsCiAgICAgICAgdHlwZXMgPSBFbWJlci5BKCk7CgogICAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggY29tcHV0ZWQgcHJvcGVydHkgb24gdGhlIGNsYXNzLAogICAgLy8gYW5kIGNyZWF0ZSBhbiBhcnJheSBvZiB0aGUgdW5pcXVlIHR5cGVzIGludm9sdmVkCiAgICAvLyBpbiByZWxhdGlvbnNoaXBzCiAgICB0aGlzLmVhY2hDb21wdXRlZFByb3BlcnR5KGZ1bmN0aW9uKG5hbWUsIG1ldGEpIHsKICAgICAgaWYgKG1ldGEuaXNSZWxhdGlvbnNoaXApIHsKICAgICAgICB0eXBlID0gbWV0YS50eXBlOwoKICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICB0eXBlID0gZ2V0KHRoaXMsIHR5cGUsIGZhbHNlKSB8fCB0aGlzLnN0b3JlLm1vZGVsRm9yKHR5cGUpOwogICAgICAgIH0KCiAgICAgICAgRW1iZXIuYXNzZXJ0KCJZb3Ugc3BlY2lmaWVkIGEgaGFzTWFueSAoIiArIG1ldGEudHlwZSArICIpIG9uICIgKyBtZXRhLnBhcmVudFR5cGUgKyAiIGJ1dCAiICsgbWV0YS50eXBlICsgIiB3YXMgbm90IGZvdW5kLiIsICB0eXBlKTsKCiAgICAgICAgaWYgKCF0eXBlcy5jb250YWlucyh0eXBlKSkgewogICAgICAgICAgRW1iZXIuYXNzZXJ0KCJUcnlpbmcgdG8gc2lkZWxvYWQgIiArIG5hbWUgKyAiIG9uICIgKyB0aGlzLnRvU3RyaW5nKCkgKyAiIGJ1dCB0aGUgdHlwZSBkb2Vzbid0IGV4aXN0LiIsICEhdHlwZSk7CiAgICAgICAgICB0eXBlcy5wdXNoKHR5cGUpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIHR5cGVzOwogIH0pLAoKICAvKioKICAgIEEgbWFwIHdob3NlIGtleXMgYXJlIHRoZSByZWxhdGlvbnNoaXBzIG9mIGEgbW9kZWwgYW5kIHdob3NlIHZhbHVlcyBhcmUKICAgIHJlbGF0aW9uc2hpcCBkZXNjcmlwdG9ycy4KCiAgICBGb3IgZXhhbXBsZSwgZ2l2ZW4gYSBtb2RlbCB3aXRoIHRoaXMKICAgIGRlZmluaXRpb246CgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLkJsb2cgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgICB1c2VyczogRFMuaGFzTWFueSgndXNlcicpLAogICAgICBvd25lcjogRFMuYmVsb25nc1RvKCd1c2VyJyksCgogICAgICBwb3N0czogRFMuaGFzTWFueSgncG9zdCcpCiAgICB9KTsKICAgIGBgYAoKICAgIFRoaXMgcHJvcGVydHkgd291bGQgY29udGFpbiB0aGUgZm9sbG93aW5nOgoKICAgIGBgYGphdmFzY3JpcHQKICAgIHZhciByZWxhdGlvbnNoaXBzQnlOYW1lID0gRW1iZXIuZ2V0KEFwcC5CbG9nLCAncmVsYXRpb25zaGlwc0J5TmFtZScpOwogICAgcmVsYXRpb25zaGlwc0J5TmFtZS5nZXQoJ3VzZXJzJyk7CiAgICAvLz0+IHsga2V5OiAndXNlcnMnLCBraW5kOiAnaGFzTWFueScsIHR5cGU6IEFwcC5Vc2VyIH0KICAgIHJlbGF0aW9uc2hpcHNCeU5hbWUuZ2V0KCdvd25lcicpOwogICAgLy89PiB7IGtleTogJ293bmVyJywga2luZDogJ2JlbG9uZ3NUbycsIHR5cGU6IEFwcC5Vc2VyIH0KICAgIGBgYAoKICAgIEBwcm9wZXJ0eSByZWxhdGlvbnNoaXBzQnlOYW1lCiAgICBAc3RhdGljCiAgICBAdHlwZSBFbWJlci5NYXAKICAgIEByZWFkT25seQogICovCiAgcmVsYXRpb25zaGlwc0J5TmFtZTogRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oKSB7CiAgICB2YXIgbWFwID0gRW1iZXIuTWFwLmNyZWF0ZSgpLCB0eXBlOwoKICAgIHRoaXMuZWFjaENvbXB1dGVkUHJvcGVydHkoZnVuY3Rpb24obmFtZSwgbWV0YSkgewogICAgICBpZiAobWV0YS5pc1JlbGF0aW9uc2hpcCkgewogICAgICAgIG1ldGEua2V5ID0gbmFtZTsKICAgICAgICB0eXBlID0gbWV0YS50eXBlOwoKICAgICAgICBpZiAoIXR5cGUgJiYgbWV0YS5raW5kID09PSAnaGFzTWFueScpIHsKICAgICAgICAgIHR5cGUgPSBFbWJlci5TdHJpbmcuc2luZ3VsYXJpemUobmFtZSk7CiAgICAgICAgfSBlbHNlIGlmICghdHlwZSkgewogICAgICAgICAgdHlwZSA9IG5hbWU7CiAgICAgICAgfQoKICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICBtZXRhLnR5cGUgPSB0aGlzLnN0b3JlLm1vZGVsRm9yKHR5cGUpOwogICAgICAgIH0KCiAgICAgICAgbWFwLnNldChuYW1lLCBtZXRhKTsKICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIG1hcDsKICB9KSwKCiAgLyoqCiAgICBBIG1hcCB3aG9zZSBrZXlzIGFyZSB0aGUgZmllbGRzIG9mIHRoZSBtb2RlbCBhbmQgd2hvc2UgdmFsdWVzIGFyZSBzdHJpbmdzCiAgICBkZXNjcmliaW5nIHRoZSBraW5kIG9mIHRoZSBmaWVsZC4gQSBtb2RlbCdzIGZpZWxkcyBhcmUgdGhlIHVuaW9uIG9mIGFsbCBvZiBpdHMKICAgIGF0dHJpYnV0ZXMgYW5kIHJlbGF0aW9uc2hpcHMuCgogICAgRm9yIGV4YW1wbGU6CgogICAgYGBgamF2YXNjcmlwdAoKICAgIEFwcC5CbG9nID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgICAgdXNlcnM6IERTLmhhc01hbnkoJ3VzZXInKSwKICAgICAgb3duZXI6IERTLmJlbG9uZ3NUbygndXNlcicpLAoKICAgICAgcG9zdHM6IERTLmhhc01hbnkoJ3Bvc3QnKSwKCiAgICAgIHRpdGxlOiBEUy5hdHRyKCdzdHJpbmcnKQogICAgfSk7CgogICAgdmFyIGZpZWxkcyA9IEVtYmVyLmdldChBcHAuQmxvZywgJ2ZpZWxkcycpOwogICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQsIGtpbmQpIHsKICAgICAgY29uc29sZS5sb2coZmllbGQsIGtpbmQpOwogICAgfSk7CgogICAgLy8gcHJpbnRzOgogICAgLy8gdXNlcnMsIGhhc01hbnkKICAgIC8vIG93bmVyLCBiZWxvbmdzVG8KICAgIC8vIHBvc3RzLCBoYXNNYW55CiAgICAvLyB0aXRsZSwgYXR0cmlidXRlCiAgICBgYGAKCiAgICBAcHJvcGVydHkgZmllbGRzCiAgICBAc3RhdGljCiAgICBAdHlwZSBFbWJlci5NYXAKICAgIEByZWFkT25seQogICovCiAgZmllbGRzOiBFbWJlci5jb21wdXRlZChmdW5jdGlvbigpIHsKICAgIHZhciBtYXAgPSBFbWJlci5NYXAuY3JlYXRlKCk7CgogICAgdGhpcy5lYWNoQ29tcHV0ZWRQcm9wZXJ0eShmdW5jdGlvbihuYW1lLCBtZXRhKSB7CiAgICAgIGlmIChtZXRhLmlzUmVsYXRpb25zaGlwKSB7CiAgICAgICAgbWFwLnNldChuYW1lLCBtZXRhLmtpbmQpOwogICAgICB9IGVsc2UgaWYgKG1ldGEuaXNBdHRyaWJ1dGUpIHsKICAgICAgICBtYXAuc2V0KG5hbWUsICdhdHRyaWJ1dGUnKTsKICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIG1hcDsKICB9KSwKCiAgLyoqCiAgICBHaXZlbiBhIGNhbGxiYWNrLCBpdGVyYXRlcyBvdmVyIGVhY2ggb2YgdGhlIHJlbGF0aW9uc2hpcHMgaW4gdGhlIG1vZGVsLAogICAgaW52b2tpbmcgdGhlIGNhbGxiYWNrIHdpdGggdGhlIG5hbWUgb2YgZWFjaCByZWxhdGlvbnNoaXAgYW5kIGl0cyByZWxhdGlvbnNoaXAKICAgIGRlc2NyaXB0b3IuCgogICAgQG1ldGhvZCBlYWNoUmVsYXRpb25zaGlwCiAgICBAc3RhdGljCiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gaW52b2tlCiAgICBAcGFyYW0ge2FueX0gYmluZGluZyB0aGUgdmFsdWUgdG8gd2hpY2ggdGhlIGNhbGxiYWNrJ3MgYHRoaXNgIHNob3VsZCBiZSBib3VuZAogICovCiAgZWFjaFJlbGF0aW9uc2hpcDogZnVuY3Rpb24oY2FsbGJhY2ssIGJpbmRpbmcpIHsKICAgIGdldCh0aGlzLCAncmVsYXRpb25zaGlwc0J5TmFtZScpLmZvckVhY2goZnVuY3Rpb24obmFtZSwgcmVsYXRpb25zaGlwKSB7CiAgICAgIGNhbGxiYWNrLmNhbGwoYmluZGluZywgbmFtZSwgcmVsYXRpb25zaGlwKTsKICAgIH0pOwogIH0sCgogIC8qKgogICAgR2l2ZW4gYSBjYWxsYmFjaywgaXRlcmF0ZXMgb3ZlciBlYWNoIG9mIHRoZSB0eXBlcyByZWxhdGVkIHRvIGEgbW9kZWwsCiAgICBpbnZva2luZyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcmVsYXRlZCB0eXBlJ3MgY2xhc3MuIEVhY2ggdHlwZSB3aWxsIGJlCiAgICByZXR1cm5lZCBqdXN0IG9uY2UsIHJlZ2FyZGxlc3Mgb2YgaG93IG1hbnkgZGlmZmVyZW50IHJlbGF0aW9uc2hpcHMgaXQgaGFzCiAgICB3aXRoIGEgbW9kZWwuCgogICAgQG1ldGhvZCBlYWNoUmVsYXRlZFR5cGUKICAgIEBzdGF0aWMKICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBjYWxsYmFjayB0byBpbnZva2UKICAgIEBwYXJhbSB7YW55fSBiaW5kaW5nIHRoZSB2YWx1ZSB0byB3aGljaCB0aGUgY2FsbGJhY2sncyBgdGhpc2Agc2hvdWxkIGJlIGJvdW5kCiAgKi8KICBlYWNoUmVsYXRlZFR5cGU6IGZ1bmN0aW9uKGNhbGxiYWNrLCBiaW5kaW5nKSB7CiAgICBnZXQodGhpcywgJ3JlbGF0ZWRUeXBlcycpLmZvckVhY2goZnVuY3Rpb24odHlwZSkgewogICAgICBjYWxsYmFjay5jYWxsKGJpbmRpbmcsIHR5cGUpOwogICAgfSk7CiAgfQp9KTsKCkRTLk1vZGVsLnJlb3Blbih7CiAgLyoqCiAgICBHaXZlbiBhIGNhbGxiYWNrLCBpdGVyYXRlcyBvdmVyIGVhY2ggb2YgdGhlIHJlbGF0aW9uc2hpcHMgaW4gdGhlIG1vZGVsLAogICAgaW52b2tpbmcgdGhlIGNhbGxiYWNrIHdpdGggdGhlIG5hbWUgb2YgZWFjaCByZWxhdGlvbnNoaXAgYW5kIGl0cyByZWxhdGlvbnNoaXAKICAgIGRlc2NyaXB0b3IuCgogICAgQG1ldGhvZCBlYWNoUmVsYXRpb25zaGlwCiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gaW52b2tlCiAgICBAcGFyYW0ge2FueX0gYmluZGluZyB0aGUgdmFsdWUgdG8gd2hpY2ggdGhlIGNhbGxiYWNrJ3MgYHRoaXNgIHNob3VsZCBiZSBib3VuZAogICovCiAgZWFjaFJlbGF0aW9uc2hpcDogZnVuY3Rpb24oY2FsbGJhY2ssIGJpbmRpbmcpIHsKICAgIHRoaXMuY29uc3RydWN0b3IuZWFjaFJlbGF0aW9uc2hpcChjYWxsYmFjaywgYmluZGluZyk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0Owp2YXIgb25jZSA9IEVtYmVyLnJ1bi5vbmNlOwp2YXIgZm9yRWFjaCA9IEVtYmVyLkVudW1lcmFibGVVdGlscy5mb3JFYWNoOwoKLyoqCiAgQGNsYXNzIFJlY29yZEFycmF5TWFuYWdlcgogIEBuYW1lc3BhY2UgRFMKICBAcHJpdmF0ZQogIEBleHRlbmRzIEVtYmVyLk9iamVjdAoqLwpEUy5SZWNvcmRBcnJheU1hbmFnZXIgPSBFbWJlci5PYmplY3QuZXh0ZW5kKHsKICBpbml0OiBmdW5jdGlvbigpIHsKICAgIHRoaXMuZmlsdGVyZWRSZWNvcmRBcnJheXMgPSBFbWJlci5NYXBXaXRoRGVmYXVsdC5jcmVhdGUoewogICAgICBkZWZhdWx0VmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH0KICAgIH0pOwoKICAgIHRoaXMuY2hhbmdlZFJlY29yZHMgPSBbXTsKICB9LAoKICByZWNvcmREaWRDaGFuZ2U6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgdGhpcy5jaGFuZ2VkUmVjb3Jkcy5wdXNoKHJlY29yZCk7CiAgICBvbmNlKHRoaXMsIHRoaXMudXBkYXRlUmVjb3JkQXJyYXlzKTsKICB9LAoKICByZWNvcmRBcnJheXNGb3JSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgcmVjb3JkLl9yZWNvcmRBcnJheXMgPSByZWNvcmQuX3JlY29yZEFycmF5cyB8fCBFbWJlci5PcmRlcmVkU2V0LmNyZWF0ZSgpOwogICAgcmV0dXJuIHJlY29yZC5fcmVjb3JkQXJyYXlzOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgaXMgaW52b2tlZCB3aGVuZXZlciBkYXRhIGlzIGxvYWRlZCBpbnRvIHRoZSBzdG9yZSBieSB0aGUKICAgIGFkYXB0ZXIgb3IgdXBkYXRlZCBieSB0aGUgYWRhcHRlciwgb3Igd2hlbiBhIHJlY29yZCBoYXMgY2hhbmdlZC4KCiAgICBJdCB1cGRhdGVzIGFsbCByZWNvcmQgYXJyYXlzIHRoYXQgYSByZWNvcmQgYmVsb25ncyB0by4KCiAgICBUbyBhdm9pZCB0aHJhc2hpbmcsIGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UgcGVyIHJ1biBsb29wLgoKICAgIEBtZXRob2QgdXBkYXRlUmVjb3JkQXJyYXlzCiAgICBAcGFyYW0ge0NsYXNzfSB0eXBlCiAgICBAcGFyYW0ge051bWJlcnxTdHJpbmd9IGNsaWVudElkCiAgKi8KICB1cGRhdGVSZWNvcmRBcnJheXM6IGZ1bmN0aW9uKCkgewogICAgZm9yRWFjaCh0aGlzLmNoYW5nZWRSZWNvcmRzLCBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgaWYgKGdldChyZWNvcmQsICdpc0RlbGV0ZWQnKSkgewogICAgICAgIHRoaXMuX3JlY29yZFdhc0RlbGV0ZWQocmVjb3JkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9yZWNvcmRXYXNDaGFuZ2VkKHJlY29yZCk7CiAgICAgIH0KICAgIH0sIHRoaXMpOwoKICAgIHRoaXMuY2hhbmdlZFJlY29yZHMgPSBbXTsKICB9LAoKICBfcmVjb3JkV2FzRGVsZXRlZDogZnVuY3Rpb24gKHJlY29yZCkgewogICAgdmFyIHJlY29yZEFycmF5cyA9IHJlY29yZC5fcmVjb3JkQXJyYXlzOwoKICAgIGlmICghcmVjb3JkQXJyYXlzKSB7IHJldHVybjsgfQoKICAgIGZvckVhY2gocmVjb3JkQXJyYXlzLCBmdW5jdGlvbihhcnJheSkgewogICAgICBhcnJheS5yZW1vdmVSZWNvcmQocmVjb3JkKTsKICAgIH0pOwogIH0sCgogIF9yZWNvcmRXYXNDaGFuZ2VkOiBmdW5jdGlvbiAocmVjb3JkKSB7CiAgICB2YXIgdHlwZSA9IHJlY29yZC5jb25zdHJ1Y3RvciwKICAgICAgICByZWNvcmRBcnJheXMgPSB0aGlzLmZpbHRlcmVkUmVjb3JkQXJyYXlzLmdldCh0eXBlKSwKICAgICAgICBmaWx0ZXI7CgogICAgZm9yRWFjaChyZWNvcmRBcnJheXMsIGZ1bmN0aW9uKGFycmF5KSB7CiAgICAgIGZpbHRlciA9IGdldChhcnJheSwgJ2ZpbHRlckZ1bmN0aW9uJyk7CiAgICAgIHRoaXMudXBkYXRlUmVjb3JkQXJyYXkoYXJyYXksIGZpbHRlciwgdHlwZSwgcmVjb3JkKTsKICAgIH0sIHRoaXMpOwoKICAgIC8vIGxvb3AgdGhyb3VnaCBhbGwgbWFueUFycmF5cyBjb250YWluaW5nIGFuIHVubG9hZGVkIGNvcHkgb2YgdGhpcwogICAgLy8gY2xpZW50SWQgYW5kIG5vdGlmeSB0aGVtIHRoYXQgdGhlIHJlY29yZCB3YXMgbG9hZGVkLgogICAgdmFyIG1hbnlBcnJheXMgPSByZWNvcmQuX2xvYWRpbmdSZWNvcmRBcnJheXM7CgogICAgaWYgKG1hbnlBcnJheXMpIHsKICAgICAgZm9yICh2YXIgaT0wLCBsPW1hbnlBcnJheXMubGVuZ3RoOyBpPGw7IGkrKykgewogICAgICAgIG1hbnlBcnJheXNbaV0ubG9hZGVkUmVjb3JkKCk7CiAgICAgIH0KCiAgICAgIHJlY29yZC5fbG9hZGluZ1JlY29yZEFycmF5cyA9IFtdOwogICAgfQogIH0sCgogIC8qKgogICAgVXBkYXRlIGFuIGluZGl2aWR1YWwgZmlsdGVyLgoKICAgIEBtZXRob2QgdXBkYXRlUmVjb3JkQXJyYXkKICAgIEBwYXJhbSB7RFMuRmlsdGVyZWRSZWNvcmRBcnJheX0gYXJyYXkKICAgIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlcgogICAgQHBhcmFtIHtDbGFzc30gdHlwZQogICAgQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBjbGllbnRJZAogICovCiAgdXBkYXRlUmVjb3JkQXJyYXk6IGZ1bmN0aW9uKGFycmF5LCBmaWx0ZXIsIHR5cGUsIHJlY29yZCkgewogICAgdmFyIHNob3VsZEJlSW5BcnJheTsKCiAgICBpZiAoIWZpbHRlcikgewogICAgICBzaG91bGRCZUluQXJyYXkgPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgc2hvdWxkQmVJbkFycmF5ID0gZmlsdGVyKHJlY29yZCk7CiAgICB9CgogICAgdmFyIHJlY29yZEFycmF5cyA9IHRoaXMucmVjb3JkQXJyYXlzRm9yUmVjb3JkKHJlY29yZCk7CgogICAgaWYgKHNob3VsZEJlSW5BcnJheSkgewogICAgICByZWNvcmRBcnJheXMuYWRkKGFycmF5KTsKICAgICAgYXJyYXkuYWRkUmVjb3JkKHJlY29yZCk7CiAgICB9IGVsc2UgaWYgKCFzaG91bGRCZUluQXJyYXkpIHsKICAgICAgcmVjb3JkQXJyYXlzLnJlbW92ZShhcnJheSk7CiAgICAgIGFycmF5LnJlbW92ZVJlY29yZChyZWNvcmQpOwogICAgfQogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgaXMgaW52b2tlZCBpZiB0aGUgYGZpbHRlckZ1bmN0aW9uYCBwcm9wZXJ0eSBpcwogICAgY2hhbmdlZCBvbiBhIGBEUy5GaWx0ZXJlZFJlY29yZEFycmF5YC4KCiAgICBJdCBlc3NlbnRpYWxseSByZS1ydW5zIHRoZSBmaWx0ZXIgZnJvbSBzY3JhdGNoLiBUaGlzIHNhbWUKICAgIG1ldGhvZCBpcyBpbnZva2VkIHdoZW4gdGhlIGZpbHRlciBpcyBjcmVhdGVkIGluIHRoIGZpcnN0IHBsYWNlLgoKICAgIEBtZXRob2QgdXBkYXRlRmlsdGVyCiAgICBAcGFyYW0gYXJyYXkKICAgIEBwYXJhbSB0eXBlCiAgICBAcGFyYW0gZmlsdGVyCiAgKi8KICB1cGRhdGVGaWx0ZXI6IGZ1bmN0aW9uKGFycmF5LCB0eXBlLCBmaWx0ZXIpIHsKICAgIHZhciB0eXBlTWFwID0gdGhpcy5zdG9yZS50eXBlTWFwRm9yKHR5cGUpLAogICAgICAgIHJlY29yZHMgPSB0eXBlTWFwLnJlY29yZHMsIHJlY29yZDsKCiAgICBmb3IgKHZhciBpPTAsIGw9cmVjb3Jkcy5sZW5ndGg7IGk8bDsgaSsrKSB7CiAgICAgIHJlY29yZCA9IHJlY29yZHNbaV07CgogICAgICBpZiAoIWdldChyZWNvcmQsICdpc0RlbGV0ZWQnKSAmJiAhZ2V0KHJlY29yZCwgJ2lzRW1wdHknKSkgewogICAgICAgIHRoaXMudXBkYXRlUmVjb3JkQXJyYXkoYXJyYXksIGZpbHRlciwgdHlwZSwgcmVjb3JkKTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAgQ3JlYXRlIGEgYERTLk1hbnlBcnJheWAgZm9yIGEgdHlwZSBhbmQgbGlzdCBvZiByZWNvcmQgcmVmZXJlbmNlcywgYW5kIGluZGV4CiAgICB0aGUgYE1hbnlBcnJheWAgdW5kZXIgZWFjaCByZWZlcmVuY2UuIFRoaXMgYWxsb3dzIHVzIHRvIGVmZmljaWVudGx5IHJlbW92ZQogICAgcmVjb3JkcyBmcm9tIGBNYW55QXJyYXlgcyB3aGVuIHRoZXkgYXJlIGRlbGV0ZWQuCgogICAgQG1ldGhvZCBjcmVhdGVNYW55QXJyYXkKICAgIEBwYXJhbSB7Q2xhc3N9IHR5cGUKICAgIEBwYXJhbSB7QXJyYXl9IHJlZmVyZW5jZXMKICAgIEByZXR1cm4ge0RTLk1hbnlBcnJheX0KICAqLwogIGNyZWF0ZU1hbnlBcnJheTogZnVuY3Rpb24odHlwZSwgcmVjb3JkcykgewogICAgdmFyIG1hbnlBcnJheSA9IERTLk1hbnlBcnJheS5jcmVhdGUoewogICAgICB0eXBlOiB0eXBlLAogICAgICBjb250ZW50OiByZWNvcmRzLAogICAgICBzdG9yZTogdGhpcy5zdG9yZQogICAgfSk7CgogICAgZm9yRWFjaChyZWNvcmRzLCBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgdmFyIGFycmF5cyA9IHRoaXMucmVjb3JkQXJyYXlzRm9yUmVjb3JkKHJlY29yZCk7CiAgICAgIGFycmF5cy5hZGQobWFueUFycmF5KTsKICAgIH0sIHRoaXMpOwoKICAgIHJldHVybiBtYW55QXJyYXk7CiAgfSwKCiAgLyoqCiAgICBDcmVhdGUgYSBgRFMuUmVjb3JkQXJyYXlgIGZvciBhIHR5cGUgYW5kIHJlZ2lzdGVyIGl0IGZvciB1cGRhdGVzLgoKICAgIEBtZXRob2QgY3JlYXRlUmVjb3JkQXJyYXkKICAgIEBwYXJhbSB7Q2xhc3N9IHR5cGUKICAgIEByZXR1cm4ge0RTLlJlY29yZEFycmF5fQogICovCiAgY3JlYXRlUmVjb3JkQXJyYXk6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIHZhciBhcnJheSA9IERTLlJlY29yZEFycmF5LmNyZWF0ZSh7CiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIGNvbnRlbnQ6IEVtYmVyLkEoKSwKICAgICAgc3RvcmU6IHRoaXMuc3RvcmUsCiAgICAgIGlzTG9hZGVkOiB0cnVlCiAgICB9KTsKCiAgICB0aGlzLnJlZ2lzdGVyRmlsdGVyZWRSZWNvcmRBcnJheShhcnJheSwgdHlwZSk7CgogICAgcmV0dXJuIGFycmF5OwogIH0sCgogIC8qKgogICAgQ3JlYXRlIGEgYERTLkZpbHRlcmVkUmVjb3JkQXJyYXlgIGZvciBhIHR5cGUgYW5kIHJlZ2lzdGVyIGl0IGZvciB1cGRhdGVzLgoKICAgIEBtZXRob2QgY3JlYXRlRmlsdGVyZWRSZWNvcmRBcnJheQogICAgQHBhcmFtIHtDbGFzc30gdHlwZQogICAgQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyCiAgICBAcmV0dXJuIHtEUy5GaWx0ZXJlZFJlY29yZEFycmF5fQogICovCiAgY3JlYXRlRmlsdGVyZWRSZWNvcmRBcnJheTogZnVuY3Rpb24odHlwZSwgZmlsdGVyKSB7CiAgICB2YXIgYXJyYXkgPSBEUy5GaWx0ZXJlZFJlY29yZEFycmF5LmNyZWF0ZSh7CiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIGNvbnRlbnQ6IEVtYmVyLkEoKSwKICAgICAgc3RvcmU6IHRoaXMuc3RvcmUsCiAgICAgIG1hbmFnZXI6IHRoaXMsCiAgICAgIGZpbHRlckZ1bmN0aW9uOiBmaWx0ZXIKICAgIH0pOwoKICAgIHRoaXMucmVnaXN0ZXJGaWx0ZXJlZFJlY29yZEFycmF5KGFycmF5LCB0eXBlLCBmaWx0ZXIpOwoKICAgIHJldHVybiBhcnJheTsKICB9LAoKICAvKioKICAgIENyZWF0ZSBhIGBEUy5BZGFwdGVyUG9wdWxhdGVkUmVjb3JkQXJyYXlgIGZvciBhIHR5cGUgd2l0aCBnaXZlbiBxdWVyeS4KCiAgICBAbWV0aG9kIGNyZWF0ZUFkYXB0ZXJQb3B1bGF0ZWRSZWNvcmRBcnJheQogICAgQHBhcmFtIHtDbGFzc30gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IHF1ZXJ5CiAgICBAcmV0dXJuIHtEUy5BZGFwdGVyUG9wdWxhdGVkUmVjb3JkQXJyYXl9CiAgKi8KICBjcmVhdGVBZGFwdGVyUG9wdWxhdGVkUmVjb3JkQXJyYXk6IGZ1bmN0aW9uKHR5cGUsIHF1ZXJ5KSB7CiAgICByZXR1cm4gRFMuQWRhcHRlclBvcHVsYXRlZFJlY29yZEFycmF5LmNyZWF0ZSh7CiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgY29udGVudDogRW1iZXIuQSgpLAogICAgICBzdG9yZTogdGhpcy5zdG9yZQogICAgfSk7CiAgfSwKCiAgLyoqCiAgICBSZWdpc3RlciBhIFJlY29yZEFycmF5IGZvciBhIGdpdmVuIHR5cGUgdG8gYmUgYmFja2VkIGJ5CiAgICBhIGZpbHRlciBmdW5jdGlvbi4gVGhpcyB3aWxsIGNhdXNlIHRoZSBhcnJheSB0byB1cGRhdGUKICAgIGF1dG9tYXRpY2FsbHkgd2hlbiByZWNvcmRzIG9mIHRoYXQgdHlwZSBjaGFuZ2UgYXR0cmlidXRlCiAgICB2YWx1ZXMgb3Igc3RhdGVzLgoKICAgIEBtZXRob2QgcmVnaXN0ZXJGaWx0ZXJlZFJlY29yZEFycmF5CiAgICBAcGFyYW0ge0RTLlJlY29yZEFycmF5fSBhcnJheQogICAgQHBhcmFtIHtDbGFzc30gdHlwZQogICAgQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyCiAgKi8KICByZWdpc3RlckZpbHRlcmVkUmVjb3JkQXJyYXk6IGZ1bmN0aW9uKGFycmF5LCB0eXBlLCBmaWx0ZXIpIHsKICAgIHZhciByZWNvcmRBcnJheXMgPSB0aGlzLmZpbHRlcmVkUmVjb3JkQXJyYXlzLmdldCh0eXBlKTsKICAgIHJlY29yZEFycmF5cy5wdXNoKGFycmF5KTsKCiAgICB0aGlzLnVwZGF0ZUZpbHRlcihhcnJheSwgdHlwZSwgZmlsdGVyKTsKICB9LAoKICAvLyBJbnRlcm5hbGx5LCB3ZSBtYWludGFpbiBhIG1hcCBvZiBhbGwgdW5sb2FkZWQgSURzIHJlcXVlc3RlZCBieQogIC8vIGEgTWFueUFycmF5LiBBcyB0aGUgYWRhcHRlciBsb2FkcyBkYXRhIGludG8gdGhlIHN0b3JlLCB0aGUKICAvLyBzdG9yZSBub3RpZmllcyBhbnkgaW50ZXJlc3RlZCBNYW55QXJyYXlzLiBXaGVuIHRoZSBNYW55QXJyYXkncwogIC8vIHRvdGFsIG51bWJlciBvZiBsb2FkaW5nIHJlY29yZHMgZHJvcHMgdG8gemVybywgaXQgYmVjb21lcwogIC8vIGBpc0xvYWRlZGAgYW5kIGZpcmVzIGEgYGRpZExvYWRgIGV2ZW50LgogIHJlZ2lzdGVyV2FpdGluZ1JlY29yZEFycmF5OiBmdW5jdGlvbihyZWNvcmQsIGFycmF5KSB7CiAgICB2YXIgbG9hZGluZ1JlY29yZEFycmF5cyA9IHJlY29yZC5fbG9hZGluZ1JlY29yZEFycmF5cyB8fCBbXTsKICAgIGxvYWRpbmdSZWNvcmRBcnJheXMucHVzaChhcnJheSk7CiAgICByZWNvcmQuX2xvYWRpbmdSZWNvcmRBcnJheXMgPSBsb2FkaW5nUmVjb3JkQXJyYXlzOwogIH0KfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0Owp2YXIgbWFwID0gRW1iZXIuQXJyYXlQb2x5ZmlsbHMubWFwOwoKdmFyIGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnbWVzc2FnZScsICduYW1lJywgJ251bWJlcicsICdzdGFjayddOwoKLyoqCiAgQSBgRFMuSW52YWxpZEVycm9yYCBpcyB1c2VkIGJ5IGFuIGFkYXB0ZXIgdG8gc2lnbmFsIHRoZSBleHRlcm5hbCBBUEkKICB3YXMgdW5hYmxlIHRvIHByb2Nlc3MgYSByZXF1ZXN0IGJlY2F1c2UgdGhlIGNvbnRlbnQgd2FzIG5vdAogIHNlbWFudGljYWxseSBjb3JyZWN0IG9yIG1lYW5pbmdmdWwgcGVyIHRoZSBBUEkuIFVzdWFsbHkgdGhpcyBtZWFucyBhCiAgcmVjb3JkIGZhaWxlZCBzb21lIGZvcm0gb2Ygc2VydmVyIHNpZGUgdmFsaWRhdGlvbi4gV2hlbiBhIHByb21pc2UKICBmcm9tIGFuIGFkYXB0ZXIgaXMgcmVqZWN0ZWQgd2l0aCBhIGBEUy5JbnZhbGlkRXJyb3JgIHRoZSByZWNvcmQgd2lsbAogIHRyYW5zaXRpb24gdG8gdGhlIGBpbnZhbGlkYCBzdGF0ZSBhbmQgdGhlIGVycm9ycyB3aWxsIGJlIHNldCB0byB0aGUKICBgZXJyb3JzYCBwcm9wZXJ0eSBvbiB0aGUgcmVjb3JkLgoKICBFeGFtcGxlCgogIGBgYGphdmFzY3JpcHQKICBBcHAuQXBwbGljYXRpb25BZGFwdGVyID0gRFMuUkVTVEFkYXB0ZXIuZXh0ZW5kKHsKICAgIGFqYXhFcnJvcjogZnVuY3Rpb24oanFYSFIpIHsKICAgICAgdmFyIGVycm9yID0gdGhpcy5fc3VwZXIoanFYSFIpOwoKICAgICAgaWYgKGpxWEhSICYmIGpxWEhSLnN0YXR1cyA9PT0gNDIyKSB7CiAgICAgICAgdmFyIGpzb25FcnJvcnMgPSBFbWJlci4kLnBhcnNlSlNPTihqcVhIUi5yZXNwb25zZVRleHQpWyJlcnJvcnMiXTsKICAgICAgICByZXR1cm4gbmV3IERTLkludmFsaWRFcnJvcihqc29uRXJyb3JzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgIH0KICAgIH0KICB9KTsKICBgYGAKCiAgQGNsYXNzIEludmFsaWRFcnJvcgogIEBuYW1lc3BhY2UgRFMKKi8KRFMuSW52YWxpZEVycm9yID0gZnVuY3Rpb24oZXJyb3JzKSB7CiAgdmFyIHRtcCA9IEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsICJUaGUgYmFja2VuZCByZWplY3RlZCB0aGUgY29tbWl0IGJlY2F1c2UgaXQgd2FzIGludmFsaWQ6ICIgKyBFbWJlci5pbnNwZWN0KGVycm9ycykpOwogIHRoaXMuZXJyb3JzID0gZXJyb3JzOwoKICBmb3IgKHZhciBpPTAsIGw9ZXJyb3JQcm9wcy5sZW5ndGg7IGk8bDsgaSsrKSB7CiAgICB0aGlzW2Vycm9yUHJvcHNbaV1dID0gdG1wW2Vycm9yUHJvcHNbaV1dOwogIH0KfTsKRFMuSW52YWxpZEVycm9yLnByb3RvdHlwZSA9IEVtYmVyLmNyZWF0ZShFcnJvci5wcm90b3R5cGUpOwoKLyoqCiAgQW4gYWRhcHRlciBpcyBhbiBvYmplY3QgdGhhdCByZWNlaXZlcyByZXF1ZXN0cyBmcm9tIGEgc3RvcmUgYW5kCiAgdHJhbnNsYXRlcyB0aGVtIGludG8gdGhlIGFwcHJvcHJpYXRlIGFjdGlvbiB0byB0YWtlIGFnYWluc3QgeW91cgogIHBlcnNpc3RlbmNlIGxheWVyLiBUaGUgcGVyc2lzdGVuY2UgbGF5ZXIgaXMgdXN1YWxseSBhbiBIVFRQIEFQSSwgYnV0CiAgbWF5IGJlIGFueXRoaW5nLCBzdWNoIGFzIHRoZSBicm93c2VyJ3MgbG9jYWwgc3RvcmFnZS4gVHlwaWNhbGx5IHRoZQogIGFkYXB0ZXIgaXMgbm90IGludm9rZWQgZGlyZWN0bHkgaW5zdGVhZCBpdHMgZnVuY3Rpb25hbGl0eSBpcyBhY2Nlc3NlZAogIHRocm91Z2ggdGhlIGBzdG9yZWAuCgogICMjIyBDcmVhdGluZyBhbiBBZGFwdGVyCgogIEZpcnN0LCBjcmVhdGUgYSBuZXcgc3ViY2xhc3Mgb2YgYERTLkFkYXB0ZXJgOgoKICBgYGBqYXZhc2NyaXB0CiAgQXBwLk15QWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5kKHsKICAgIC8vIC4uLnlvdXIgY29kZSBoZXJlCiAgfSk7CiAgYGBgCgogIFRvIHRlbGwgeW91ciBzdG9yZSB3aGljaCBhZGFwdGVyIHRvIHVzZSwgc2V0IGl0cyBgYWRhcHRlcmAgcHJvcGVydHk6CgogIGBgYGphdmFzY3JpcHQKICBBcHAuc3RvcmUgPSBEUy5TdG9yZS5jcmVhdGUoewogICAgYWRhcHRlcjogQXBwLk15QWRhcHRlci5jcmVhdGUoKQogIH0pOwogIGBgYAoKICBgRFMuQWRhcHRlcmAgaXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyB0aGF0IHlvdSBzaG91bGQgb3ZlcnJpZGUgaW4geW91cgogIGFwcGxpY2F0aW9uIHRvIGN1c3RvbWl6ZSBpdCBmb3IgeW91ciBiYWNrZW5kLiBUaGUgbWluaW11bSBzZXQgb2YgbWV0aG9kcwogIHRoYXQgeW91IHNob3VsZCBpbXBsZW1lbnQgaXM6CgogICAgKiBgZmluZCgpYAogICAgKiBgY3JlYXRlUmVjb3JkKClgCiAgICAqIGB1cGRhdGVSZWNvcmQoKWAKICAgICogYGRlbGV0ZVJlY29yZCgpYAogICAgKiBgZmluZEFsbCgpYAogICAgKiBgZmluZFF1ZXJ5KClgCgogIFRvIGltcHJvdmUgdGhlIG5ldHdvcmsgcGVyZm9ybWFuY2Ugb2YgeW91ciBhcHBsaWNhdGlvbiwgeW91IGNhbiBvcHRpbWl6ZQogIHlvdXIgYWRhcHRlciBieSBvdmVycmlkaW5nIHRoZXNlIGxvd2VyLWxldmVsIG1ldGhvZHM6CgogICAgKiBgZmluZE1hbnkoKWAKCgogIEZvciBhbiBleGFtcGxlIGltcGxlbWVudGF0aW9uLCBzZWUgYERTLlJFU1RBZGFwdGVyYCwgdGhlCiAgaW5jbHVkZWQgUkVTVCBhZGFwdGVyLgoKICBAY2xhc3MgQWRhcHRlcgogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBFbWJlci5PYmplY3QKKi8KCkRTLkFkYXB0ZXIgPSBFbWJlci5PYmplY3QuZXh0ZW5kKHsKCiAgLyoqCiAgICBJZiB5b3Ugd291bGQgbGlrZSB5b3VyIGFkYXB0ZXIgdG8gdXNlIGEgY3VzdG9tIHNlcmlhbGl6ZXIgeW91IGNhbgogICAgc2V0IHRoZSBgZGVmYXVsdFNlcmlhbGl6ZXJgIHByb3BlcnR5IHRvIGJlIHRoZSBuYW1lIG9mIHRoZSBjdXN0b20KICAgIHNlcmlhbGl6ZXIuCgogICAgTm90ZSB0aGUgYGRlZmF1bHRTZXJpYWxpemVyYCBzZXJpYWxpemVyIGhhcyBhIGxvd2VyIHByaW9yaXR5IHRoZW4KICAgIGEgbW9kZWwgc3BlY2lmaWMgc2VyaWFsaXplciAoaS5lLiBgUG9zdFNlcmlhbGl6ZXJgKSBvciB0aGUKICAgIGBhcHBsaWNhdGlvbmAgc2VyaWFsaXplci4KCiAgICBgYGBqYXZhc2NyaXB0CiAgICB2YXIgRGphbmdvQWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5kKHsKICAgICAgZGVmYXVsdFNlcmlhbGl6ZXI6ICdkamFuZ28nCiAgICB9KTsKICAgIGBgYAoKICAgIEBwcm9wZXJ0eSBkZWZhdWx0U2VyaWFsaXplcgogICAgQHR5cGUge1N0cmluZ30KICAqLwoKICAvKioKICAgIFRoZSBgZmluZCgpYCBtZXRob2QgaXMgaW52b2tlZCB3aGVuIHRoZSBzdG9yZSBpcyBhc2tlZCBmb3IgYSByZWNvcmQgdGhhdAogICAgaGFzIG5vdCBwcmV2aW91c2x5IGJlZW4gbG9hZGVkLiBJbiByZXNwb25zZSB0byBgZmluZCgpYCBiZWluZyBjYWxsZWQsIHlvdQogICAgc2hvdWxkIHF1ZXJ5IHlvdXIgcGVyc2lzdGVuY2UgbGF5ZXIgZm9yIGEgcmVjb3JkIHdpdGggdGhlIGdpdmVuIElELiBPbmNlCiAgICBmb3VuZCwgeW91IGNhbiBhc3luY2hyb25vdXNseSBjYWxsIHRoZSBzdG9yZSdzIGBwdXNoKClgIG1ldGhvZCB0byBwdXNoCiAgICB0aGUgcmVjb3JkIGludG8gdGhlIHN0b3JlLgoKICAgIEhlcmUgaXMgYW4gZXhhbXBsZSBgZmluZGAgaW1wbGVtZW50YXRpb246CgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLkFwcGxpY2F0aW9uQWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5kKHsKICAgICAgZmluZDogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIGlkKSB7CiAgICAgICAgdmFyIHVybCA9IFt0eXBlLCBpZF0uam9pbignLycpOwoKICAgICAgICByZXR1cm4gbmV3IEVtYmVyLlJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgIGpRdWVyeS5nZXRKU09OKHVybCkudGhlbihmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIEVtYmVyLnJ1bihudWxsLCByZXNvbHZlLCBkYXRhKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uKGpxWEhSKSB7CiAgICAgICAgICAgIGpxWEhSLnRoZW4gPSBudWxsOyAvLyB0YW1lIGpRdWVyeSdzIGlsbCBtYW5uZXJlZCBwcm9taXNlcwogICAgICAgICAgICBFbWJlci5ydW4obnVsbCwgcmVqZWN0LCBqcVhIUik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIGZpbmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge1N0cmluZ30gaWQKICAgIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmQ6IEVtYmVyLnJlcXVpcmVkKEZ1bmN0aW9uKSwKCiAgLyoqCiAgICBUaGUgYGZpbmRBbGwoKWAgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHlvdSBjYWxsIGBmaW5kYCBvbiB0aGUgc3RvcmUKICAgIHdpdGhvdXQgYW4gSUQgKGkuZS4gYHN0b3JlLmZpbmQoJ3Bvc3QnKWApLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuQXBwbGljYXRpb25BZGFwdGVyID0gRFMuQWRhcHRlci5leHRlbmQoewogICAgICBmaW5kQWxsOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgc2luY2VUb2tlbikgewogICAgICAgIHZhciB1cmwgPSB0eXBlOwogICAgICAgIHZhciBxdWVyeSA9IHsgc2luY2U6IHNpbmNlVG9rZW4gfTsKICAgICAgICByZXR1cm4gbmV3IEVtYmVyLlJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgIGpRdWVyeS5nZXRKU09OKHVybCwgcXVlcnkpLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBFbWJlci5ydW4obnVsbCwgcmVzb2x2ZSwgZGF0YSk7CiAgICAgICAgICB9LCBmdW5jdGlvbihqcVhIUikgewogICAgICAgICAgICBqcVhIUi50aGVuID0gbnVsbDsgLy8gdGFtZSBqUXVlcnkncyBpbGwgbWFubmVyZWQgcHJvbWlzZXMKICAgICAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlamVjdCwganFYSFIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQHByaXZhdGUKICAgIEBtZXRob2QgZmluZEFsbAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7U3RyaW5nfSBzaW5jZVRva2VuCiAgICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICBmaW5kQWxsOiBudWxsLAoKICAvKioKICAgIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHlvdSBjYWxsIGBmaW5kYCBvbiB0aGUgc3RvcmUgd2l0aCBhCiAgICBxdWVyeSBvYmplY3QgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIgKGkuZS4gYHN0b3JlLmZpbmQoJ3BlcnNvbicsIHsKICAgIHBhZ2U6IDEgfSlgKS4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLkFwcGxpY2F0aW9uQWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5kKHsKICAgICAgZmluZFF1ZXJ5OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcXVlcnkpIHsKICAgICAgICB2YXIgdXJsID0gdHlwZTsKICAgICAgICByZXR1cm4gbmV3IEVtYmVyLlJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgIGpRdWVyeS5nZXRKU09OKHVybCwgcXVlcnkpLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBFbWJlci5ydW4obnVsbCwgcmVzb2x2ZSwgZGF0YSk7CiAgICAgICAgICB9LCBmdW5jdGlvbihqcVhIUikgewogICAgICAgICAgICBqcVhIUi50aGVuID0gbnVsbDsgLy8gdGFtZSBqUXVlcnkncyBpbGwgbWFubmVyZWQgcHJvbWlzZXMKICAgICAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlamVjdCwganFYSFIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQHByaXZhdGUKICAgIEBtZXRob2QgZmluZFF1ZXJ5CiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IHF1ZXJ5CiAgICBAcGFyYW0ge0RTLkFkYXB0ZXJQb3B1bGF0ZWRSZWNvcmRBcnJheX0gcmVjb3JkQXJyYXkKICAgIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmRRdWVyeTogbnVsbCwKCiAgLyoqCiAgICBJZiB0aGUgZ2xvYmFsbHkgdW5pcXVlIElEcyBmb3IgeW91ciByZWNvcmRzIHNob3VsZCBiZSBnZW5lcmF0ZWQgb24gdGhlIGNsaWVudCwKICAgIGltcGxlbWVudCB0aGUgYGdlbmVyYXRlSWRGb3JSZWNvcmQoKWAgbWV0aG9kLiBUaGlzIG1ldGhvZCB3aWxsIGJlIGludm9rZWQKICAgIGVhY2ggdGltZSB5b3UgY3JlYXRlIGEgbmV3IHJlY29yZCwgYW5kIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIGl0IHdpbGwgYmUKICAgIGFzc2lnbmVkIHRvIHRoZSByZWNvcmQncyBgcHJpbWFyeUtleWAuCgogICAgTW9zdCB0cmFkaXRpb25hbCBSRVNULWxpa2UgSFRUUCBBUElzIHdpbGwgbm90IHVzZSB0aGlzIG1ldGhvZC4gSW5zdGVhZCwgdGhlIElECiAgICBvZiB0aGUgcmVjb3JkIHdpbGwgYmUgc2V0IGJ5IHRoZSBzZXJ2ZXIsIGFuZCB5b3VyIGFkYXB0ZXIgd2lsbCB1cGRhdGUgdGhlIHN0b3JlCiAgICB3aXRoIHRoZSBuZXcgSUQgd2hlbiBpdCBjYWxscyBgZGlkQ3JlYXRlUmVjb3JkKClgLiBPbmx5IGltcGxlbWVudCB0aGlzIG1ldGhvZCBpZgogICAgeW91IGludGVuZCB0byBnZW5lcmF0ZSByZWNvcmQgSURzIG9uIHRoZSBjbGllbnQtc2lkZS4KCiAgICBUaGUgYGdlbmVyYXRlSWRGb3JSZWNvcmQoKWAgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSByZXF1ZXN0aW5nIHN0b3JlIGFzCiAgICB0aGUgZmlyc3QgcGFyYW1ldGVyIGFuZCB0aGUgbmV3bHkgY3JlYXRlZCByZWNvcmQgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXI6CgogICAgYGBgamF2YXNjcmlwdAogICAgZ2VuZXJhdGVJZEZvclJlY29yZDogZnVuY3Rpb24oc3RvcmUsIHJlY29yZCkgewogICAgICB2YXIgdXVpZCA9IEFwcC5nZW5lcmF0ZVVVSURXaXRoU3RhdGlzdGljYWxseUxvd09kZHNPZkNvbGxpc2lvbigpOwogICAgICByZXR1cm4gdXVpZDsKICAgIH0KICAgIGBgYAoKICAgIEBtZXRob2QgZ2VuZXJhdGVJZEZvclJlY29yZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybiB7U3RyaW5nfE51bWJlcn0gaWQKICAqLwogIGdlbmVyYXRlSWRGb3JSZWNvcmQ6IG51bGwsCgogIC8qKgogICAgUHJveGllcyB0byB0aGUgc2VyaWFsaXplcidzIGBzZXJpYWxpemVgIG1ldGhvZC4KCiAgICBFeGFtcGxlCgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLkFwcGxpY2F0aW9uQWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5kKHsKICAgICAgY3JlYXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcmVjb3JkKSB7CiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnNlcmlhbGl6ZShyZWNvcmQsIHsgaW5jbHVkZUlkOiB0cnVlIH0pOwogICAgICAgIHZhciB1cmwgPSB0eXBlOwoKICAgICAgICAvLyAuLi4KICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIHNlcmlhbGl6ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcGFyYW0ge09iamVjdH0gICBvcHRpb25zCiAgICBAcmV0dXJuIHtPYmplY3R9IHNlcmlhbGl6ZWQgcmVjb3JkCiAgKi8KICBzZXJpYWxpemU6IGZ1bmN0aW9uKHJlY29yZCwgb3B0aW9ucykgewogICAgcmV0dXJuIGdldChyZWNvcmQsICdzdG9yZScpLnNlcmlhbGl6ZXJGb3IocmVjb3JkLmNvbnN0cnVjdG9yLnR5cGVLZXkpLnNlcmlhbGl6ZShyZWNvcmQsIG9wdGlvbnMpOwogIH0sCgogIC8qKgogICAgSW1wbGVtZW50IHRoaXMgbWV0aG9kIGluIGEgc3ViY2xhc3MgdG8gaGFuZGxlIHRoZSBjcmVhdGlvbiBvZgogICAgbmV3IHJlY29yZHMuCgogICAgU2VyaWFsaXplcyB0aGUgcmVjb3JkIGFuZCBzZW5kIGl0IHRvIHRoZSBzZXJ2ZXIuCgogICAgRXhhbXBsZQoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5BcHBsaWNhdGlvbkFkYXB0ZXIgPSBEUy5BZGFwdGVyLmV4dGVuZCh7CiAgICAgIGNyZWF0ZVJlY29yZDogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHJlY29yZCkgewogICAgICAgIHZhciBkYXRhID0gdGhpcy5zZXJpYWxpemUocmVjb3JkLCB7IGluY2x1ZGVJZDogdHJ1ZSB9KTsKICAgICAgICB2YXIgdXJsID0gdHlwZTsKCiAgICAgICAgcmV0dXJuIG5ldyBFbWJlci5SU1ZQLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICBqUXVlcnkuYWpheCh7CiAgICAgICAgICAgIHR5cGU6ICdQT1NUJywKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBFbWJlci5ydW4obnVsbCwgcmVzb2x2ZSwgZGF0YSk7CiAgICAgICAgICB9LCBmdW5jdGlvbihqcVhIUikgewogICAgICAgICAgICBqcVhIUi50aGVuID0gbnVsbDsgLy8gdGFtZSBqUXVlcnkncyBpbGwgbWFubmVyZWQgcHJvbWlzZXMKICAgICAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlamVjdCwganFYSFIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBjcmVhdGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlICAgdGhlIERTLk1vZGVsIGNsYXNzIG9mIHRoZSByZWNvcmQKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgY3JlYXRlUmVjb3JkOiBFbWJlci5yZXF1aXJlZChGdW5jdGlvbiksCgogIC8qKgogICAgSW1wbGVtZW50IHRoaXMgbWV0aG9kIGluIGEgc3ViY2xhc3MgdG8gaGFuZGxlIHRoZSB1cGRhdGluZyBvZgogICAgYSByZWNvcmQuCgogICAgU2VyaWFsaXplcyB0aGUgcmVjb3JkIHVwZGF0ZSBhbmQgc2VuZCBpdCB0byB0aGUgc2VydmVyLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuQXBwbGljYXRpb25BZGFwdGVyID0gRFMuQWRhcHRlci5leHRlbmQoewogICAgICB1cGRhdGVSZWNvcmQ6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCByZWNvcmQpIHsKICAgICAgICB2YXIgZGF0YSA9IHRoaXMuc2VyaWFsaXplKHJlY29yZCwgeyBpbmNsdWRlSWQ6IHRydWUgfSk7CiAgICAgICAgdmFyIGlkID0gcmVjb3JkLmdldCgnaWQnKTsKICAgICAgICB2YXIgdXJsID0gW3R5cGUsIGlkXS5qb2luKCcvJyk7CgogICAgICAgIHJldHVybiBuZXcgRW1iZXIuUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgalF1ZXJ5LmFqYXgoewogICAgICAgICAgICB0eXBlOiAnUFVUJywKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBFbWJlci5ydW4obnVsbCwgcmVzb2x2ZSwgZGF0YSk7CiAgICAgICAgICB9LCBmdW5jdGlvbihqcVhIUikgewogICAgICAgICAgICBqcVhIUi50aGVuID0gbnVsbDsgLy8gdGFtZSBqUXVlcnkncyBpbGwgbWFubmVyZWQgcHJvbWlzZXMKICAgICAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlamVjdCwganFYSFIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCB1cGRhdGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlICAgdGhlIERTLk1vZGVsIGNsYXNzIG9mIHRoZSByZWNvcmQKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgdXBkYXRlUmVjb3JkOiBFbWJlci5yZXF1aXJlZChGdW5jdGlvbiksCgogIC8qKgogICAgSW1wbGVtZW50IHRoaXMgbWV0aG9kIGluIGEgc3ViY2xhc3MgdG8gaGFuZGxlIHRoZSBkZWxldGlvbiBvZgogICAgYSByZWNvcmQuCgogICAgU2VuZHMgYSBkZWxldGUgcmVxdWVzdCBmb3IgdGhlIHJlY29yZCB0byB0aGUgc2VydmVyLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuQXBwbGljYXRpb25BZGFwdGVyID0gRFMuQWRhcHRlci5leHRlbmQoewogICAgICBkZWxldGVSZWNvcmQ6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCByZWNvcmQpIHsKICAgICAgICB2YXIgZGF0YSA9IHRoaXMuc2VyaWFsaXplKHJlY29yZCwgeyBpbmNsdWRlSWQ6IHRydWUgfSk7CiAgICAgICAgdmFyIGlkID0gcmVjb3JkLmdldCgnaWQnKTsKICAgICAgICB2YXIgdXJsID0gW3R5cGUsIGlkXS5qb2luKCcvJyk7CgogICAgICAgIHJldHVybiBuZXcgRW1iZXIuUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgalF1ZXJ5LmFqYXgoewogICAgICAgICAgICB0eXBlOiAnREVMRVRFJywKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBFbWJlci5ydW4obnVsbCwgcmVzb2x2ZSwgZGF0YSk7CiAgICAgICAgICB9LCBmdW5jdGlvbihqcVhIUikgewogICAgICAgICAgICBqcVhIUi50aGVuID0gbnVsbDsgLy8gdGFtZSBqUXVlcnkncyBpbGwgbWFubmVyZWQgcHJvbWlzZXMKICAgICAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlamVjdCwganFYSFIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBkZWxldGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlICAgdGhlIERTLk1vZGVsIGNsYXNzIG9mIHRoZSByZWNvcmQKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgZGVsZXRlUmVjb3JkOiBFbWJlci5yZXF1aXJlZChGdW5jdGlvbiksCgogIC8qKgogICAgRmluZCBtdWx0aXBsZSByZWNvcmRzIGF0IG9uY2UuCgogICAgQnkgZGVmYXVsdCwgaXQgbG9vcHMgb3ZlciB0aGUgcHJvdmlkZWQgaWRzIGFuZCBjYWxscyBgZmluZGAgb24gZWFjaC4KICAgIE1heSBiZSBvdmVyd3JpdHRlbiB0byBpbXByb3ZlIHBlcmZvcm1hbmNlIGFuZCByZWR1Y2UgdGhlIG51bWJlciBvZgogICAgc2VydmVyIHJlcXVlc3RzLgoKICAgIEV4YW1wbGUKCiAgICBgYGBqYXZhc2NyaXB0CiAgICBBcHAuQXBwbGljYXRpb25BZGFwdGVyID0gRFMuQWRhcHRlci5leHRlbmQoewogICAgICBmaW5kTWFueTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIGlkcykgewogICAgICAgIHZhciB1cmwgPSB0eXBlOwogICAgICAgIHJldHVybiBuZXcgRW1iZXIuUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgalF1ZXJ5LmdldEpTT04odXJsLCB7aWRzOiBpZHN9KS50aGVuKGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlc29sdmUsIGRhdGEpOwogICAgICAgICAgfSwgZnVuY3Rpb24oanFYSFIpIHsKICAgICAgICAgICAganFYSFIudGhlbiA9IG51bGw7IC8vIHRhbWUgalF1ZXJ5J3MgaWxsIG1hbm5lcmVkIHByb21pc2VzCiAgICAgICAgICAgIEVtYmVyLnJ1bihudWxsLCByZWplY3QsIGpxWEhSKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2QgZmluZE1hbnkKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlICAgdGhlIERTLk1vZGVsIGNsYXNzIG9mIHRoZSByZWNvcmRzCiAgICBAcGFyYW0ge0FycmF5fSAgICBpZHMKICAgIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmRNYW55OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgaWRzKSB7CiAgICB2YXIgcHJvbWlzZXMgPSBtYXAuY2FsbChpZHMsIGZ1bmN0aW9uKGlkKSB7CiAgICAgIHJldHVybiB0aGlzLmZpbmQoc3RvcmUsIHR5cGUsIGlkKTsKICAgIH0sIHRoaXMpOwoKICAgIHJldHVybiBFbWJlci5SU1ZQLmFsbChwcm9taXNlcyk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBmbXQgPSBFbWJlci5TdHJpbmcuZm10LAogICAgaW5kZXhPZiA9IEVtYmVyLkVudW1lcmFibGVVdGlscy5pbmRleE9mOwoKdmFyIGNvdW50ZXIgPSAwOwoKLyoqCiAgYERTLkZpeHR1cmVBZGFwdGVyYCBpcyBhbiBhZGFwdGVyIHRoYXQgbG9hZHMgcmVjb3JkcyBmcm9tIG1lbW9yeS4KICBJdHMgcHJpbWFyaWx5IHVzZWQgZm9yIGRldmVsb3BtZW50IGFuZCB0ZXN0aW5nLiBZb3UgY2FuIGFsc28gdXNlCiAgYERTLkZpeHR1cmVBZGFwdGVyYCB3aGlsZSB3b3JraW5nIG9uIHRoZSBBUEkgYnV0IGFyZSBub3QgcmVhZHkgdG8KICBpbnRlZ3JhdGUgeWV0LiBJdCBpcyBhIGZ1bGx5IGZ1bmN0aW9uaW5nIGFkYXB0ZXIuIEFsbCBDUlVEIG1ldGhvZHMKICBhcmUgaW1wbGVtZW50ZWQuIFlvdSBjYW4gYWxzbyBpbXBsZW1lbnQgcXVlcnkgbG9naWMgdGhhdCBhIHJlbW90ZQogIHN5c3RlbSB3b3VsZCBkby4gSXRzIHBvc3NpYmxlIHRvIGRvIGRldmVsb3AgeW91ciBlbnRpcmUgYXBwbGljYXRpb24KICB3aXRoIGBEUy5GaXh0dXJlQWRhcHRlcmAuCgogIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdG8gdXNlIHRoZSBgRml4dHVyZUFkYXB0ZXJgIGluIHlvdXIKICBhcHBsaWNhdGlvbiBwbGVhc2Ugc2VlIHRoZSBbRml4dHVyZUFkYXB0ZXIKICBndWlkZV0oL2d1aWRlcy9tb2RlbHMvdGhlLWZpeHR1cmUtYWRhcHRlci8pLgoKICBAY2xhc3MgRml4dHVyZUFkYXB0ZXIKICBAbmFtZXNwYWNlIERTCiAgQGV4dGVuZHMgRFMuQWRhcHRlcgoqLwpEUy5GaXh0dXJlQWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5kKHsKICAvLyBieSBkZWZhdWx0LCBmaXh0dXJlcyBhcmUgYWxyZWFkeSBpbiBub3JtYWxpemVkIGZvcm0KICBzZXJpYWxpemVyOiBudWxsLAoKICAvKioKICAgIElmIGBzaW11bGF0ZVJlbW90ZVJlc3BvbnNlYCBpcyBgdHJ1ZWAgdGhlIGBGaXh0dXJlQWRhcHRlcmAgd2lsbAogICAgd2FpdCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmVmb3JlIHJlc29sdmluZyBwcm9taXNlcyB3aXRoIHRoZQogICAgZml4dHVyZSB2YWx1ZXMuIFRoZSB3YWl0IHRpbWUgY2FuIGJlIGNvbmZpZ3VyZWQgdmlhIHRoZSBgbGF0ZW5jeWAKICAgIHByb3BlcnR5LgoKICAgIEBwcm9wZXJ0eSBzaW11bGF0ZVJlbW90ZVJlc3BvbnNlCiAgICBAdHlwZSB7Qm9vbGVhbn0KICAgIEBkZWZhdWx0IHRydWUKICAqLwogIHNpbXVsYXRlUmVtb3RlUmVzcG9uc2U6IHRydWUsCgogIC8qKgogICAgQnkgZGVmYXVsdCB0aGUgYEZpeHR1cmVBZGFwdGVyYCB3aWxsIHNpbXVsYXRlIGEgd2FpdCBvZiB0aGUKICAgIGBsYXRlbmN5YCBtaWxsaXNlY29uZHMgYmVmb3JlIHJlc29sdmluZyBwcm9taXNlcyB3aXRoIHRoZSBmaXh0dXJlCiAgICB2YWx1ZXMuIFRoaXMgYmVoYXZpb3IgY2FuIGJlIHR1cm5lZCBvZmYgdmlhIHRoZQogICAgYHNpbXVsYXRlUmVtb3RlUmVzcG9uc2VgIHByb3BlcnR5LgoKICAgIEBwcm9wZXJ0eSBsYXRlbmN5CiAgICBAdHlwZSB7TnVtYmVyfQogICAgQGRlZmF1bHQgNTAKICAqLwogIGxhdGVuY3k6IDUwLAoKICAvKioKICAgIEltcGxlbWVudCB0aGlzIG1ldGhvZCBpbiBvcmRlciB0byBwcm92aWRlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGEgdHlwZQoKICAgIEBtZXRob2QgZml4dHVyZXNGb3JUeXBlCiAgICBAcGFyYW0ge1N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcmV0dXJuIHtBcnJheX0KICAqLwogIGZpeHR1cmVzRm9yVHlwZTogZnVuY3Rpb24odHlwZSkgewogICAgaWYgKHR5cGUuRklYVFVSRVMpIHsKICAgICAgdmFyIGZpeHR1cmVzID0gRW1iZXIuQSh0eXBlLkZJWFRVUkVTKTsKICAgICAgcmV0dXJuIGZpeHR1cmVzLm1hcChmdW5jdGlvbihmaXh0dXJlKXsKICAgICAgICB2YXIgZml4dHVyZUlkVHlwZSA9IHR5cGVvZiBmaXh0dXJlLmlkOwogICAgICAgIGlmKGZpeHR1cmVJZFR5cGUgIT09ICJudW1iZXIiICYmIGZpeHR1cmVJZFR5cGUgIT09ICJzdHJpbmciKXsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmbXQoJ3RoZSBpZCBwcm9wZXJ0eSBtdXN0IGJlIGRlZmluZWQgYXMgYSBudW1iZXIgb3Igc3RyaW5nIGZvciBmaXh0dXJlICVAJywgW2ZpeHR1cmVdKSk7CiAgICAgICAgfQogICAgICAgIGZpeHR1cmUuaWQgPSBmaXh0dXJlLmlkICsgJyc7CiAgICAgICAgcmV0dXJuIGZpeHR1cmU7CiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfSwKCiAgLyoqCiAgICBJbXBsZW1lbnQgdGhpcyBtZXRob2QgaW4gb3JkZXIgdG8gcXVlcnkgZml4dHVyZXMgZGF0YQoKICAgIEBtZXRob2QgcXVlcnlGaXh0dXJlcwogICAgQHBhcmFtIHtBcnJheX0gZml4dHVyZQogICAgQHBhcmFtIHtPYmplY3R9IHF1ZXJ5CiAgICBAcGFyYW0ge1N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcmV0dXJuIHtQcm9taXNlfEFycmF5fQogICovCiAgcXVlcnlGaXh0dXJlczogZnVuY3Rpb24oZml4dHVyZXMsIHF1ZXJ5LCB0eXBlKSB7CiAgICBFbWJlci5hc3NlcnQoJ05vdCBpbXBsZW1lbnRlZDogWW91IG11c3Qgb3ZlcnJpZGUgdGhlIERTLkZpeHR1cmVBZGFwdGVyOjpxdWVyeUZpeHR1cmVzIG1ldGhvZCB0byBzdXBwb3J0IHF1ZXJ5aW5nIHRoZSBmaXh0dXJlIHN0b3JlLicpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCB1cGRhdGVGaXh0dXJlcwogICAgQHBhcmFtIHtTdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtBcnJheX0gZml4dHVyZQogICovCiAgdXBkYXRlRml4dHVyZXM6IGZ1bmN0aW9uKHR5cGUsIGZpeHR1cmUpIHsKICAgIGlmKCF0eXBlLkZJWFRVUkVTKSB7CiAgICAgIHR5cGUuRklYVFVSRVMgPSBbXTsKICAgIH0KCiAgICB2YXIgZml4dHVyZXMgPSB0eXBlLkZJWFRVUkVTOwoKICAgIHRoaXMuZGVsZXRlTG9hZGVkRml4dHVyZSh0eXBlLCBmaXh0dXJlKTsKCiAgICBmaXh0dXJlcy5wdXNoKGZpeHR1cmUpOwogIH0sCgogIC8qKgogICAgSW1wbGVtZW50IHRoaXMgbWV0aG9kIGluIG9yZGVyIHRvIHByb3ZpZGUganNvbiBmb3IgQ1JVRCBtZXRob2RzCgogICAgQG1ldGhvZCBtb2NrSlNPTgogICAgQHBhcmFtIHtTdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgKi8KICBtb2NrSlNPTjogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHJlY29yZCkgewogICAgcmV0dXJuIHN0b3JlLnNlcmlhbGl6ZXJGb3IodHlwZSkuc2VyaWFsaXplKHJlY29yZCwgeyBpbmNsdWRlSWQ6IHRydWUgfSk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGdlbmVyYXRlSWRGb3JSZWNvcmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgIEByZXR1cm4ge1N0cmluZ30gaWQKICAqLwogIGdlbmVyYXRlSWRGb3JSZWNvcmQ6IGZ1bmN0aW9uKHN0b3JlKSB7CiAgICByZXR1cm4gImZpeHR1cmUtIiArIGNvdW50ZXIrKzsKICB9LAoKICAvKioKICAgIEBtZXRob2QgZmluZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7U3RyaW5nfSBpZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgZmluZDogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIGlkKSB7CiAgICB2YXIgZml4dHVyZXMgPSB0aGlzLmZpeHR1cmVzRm9yVHlwZSh0eXBlKSwKICAgICAgICBmaXh0dXJlOwoKICAgIEVtYmVyLmFzc2VydCgiVW5hYmxlIHRvIGZpbmQgZml4dHVyZXMgZm9yIG1vZGVsIHR5cGUgIit0eXBlLnRvU3RyaW5nKCksIGZpeHR1cmVzKTsKCiAgICBpZiAoZml4dHVyZXMpIHsKICAgICAgZml4dHVyZSA9IEVtYmVyLkEoZml4dHVyZXMpLmZpbmRQcm9wZXJ0eSgnaWQnLCBpZCk7CiAgICB9CgogICAgaWYgKGZpeHR1cmUpIHsKICAgICAgcmV0dXJuIHRoaXMuc2ltdWxhdGVSZW1vdGVDYWxsKGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBmaXh0dXJlOwogICAgICB9LCB0aGlzKTsKICAgIH0KICB9LAoKICAvKioKICAgIEBtZXRob2QgZmluZE1hbnkKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge0FycmF5fSBpZHMKICAgIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmRNYW55OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgaWRzKSB7CiAgICB2YXIgZml4dHVyZXMgPSB0aGlzLmZpeHR1cmVzRm9yVHlwZSh0eXBlKTsKCiAgICBFbWJlci5hc3NlcnQoIlVuYWJsZSB0byBmaW5kIGZpeHR1cmVzIGZvciBtb2RlbCB0eXBlICIrdHlwZS50b1N0cmluZygpLCBmaXh0dXJlcyk7CgogICAgaWYgKGZpeHR1cmVzKSB7CiAgICAgIGZpeHR1cmVzID0gZml4dHVyZXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaW5kZXhPZihpZHMsIGl0ZW0uaWQpICE9PSAtMTsKICAgICAgfSk7CiAgICB9CgogICAgaWYgKGZpeHR1cmVzKSB7CiAgICAgIHJldHVybiB0aGlzLnNpbXVsYXRlUmVtb3RlQ2FsbChmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gZml4dHVyZXM7CiAgICAgIH0sIHRoaXMpOwogICAgfQogIH0sCgogIC8qKgogICAgQHByaXZhdGUKICAgIEBtZXRob2QgZmluZEFsbAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7U3RyaW5nfSBzaW5jZVRva2VuCiAgICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICBmaW5kQWxsOiBmdW5jdGlvbihzdG9yZSwgdHlwZSkgewogICAgdmFyIGZpeHR1cmVzID0gdGhpcy5maXh0dXJlc0ZvclR5cGUodHlwZSk7CgogICAgRW1iZXIuYXNzZXJ0KCJVbmFibGUgdG8gZmluZCBmaXh0dXJlcyBmb3IgbW9kZWwgdHlwZSAiK3R5cGUudG9TdHJpbmcoKSwgZml4dHVyZXMpOwoKICAgIHJldHVybiB0aGlzLnNpbXVsYXRlUmVtb3RlQ2FsbChmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGZpeHR1cmVzOwogICAgfSwgdGhpcyk7CiAgfSwKCiAgLyoqCiAgICBAcHJpdmF0ZQogICAgQG1ldGhvZCBmaW5kUXVlcnkKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcXVlcnkKICAgIEBwYXJhbSB7RFMuQWRhcHRlclBvcHVsYXRlZFJlY29yZEFycmF5fSByZWNvcmRBcnJheQogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgZmluZFF1ZXJ5OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcXVlcnksIGFycmF5KSB7CiAgICB2YXIgZml4dHVyZXMgPSB0aGlzLmZpeHR1cmVzRm9yVHlwZSh0eXBlKTsKCiAgICBFbWJlci5hc3NlcnQoIlVuYWJsZSB0byBmaW5kIGZpeHR1cmVzIGZvciBtb2RlbCB0eXBlICIrdHlwZS50b1N0cmluZygpLCBmaXh0dXJlcyk7CgogICAgZml4dHVyZXMgPSB0aGlzLnF1ZXJ5Rml4dHVyZXMoZml4dHVyZXMsIHF1ZXJ5LCB0eXBlKTsKCiAgICBpZiAoZml4dHVyZXMpIHsKICAgICAgcmV0dXJuIHRoaXMuc2ltdWxhdGVSZW1vdGVDYWxsKGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBmaXh0dXJlczsKICAgICAgfSwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGNyZWF0ZVJlY29yZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgY3JlYXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgZml4dHVyZSA9IHRoaXMubW9ja0pTT04oc3RvcmUsIHR5cGUsIHJlY29yZCk7CgogICAgdGhpcy51cGRhdGVGaXh0dXJlcyh0eXBlLCBmaXh0dXJlKTsKCiAgICByZXR1cm4gdGhpcy5zaW11bGF0ZVJlbW90ZUNhbGwoZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBmaXh0dXJlOwogICAgfSwgdGhpcyk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHVwZGF0ZVJlY29yZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgdXBkYXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgZml4dHVyZSA9IHRoaXMubW9ja0pTT04oc3RvcmUsIHR5cGUsIHJlY29yZCk7CgogICAgdGhpcy51cGRhdGVGaXh0dXJlcyh0eXBlLCBmaXh0dXJlKTsKCiAgICByZXR1cm4gdGhpcy5zaW11bGF0ZVJlbW90ZUNhbGwoZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBmaXh0dXJlOwogICAgfSwgdGhpcyk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGRlbGV0ZVJlY29yZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgZGVsZXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgZml4dHVyZSA9IHRoaXMubW9ja0pTT04oc3RvcmUsIHR5cGUsIHJlY29yZCk7CgogICAgdGhpcy5kZWxldGVMb2FkZWRGaXh0dXJlKHR5cGUsIGZpeHR1cmUpOwoKICAgIHJldHVybiB0aGlzLnNpbXVsYXRlUmVtb3RlQ2FsbChmdW5jdGlvbigpIHsKICAgICAgLy8gbm8gcGF5bG9hZCBpbiBhIGRlbGV0aW9uCiAgICAgIHJldHVybiBudWxsOwogICAgfSk7CiAgfSwKCiAgLyoKICAgIEBtZXRob2QgZGVsZXRlTG9hZGVkRml4dHVyZQogICAgQHByaXZhdGUKICAgIEBwYXJhbSB0eXBlCiAgICBAcGFyYW0gcmVjb3JkCiAgKi8KICBkZWxldGVMb2FkZWRGaXh0dXJlOiBmdW5jdGlvbih0eXBlLCByZWNvcmQpIHsKICAgIHZhciBleGlzdGluZ0ZpeHR1cmUgPSB0aGlzLmZpbmRFeGlzdGluZ0ZpeHR1cmUodHlwZSwgcmVjb3JkKTsKCiAgICBpZihleGlzdGluZ0ZpeHR1cmUpIHsKICAgICAgdmFyIGluZGV4ID0gaW5kZXhPZih0eXBlLkZJWFRVUkVTLCBleGlzdGluZ0ZpeHR1cmUpOwogICAgICB0eXBlLkZJWFRVUkVTLnNwbGljZShpbmRleCwgMSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sCgogIC8qCiAgICBAbWV0aG9kIGZpbmRFeGlzdGluZ0ZpeHR1cmUKICAgIEBwcml2YXRlCiAgICBAcGFyYW0gdHlwZQogICAgQHBhcmFtIHJlY29yZAogICovCiAgZmluZEV4aXN0aW5nRml4dHVyZTogZnVuY3Rpb24odHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgZml4dHVyZXMgPSB0aGlzLmZpeHR1cmVzRm9yVHlwZSh0eXBlKTsKICAgIHZhciBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgIHJldHVybiB0aGlzLmZpbmRGaXh0dXJlQnlJZChmaXh0dXJlcywgaWQpOwogIH0sCgogIC8qCiAgICBAbWV0aG9kIGZpbmRGaXh0dXJlQnlJZAogICAgQHByaXZhdGUKICAgIEBwYXJhbSBmaXh0dXJlcwogICAgQHBhcmFtIGlkCiAgKi8KICBmaW5kRml4dHVyZUJ5SWQ6IGZ1bmN0aW9uKGZpeHR1cmVzLCBpZCkgewogICAgcmV0dXJuIEVtYmVyLkEoZml4dHVyZXMpLmZpbmQoZnVuY3Rpb24ocikgewogICAgICBpZignJytnZXQociwgJ2lkJykgPT09ICcnK2lkKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9KTsKICB9LAoKICAvKgogICAgQG1ldGhvZCBzaW11bGF0ZVJlbW90ZUNhbGwKICAgIEBwcml2YXRlCiAgICBAcGFyYW0gY2FsbGJhY2sKICAgIEBwYXJhbSBjb250ZXh0CiAgKi8KICBzaW11bGF0ZVJlbW90ZUNhbGw6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250ZXh0KSB7CiAgICB2YXIgYWRhcHRlciA9IHRoaXM7CgogICAgcmV0dXJuIG5ldyBFbWJlci5SU1ZQLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgewogICAgICBpZiAoZ2V0KGFkYXB0ZXIsICdzaW11bGF0ZVJlbW90ZVJlc3BvbnNlJykpIHsKICAgICAgICAvLyBTY2hlZHVsZSB3aXRoIHNldFRpbWVvdXQKICAgICAgICBFbWJlci5ydW4ubGF0ZXIoZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXNvbHZlKGNhbGxiYWNrLmNhbGwoY29udGV4dCkpOwogICAgICAgIH0sIGdldChhZGFwdGVyLCAnbGF0ZW5jeScpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBBc3luY2hyb25vdXMsIGJ1dCBhdCB0aGUgb2YgdGhlIHJ1bmxvb3Agd2l0aCB6ZXJvIGxhdGVuY3kKICAgICAgICBFbWJlci5ydW4uc2NoZWR1bGUoJ2FjdGlvbnMnLCBudWxsLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHJlc29sdmUoY2FsbGJhY2suY2FsbChjb250ZXh0KSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sICJEUzogRml4dHVyZUFkYXB0ZXIjc2ltdWxhdGVSZW1vdGVDYWxsIik7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQ7CnZhciBmb3JFYWNoID0gRW1iZXIuQXJyYXlQb2x5ZmlsbHMuZm9yRWFjaDsKdmFyIG1hcCA9IEVtYmVyLkFycmF5UG9seWZpbGxzLm1hcDsKCmZ1bmN0aW9uIGNvZXJjZUlkKGlkKSB7CiAgcmV0dXJuIGlkID09IG51bGwgPyBudWxsIDogaWQrJyc7Cn0KCi8qKgogIE5vcm1hbGx5LCBhcHBsaWNhdGlvbnMgd2lsbCB1c2UgdGhlIGBSRVNUU2VyaWFsaXplcmAgYnkgaW1wbGVtZW50aW5nCiAgdGhlIGBub3JtYWxpemVgIG1ldGhvZCBhbmQgaW5kaXZpZHVhbCBub3JtYWxpemF0aW9ucyB1bmRlcgogIGBub3JtYWxpemVIYXNoYC4KCiAgVGhpcyBhbGxvd3MgeW91IHRvIGRvIHdoYXRldmVyIGtpbmQgb2YgbXVuZ2luZyB5b3UgbmVlZCwgYW5kIGlzCiAgZXNwZWNpYWxseSB1c2VmdWwgaWYgeW91ciBzZXJ2ZXIgaXMgaW5jb25zaXN0ZW50IGFuZCB5b3UgbmVlZCB0bwogIGRvIG11bmdpbmcgZGlmZmVyZW50bHkgZm9yIG1hbnkgZGlmZmVyZW50IGtpbmRzIG9mIHJlc3BvbnNlcy4KCiAgU2VlIHRoZSBgbm9ybWFsaXplYCBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLgoKICAjIyBBY3Jvc3MgdGhlIEJvYXJkIE5vcm1hbGl6YXRpb24KCiAgVGhlcmUgYXJlIGFsc28gYSBudW1iZXIgb2YgaG9va3MgdGhhdCB5b3UgbWlnaHQgZmluZCB1c2VmdWwgdG8gZGVmaW5lZAogIGFjcm9zcy10aGUtYm9hcmQgcnVsZXMgZm9yIHlvdXIgcGF5bG9hZC4gVGhlc2UgcnVsZXMgd2lsbCBiZSB1c2VmdWwKICBpZiB5b3VyIHNlcnZlciBpcyBjb25zaXN0ZW50LCBvciBpZiB5b3UncmUgYnVpbGRpbmcgYW4gYWRhcHRlciBmb3IKICBhbiBpbmZyYXN0cnVjdHVyZSBzZXJ2aWNlLCBsaWtlIFBhcnNlLCBhbmQgd2FudCB0byBlbmNvZGUgc2VydmljZQogIGNvbnZlbnRpb25zLgoKICBGb3IgZXhhbXBsZSwgaWYgYWxsIG9mIHlvdXIga2V5cyBhcmUgdW5kZXJzY29yZWQgYW5kIGFsbC1jYXBzLCBidXQKICBvdGhlcndpc2UgY29uc2lzdGVudCB3aXRoIHRoZSBuYW1lcyB5b3UgdXNlIGluIHlvdXIgbW9kZWxzLCB5b3UKICBjYW4gaW1wbGVtZW50IGFjcm9zcy10aGUtYm9hcmQgcnVsZXMgZm9yIGhvdyB0byBjb252ZXJ0IGFuIGF0dHJpYnV0ZQogIG5hbWUgaW4geW91ciBtb2RlbCB0byBhIGtleSBpbiB5b3VyIEpTT04uCgogIGBgYGpzCiAgQXBwLkFwcGxpY2F0aW9uU2VyaWFsaXplciA9IERTLlJFU1RTZXJpYWxpemVyLmV4dGVuZCh7CiAgICBrZXlGb3JBdHRyaWJ1dGU6IGZ1bmN0aW9uKGF0dHIpIHsKICAgICAgcmV0dXJuIEVtYmVyLlN0cmluZy51bmRlcnNjb3JlKGF0dHIpLnRvVXBwZXJDYXNlKCk7CiAgICB9CiAgfSk7CiAgYGBgCgogIFlvdSBjYW4gYWxzbyBpbXBsZW1lbnQgYGtleUZvclJlbGF0aW9uc2hpcGAsIHdoaWNoIHRha2VzIHRoZSBuYW1lCiAgb2YgdGhlIHJlbGF0aW9uc2hpcCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyLCBhbmQgdGhlIGtpbmQgb2YKICByZWxhdGlvbnNoaXAgKGBoYXNNYW55YCBvciBgYmVsb25nc1RvYCkgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIuCgogIEBjbGFzcyBSRVNUU2VyaWFsaXplcgogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBEUy5KU09OU2VyaWFsaXplcgoqLwpEUy5SRVNUU2VyaWFsaXplciA9IERTLkpTT05TZXJpYWxpemVyLmV4dGVuZCh7CiAgLyoqCiAgICBJZiB5b3Ugd2FudCB0byBkbyBub3JtYWxpemF0aW9ucyBzcGVjaWZpYyB0byBzb21lIHBhcnQgb2YgdGhlIHBheWxvYWQsIHlvdQogICAgY2FuIHNwZWNpZnkgdGhvc2UgdW5kZXIgYG5vcm1hbGl6ZUhhc2hgLgoKICAgIEZvciBleGFtcGxlLCBnaXZlbiB0aGUgZm9sbG93aW5nIGpzb24gd2hlcmUgdGhlIHRoZSBgSURzYCB1bmRlcgogICAgYCJjb21tZW50cyJgIGFyZSBwcm92aWRlZCBhcyBgX2lkYCBpbnN0ZWFkIG9mIGBpZGAuCgogICAgYGBgamF2YXNjcmlwdAogICAgewogICAgICAicG9zdCI6IHsKICAgICAgICAiaWQiOiAxLAogICAgICAgICJ0aXRsZSI6ICJSYWlscyBpcyBvbWFrYXNlIiwKICAgICAgICAiY29tbWVudHMiOiBbIDEsIDIgXQogICAgICB9LAogICAgICAiY29tbWVudHMiOiBbewogICAgICAgICJfaWQiOiAxLAogICAgICAgICJib2R5IjogIkZJUlNUIgogICAgICB9LCB7CiAgICAgICAgIl9pZCI6IDIsCiAgICAgICAgImJvZHkiOiAiUmFpbHMgaXMgdW5hZ2kiCiAgICAgIH1dCiAgICB9CiAgICBgYGAKCiAgICBZb3UgdXNlIGBub3JtYWxpemVIYXNoYCB0byBub3JtYWxpemUganVzdCB0aGUgY29tbWVudHM6CgogICAgYGBgamF2YXNjcmlwdAogICAgQXBwLlBvc3RTZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgbm9ybWFsaXplSGFzaDogewogICAgICAgIGNvbW1lbnRzOiBmdW5jdGlvbihoYXNoKSB7CiAgICAgICAgICBoYXNoLmlkID0gaGFzaC5faWQ7CiAgICAgICAgICBkZWxldGUgaGFzaC5faWQ7CiAgICAgICAgICByZXR1cm4gaGFzaDsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgVGhlIGtleSB1bmRlciBgbm9ybWFsaXplSGFzaGAgaXMgdXN1YWxseSBqdXN0IHRoZSBvcmlnaW5hbCBrZXkKICAgIHRoYXQgd2FzIGluIHRoZSBvcmlnaW5hbCBwYXlsb2FkLiBIb3dldmVyLCBrZXkgbmFtZXMgd2lsbCBiZQogICAgaW1wYWN0ZWQgYnkgYW55IG1vZGlmaWNhdGlvbnMgZG9uZSBpbiB0aGUgYG5vcm1hbGl6ZVBheWxvYWRgCiAgICBtZXRob2QuIFRoZSBgRFMuUkVTVFNlcmlhbGl6ZXJgJ3MgZGVmYXVsdCBpbXBsZW1lbnRpb24gbWFrZXMgbm8KICAgIGNoYW5nZXMgdG8gdGhlIHBheWxvYWQga2V5cy4KCiAgICBAcHJvcGVydHkgbm9ybWFsaXplSGFzaAogICAgQHR5cGUge09iamVjdH0KICAgIEBkZWZhdWx0IHVuZGVmaW5lZAogICovCgogIC8qKgogICAgTm9ybWFsaXplcyBhIHBhcnQgb2YgdGhlIEpTT04gcGF5bG9hZCByZXR1cm5lZCBieQogICAgdGhlIHNlcnZlci4gWW91IHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCwgbXVuZ2UgdGhlIGhhc2gKICAgIGFuZCBjYWxsIHN1cGVyIGlmIHlvdSBoYXZlIGdlbmVyaWMgbm9ybWFsaXphdGlvbiB0byBkby4KCiAgICBJdCB0YWtlcyB0aGUgdHlwZSBvZiB0aGUgcmVjb3JkIHRoYXQgaXMgYmVpbmcgbm9ybWFsaXplZAogICAgKGFzIGEgRFMuTW9kZWwgY2xhc3MpLCB0aGUgcHJvcGVydHkgd2hlcmUgdGhlIGhhc2ggd2FzCiAgICBvcmlnaW5hbGx5IGZvdW5kLCBhbmQgdGhlIGhhc2ggdG8gbm9ybWFsaXplLgoKICAgIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSBhIHBheWxvYWQgdGhhdCBsb29rcyBsaWtlIHRoaXM6CgogICAgYGBganMKICAgIHsKICAgICAgInBvc3QiOiB7CiAgICAgICAgImlkIjogMSwKICAgICAgICAidGl0bGUiOiAiUmFpbHMgaXMgb21ha2FzZSIsCiAgICAgICAgImNvbW1lbnRzIjogWyAxLCAyIF0KICAgICAgfSwKICAgICAgImNvbW1lbnRzIjogW3sKICAgICAgICAiaWQiOiAxLAogICAgICAgICJib2R5IjogIkZJUlNUIgogICAgICB9LCB7CiAgICAgICAgImlkIjogMiwKICAgICAgICAiYm9keSI6ICJSYWlscyBpcyB1bmFnaSIKICAgICAgfV0KICAgIH0KICAgIGBgYAoKICAgIFRoZSBgbm9ybWFsaXplYCBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgdGhyZWUgdGltZXM6CgogICAgKiBXaXRoIGBBcHAuUG9zdGAsIGAicG9zdHMiYCBhbmQgYHsgaWQ6IDEsIHRpdGxlOiAiUmFpbHMgaXMgb21ha2FzZSIsIC4uLiB9YAogICAgKiBXaXRoIGBBcHAuQ29tbWVudGAsIGAiY29tbWVudHMiYCBhbmQgYHsgaWQ6IDEsIGJvZHk6ICJGSVJTVCIgfWAKICAgICogV2l0aCBgQXBwLkNvbW1lbnRgLCBgImNvbW1lbnRzImAgYW5kIGB7IGlkOiAyLCBib2R5OiAiUmFpbHMgaXMgdW5hZ2kiIH1gCgogICAgWW91IGNhbiB1c2UgdGhpcyBtZXRob2QsIGZvciBleGFtcGxlLCB0byBub3JtYWxpemUgdW5kZXJzY29yZWQga2V5cyB0byBjYW1lbGl6ZWQKICAgIG9yIG90aGVyIGdlbmVyYWwtcHVycG9zZSBub3JtYWxpemF0aW9ucy4KCiAgICBJZiB5b3Ugd2FudCB0byBkbyBub3JtYWxpemF0aW9ucyBzcGVjaWZpYyB0byBzb21lIHBhcnQgb2YgdGhlIHBheWxvYWQsIHlvdQogICAgY2FuIHNwZWNpZnkgdGhvc2UgdW5kZXIgYG5vcm1hbGl6ZUhhc2hgLgoKICAgIEZvciBleGFtcGxlLCBpZiB0aGUgYElEc2AgdW5kZXIgYCJjb21tZW50cyJgIGFyZSBwcm92aWRlZCBhcyBgX2lkYCBpbnN0ZWFkIG9mCiAgICBgaWRgLCB5b3UgY2FuIHNwZWNpZnkgaG93IHRvIG5vcm1hbGl6ZSBqdXN0IHRoZSBjb21tZW50czoKCiAgICBgYGBqcwogICAgQXBwLlBvc3RTZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgbm9ybWFsaXplSGFzaDogewogICAgICAgIGNvbW1lbnRzOiBmdW5jdGlvbihoYXNoKSB7CiAgICAgICAgICBoYXNoLmlkID0gaGFzaC5faWQ7CiAgICAgICAgICBkZWxldGUgaGFzaC5faWQ7CiAgICAgICAgICByZXR1cm4gaGFzaDsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgVGhlIGtleSB1bmRlciBgbm9ybWFsaXplSGFzaGAgaXMganVzdCB0aGUgb3JpZ2luYWwga2V5IHRoYXQgd2FzIGluIHRoZSBvcmlnaW5hbAogICAgcGF5bG9hZC4KCiAgICBAbWV0aG9kIG5vcm1hbGl6ZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IGhhc2gKICAgIEBwYXJhbSB7U3RyaW5nfSBwcm9wCiAgICBAcmV0dXJucyB7T2JqZWN0fQogICovCiAgbm9ybWFsaXplOiBmdW5jdGlvbih0eXBlLCBoYXNoLCBwcm9wKSB7CiAgICB0aGlzLm5vcm1hbGl6ZUlkKGhhc2gpOwogICAgdGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVzKHR5cGUsIGhhc2gpOwogICAgdGhpcy5ub3JtYWxpemVSZWxhdGlvbnNoaXBzKHR5cGUsIGhhc2gpOwoKICAgIHRoaXMubm9ybWFsaXplVXNpbmdEZWNsYXJlZE1hcHBpbmcodHlwZSwgaGFzaCk7CgogICAgaWYgKHRoaXMubm9ybWFsaXplSGFzaCAmJiB0aGlzLm5vcm1hbGl6ZUhhc2hbcHJvcF0pIHsKICAgICAgdGhpcy5ub3JtYWxpemVIYXNoW3Byb3BdKGhhc2gpOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9zdXBlcih0eXBlLCBoYXNoLCBwcm9wKTsKICB9LAoKICAvKioKICAgIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIG5vcm1hbGl6ZSBhbGwgcGF5bG9hZHMsIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGV5CiAgICByZXByZXNlbnQgc2luZ2xlIHJlY29yZHMgb3IgYW4gYXJyYXkuCgogICAgRm9yIGV4YW1wbGUsIHlvdSBtaWdodCB3YW50IHRvIHJlbW92ZSBzb21lIGV4dHJhbmVvdXMgZGF0YSBmcm9tIHRoZSBwYXlsb2FkOgoKICAgIGBgYGpzCiAgICBBcHAuQXBwbGljYXRpb25TZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgbm9ybWFsaXplUGF5bG9hZDogZnVuY3Rpb24odHlwZSwgcGF5bG9hZCkgewogICAgICAgIGRlbGV0ZSBwYXlsb2FkLnZlcnNpb247CiAgICAgICAgZGVsZXRlIHBheWxvYWQuc3RhdHVzOwogICAgICAgIHJldHVybiBwYXlsb2FkOwogICAgICB9CiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2Qgbm9ybWFsaXplUGF5bG9hZAogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IGhhc2gKICAgIEByZXR1cm5zIHtPYmplY3R9IHRoZSBub3JtYWxpemVkIHBheWxvYWQKICAqLwogIG5vcm1hbGl6ZVBheWxvYWQ6IGZ1bmN0aW9uKHR5cGUsIHBheWxvYWQpIHsKICAgIHJldHVybiBwYXlsb2FkOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBub3JtYWxpemVJZAogICAgQHByaXZhdGUKICAqLwogIG5vcm1hbGl6ZUlkOiBmdW5jdGlvbihoYXNoKSB7CiAgICB2YXIgcHJpbWFyeUtleSA9IGdldCh0aGlzLCAncHJpbWFyeUtleScpOwoKICAgIGlmIChwcmltYXJ5S2V5ID09PSAnaWQnKSB7IHJldHVybjsgfQoKICAgIGhhc2guaWQgPSBoYXNoW3ByaW1hcnlLZXldOwogICAgZGVsZXRlIGhhc2hbcHJpbWFyeUtleV07CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIG5vcm1hbGl6ZVVzaW5nRGVjbGFyZWRNYXBwaW5nCiAgICBAcHJpdmF0ZQogICovCiAgbm9ybWFsaXplVXNpbmdEZWNsYXJlZE1hcHBpbmc6IGZ1bmN0aW9uKHR5cGUsIGhhc2gpIHsKICAgIHZhciBhdHRycyA9IGdldCh0aGlzLCAnYXR0cnMnKSwgcGF5bG9hZEtleSwga2V5OwoKICAgIGlmIChhdHRycykgewogICAgICBmb3IgKGtleSBpbiBhdHRycykgewogICAgICAgIHBheWxvYWRLZXkgPSBhdHRyc1trZXldOwogICAgICAgIGlmIChwYXlsb2FkS2V5ICYmIHBheWxvYWRLZXkua2V5KSB7CiAgICAgICAgICBwYXlsb2FkS2V5ID0gcGF5bG9hZEtleS5rZXk7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZEtleSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgIGhhc2hba2V5XSA9IGhhc2hbcGF5bG9hZEtleV07CiAgICAgICAgICBkZWxldGUgaGFzaFtwYXlsb2FkS2V5XTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgIEBtZXRob2Qgbm9ybWFsaXplQXR0cmlidXRlcwogICAgQHByaXZhdGUKICAqLwogIG5vcm1hbGl6ZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uKHR5cGUsIGhhc2gpIHsKICAgIHZhciBwYXlsb2FkS2V5LCBrZXk7CgogICAgaWYgKHRoaXMua2V5Rm9yQXR0cmlidXRlKSB7CiAgICAgIHR5cGUuZWFjaEF0dHJpYnV0ZShmdW5jdGlvbihrZXkpIHsKICAgICAgICBwYXlsb2FkS2V5ID0gdGhpcy5rZXlGb3JBdHRyaWJ1dGUoa2V5KTsKICAgICAgICBpZiAoa2V5ID09PSBwYXlsb2FkS2V5KSB7IHJldHVybjsgfQoKICAgICAgICBoYXNoW2tleV0gPSBoYXNoW3BheWxvYWRLZXldOwogICAgICAgIGRlbGV0ZSBoYXNoW3BheWxvYWRLZXldOwogICAgICB9LCB0aGlzKTsKICAgIH0KICB9LAoKICAvKioKICAgIEBtZXRob2Qgbm9ybWFsaXplUmVsYXRpb25zaGlwcwogICAgQHByaXZhdGUKICAqLwogIG5vcm1hbGl6ZVJlbGF0aW9uc2hpcHM6IGZ1bmN0aW9uKHR5cGUsIGhhc2gpIHsKICAgIHZhciBwYXlsb2FkS2V5LCBrZXk7CgogICAgaWYgKHRoaXMua2V5Rm9yUmVsYXRpb25zaGlwKSB7CiAgICAgIHR5cGUuZWFjaFJlbGF0aW9uc2hpcChmdW5jdGlvbihrZXksIHJlbGF0aW9uc2hpcCkgewogICAgICAgIHBheWxvYWRLZXkgPSB0aGlzLmtleUZvclJlbGF0aW9uc2hpcChrZXksIHJlbGF0aW9uc2hpcC5raW5kKTsKICAgICAgICBpZiAoa2V5ID09PSBwYXlsb2FkS2V5KSB7IHJldHVybjsgfQoKICAgICAgICBoYXNoW2tleV0gPSBoYXNoW3BheWxvYWRLZXldOwogICAgICAgIGRlbGV0ZSBoYXNoW3BheWxvYWRLZXldOwogICAgICB9LCB0aGlzKTsKICAgIH0KICB9LAoKICAvKioKICAgIENhbGxlZCB3aGVuIHRoZSBzZXJ2ZXIgaGFzIHJldHVybmVkIGEgcGF5bG9hZCByZXByZXNlbnRpbmcKICAgIGEgc2luZ2xlIHJlY29yZCwgc3VjaCBhcyBpbiByZXNwb25zZSB0byBhIGBmaW5kYCBvciBgc2F2ZWAuCgogICAgSXQgaXMgeW91ciBvcHBvcnR1bml0eSB0byBjbGVhbiB1cCB0aGUgc2VydmVyJ3MgcmVzcG9uc2UgaW50byB0aGUgbm9ybWFsaXplZAogICAgZm9ybSBleHBlY3RlZCBieSBFbWJlciBEYXRhLgoKICAgIElmIHlvdSB3YW50LCB5b3UgY2FuIGp1c3QgcmVzdHJ1Y3R1cmUgdGhlIHRvcC1sZXZlbCBvZiB5b3VyIHBheWxvYWQsIGFuZAogICAgZG8gbW9yZSBmaW5lLWdyYWluZWQgbm9ybWFsaXphdGlvbiBpbiB0aGUgYG5vcm1hbGl6ZWAgbWV0aG9kLgoKICAgIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSBhIHBheWxvYWQgbGlrZSB0aGlzIGluIHJlc3BvbnNlIHRvIGEgcmVxdWVzdCBmb3IKICAgIHBvc3QgMToKCiAgICBgYGBqcwogICAgewogICAgICAiaWQiOiAxLAogICAgICAidGl0bGUiOiAiUmFpbHMgaXMgb21ha2FzZSIsCgogICAgICAiX2VtYmVkZGVkIjogewogICAgICAgICJjb21tZW50IjogW3sKICAgICAgICAgICJfaWQiOiAxLAogICAgICAgICAgImNvbW1lbnRfdGl0bGUiOiAiRklSU1QiCiAgICAgICAgfSwgewogICAgICAgICAgIl9pZCI6IDIsCiAgICAgICAgICAiY29tbWVudF90aXRsZSI6ICJSYWlscyBpcyB1bmFnaSIKICAgICAgICB9XQogICAgICB9CiAgICB9CiAgICBgYGAKCiAgICBZb3UgY291bGQgaW1wbGVtZW50IGEgc2VyaWFsaXplciB0aGF0IGxvb2tzIGxpa2UgdGhpcyB0byBnZXQgeW91ciBwYXlsb2FkCiAgICBpbnRvIHNoYXBlOgoKICAgIGBgYGpzCiAgICBBcHAuUG9zdFNlcmlhbGl6ZXIgPSBEUy5SRVNUU2VyaWFsaXplci5leHRlbmQoewogICAgICAvLyBGaXJzdCwgcmVzdHJ1Y3R1cmUgdGhlIHRvcC1sZXZlbCBzbyBpdCdzIG9yZ2FuaXplZCBieSB0eXBlCiAgICAgIGV4dHJhY3RTaW5nbGU6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBpZCwgcmVxdWVzdFR5cGUpIHsKICAgICAgICB2YXIgY29tbWVudHMgPSBwYXlsb2FkLl9lbWJlZGRlZC5jb21tZW50OwogICAgICAgIGRlbGV0ZSBwYXlsb2FkLl9lbWJlZGRlZDsKCiAgICAgICAgcGF5bG9hZCA9IHsgY29tbWVudHM6IGNvbW1lbnRzLCBwb3N0OiBwYXlsb2FkIH07CiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBpZCwgcmVxdWVzdFR5cGUpOwogICAgICB9LAoKICAgICAgbm9ybWFsaXplSGFzaDogewogICAgICAgIC8vIE5leHQsIG5vcm1hbGl6ZSBpbmRpdmlkdWFsIGNvbW1lbnRzLCB3aGljaCAoYWZ0ZXIgYGV4dHJhY3RgKQogICAgICAgIC8vIGFyZSBub3cgbG9jYXRlZCB1bmRlciBgY29tbWVudHNgCiAgICAgICAgY29tbWVudHM6IGZ1bmN0aW9uKGhhc2gpIHsKICAgICAgICAgIGhhc2guaWQgPSBoYXNoLl9pZDsKICAgICAgICAgIGhhc2gudGl0bGUgPSBoYXNoLmNvbW1lbnRfdGl0bGU7CiAgICAgICAgICBkZWxldGUgaGFzaC5faWQ7CiAgICAgICAgICBkZWxldGUgaGFzaC5jb21tZW50X3RpdGxlOwogICAgICAgICAgcmV0dXJuIGhhc2g7CiAgICAgICAgfQogICAgICB9CiAgICB9KQogICAgYGBgCgogICAgV2hlbiB5b3UgY2FsbCBzdXBlciBmcm9tIHlvdXIgb3duIGltcGxlbWVudGF0aW9uIG9mIGBleHRyYWN0U2luZ2xlYCwgdGhlCiAgICBidWlsdC1pbiBpbXBsZW1lbnRhdGlvbiB3aWxsIGZpbmQgdGhlIHByaW1hcnkgcmVjb3JkIGluIHlvdXIgbm9ybWFsaXplZAogICAgcGF5bG9hZCBhbmQgcHVzaCB0aGUgcmVtYWluaW5nIHJlY29yZHMgaW50byB0aGUgc3RvcmUuCgogICAgVGhlIHByaW1hcnkgcmVjb3JkIGlzIHRoZSBzaW5nbGUgaGFzaCBmb3VuZCB1bmRlciBgcG9zdGAgb3IgdGhlIGZpcnN0CiAgICBlbGVtZW50IG9mIHRoZSBgcG9zdHNgIGFycmF5LgoKICAgIFRoZSBwcmltYXJ5IHJlY29yZCBoYXMgc3BlY2lhbCBtZWFuaW5nIHdoZW4gdGhlIHJlY29yZCBpcyBiZWluZyBjcmVhdGVkCiAgICBmb3IgdGhlIGZpcnN0IHRpbWUgb3IgdXBkYXRlZCAoYGNyZWF0ZVJlY29yZGAgb3IgYHVwZGF0ZVJlY29yZGApLiBJbgogICAgcGFydGljdWxhciwgaXQgd2lsbCB1cGRhdGUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHJlY29yZCB0aGF0IHdhcyBzYXZlZC4KCiAgICBAbWV0aG9kIGV4dHJhY3RTaW5nbGUKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICAgQHBhcmFtIHtTdHJpbmd9IGlkCiAgICBAcGFyYW0geydmaW5kJ3wnY3JlYXRlUmVjb3JkJ3wndXBkYXRlUmVjb3JkJ3wnZGVsZXRlUmVjb3JkJ30gcmVxdWVzdFR5cGUKICAgIEByZXR1cm5zIHtPYmplY3R9IHRoZSBwcmltYXJ5IHJlc3BvbnNlIHRvIHRoZSBvcmlnaW5hbCByZXF1ZXN0CiAgKi8KICBleHRyYWN0U2luZ2xlOiBmdW5jdGlvbihzdG9yZSwgcHJpbWFyeVR5cGUsIHBheWxvYWQsIHJlY29yZElkLCByZXF1ZXN0VHlwZSkgewogICAgcGF5bG9hZCA9IHRoaXMubm9ybWFsaXplUGF5bG9hZChwcmltYXJ5VHlwZSwgcGF5bG9hZCk7CgogICAgdmFyIHByaW1hcnlUeXBlTmFtZSA9IHByaW1hcnlUeXBlLnR5cGVLZXksCiAgICAgICAgcHJpbWFyeVJlY29yZDsKCiAgICBmb3IgKHZhciBwcm9wIGluIHBheWxvYWQpIHsKICAgICAgdmFyIHR5cGVOYW1lICA9IHRoaXMudHlwZUZvclJvb3QocHJvcCksCiAgICAgICAgICBpc1ByaW1hcnkgPSB0eXBlTmFtZSA9PT0gcHJpbWFyeVR5cGVOYW1lOwoKICAgICAgLy8gbGVnYWN5IHN1cHBvcnQgZm9yIHNpbmd1bGFyIHJlc291cmNlcwogICAgICBpZiAoaXNQcmltYXJ5ICYmIEVtYmVyLnR5cGVPZihwYXlsb2FkW3Byb3BdKSAhPT0gImFycmF5IiApIHsKICAgICAgICBwcmltYXJ5UmVjb3JkID0gdGhpcy5ub3JtYWxpemUocHJpbWFyeVR5cGUsIHBheWxvYWRbcHJvcF0sIHByb3ApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICB2YXIgdHlwZSA9IHN0b3JlLm1vZGVsRm9yKHR5cGVOYW1lKTsKCiAgICAgIC8qanNoaW50IGxvb3BmdW5jOnRydWUqLwogICAgICBmb3JFYWNoLmNhbGwocGF5bG9hZFtwcm9wXSwgZnVuY3Rpb24oaGFzaCkgewogICAgICAgIHZhciB0eXBlTmFtZSA9IHRoaXMudHlwZUZvclJvb3QocHJvcCksCiAgICAgICAgICAgIHR5cGUgPSBzdG9yZS5tb2RlbEZvcih0eXBlTmFtZSksCiAgICAgICAgICAgIHR5cGVTZXJpYWxpemVyID0gc3RvcmUuc2VyaWFsaXplckZvcih0eXBlKTsKCiAgICAgICAgaGFzaCA9IHR5cGVTZXJpYWxpemVyLm5vcm1hbGl6ZSh0eXBlLCBoYXNoLCBwcm9wKTsKCiAgICAgICAgdmFyIGlzRmlyc3RDcmVhdGVkUmVjb3JkID0gaXNQcmltYXJ5ICYmICFyZWNvcmRJZCAmJiAhcHJpbWFyeVJlY29yZCwKICAgICAgICAgICAgaXNVcGRhdGVkUmVjb3JkID0gaXNQcmltYXJ5ICYmIGNvZXJjZUlkKGhhc2guaWQpID09PSByZWNvcmRJZDsKCiAgICAgICAgLy8gZmluZCB0aGUgcHJpbWFyeSByZWNvcmQuCiAgICAgICAgLy8KICAgICAgICAvLyBJdCdzIGVpdGhlcjoKICAgICAgICAvLyAqIHRoZSByZWNvcmQgd2l0aCB0aGUgc2FtZSBJRCBhcyB0aGUgb3JpZ2luYWwgcmVxdWVzdAogICAgICAgIC8vICogaW4gdGhlIGNhc2Ugb2YgYSBuZXdseSBjcmVhdGVkIHJlY29yZCB0aGF0IGRpZG4ndCBoYXZlIGFuIElELCB0aGUgZmlyc3QKICAgICAgICAvLyAgIHJlY29yZCBpbiB0aGUgQXJyYXkKICAgICAgICBpZiAoaXNGaXJzdENyZWF0ZWRSZWNvcmQgfHwgaXNVcGRhdGVkUmVjb3JkKSB7CiAgICAgICAgICBwcmltYXJ5UmVjb3JkID0gaGFzaDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc3RvcmUucHVzaCh0eXBlTmFtZSwgaGFzaCk7CiAgICAgICAgfQogICAgICB9LCB0aGlzKTsKICAgIH0KCiAgICByZXR1cm4gcHJpbWFyeVJlY29yZDsKICB9LAoKICAvKioKICAgIENhbGxlZCB3aGVuIHRoZSBzZXJ2ZXIgaGFzIHJldHVybmVkIGEgcGF5bG9hZCByZXByZXNlbnRpbmcKICAgIG11bHRpcGxlIHJlY29yZHMsIHN1Y2ggYXMgaW4gcmVzcG9uc2UgdG8gYSBgZmluZEFsbGAgb3IgYGZpbmRRdWVyeWAuCgogICAgSXQgaXMgeW91ciBvcHBvcnR1bml0eSB0byBjbGVhbiB1cCB0aGUgc2VydmVyJ3MgcmVzcG9uc2UgaW50byB0aGUgbm9ybWFsaXplZAogICAgZm9ybSBleHBlY3RlZCBieSBFbWJlciBEYXRhLgoKICAgIElmIHlvdSB3YW50LCB5b3UgY2FuIGp1c3QgcmVzdHJ1Y3R1cmUgdGhlIHRvcC1sZXZlbCBvZiB5b3VyIHBheWxvYWQsIGFuZAogICAgZG8gbW9yZSBmaW5lLWdyYWluZWQgbm9ybWFsaXphdGlvbiBpbiB0aGUgYG5vcm1hbGl6ZWAgbWV0aG9kLgoKICAgIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSBhIHBheWxvYWQgbGlrZSB0aGlzIGluIHJlc3BvbnNlIHRvIGEgcmVxdWVzdCBmb3IKICAgIGFsbCBwb3N0czoKCiAgICBgYGBqcwogICAgewogICAgICAiX2VtYmVkZGVkIjogewogICAgICAgICJwb3N0IjogW3sKICAgICAgICAgICJpZCI6IDEsCiAgICAgICAgICAidGl0bGUiOiAiUmFpbHMgaXMgb21ha2FzZSIKICAgICAgICB9LCB7CiAgICAgICAgICAiaWQiOiAyLAogICAgICAgICAgInRpdGxlIjogIlRoZSBQYXJsZXkgTGV0dGVyIgogICAgICAgIH1dLAogICAgICAgICJjb21tZW50IjogW3sKICAgICAgICAgICJfaWQiOiAxLAogICAgICAgICAgImNvbW1lbnRfdGl0bGUiOiAiUmFpbHMgaXMgdW5hZ2kiCiAgICAgICAgICAicG9zdF9pZCI6IDEKICAgICAgICB9LCB7CiAgICAgICAgICAiX2lkIjogMiwKICAgICAgICAgICJjb21tZW50X3RpdGxlIjogIkRvbid0IHRyZWFkIG9uIG1lIiwKICAgICAgICAgICJwb3N0X2lkIjogMgogICAgICAgIH1dCiAgICAgIH0KICAgIH0KICAgIGBgYAoKICAgIFlvdSBjb3VsZCBpbXBsZW1lbnQgYSBzZXJpYWxpemVyIHRoYXQgbG9va3MgbGlrZSB0aGlzIHRvIGdldCB5b3VyIHBheWxvYWQKICAgIGludG8gc2hhcGU6CgogICAgYGBganMKICAgIEFwcC5Qb3N0U2VyaWFsaXplciA9IERTLlJFU1RTZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIC8vIEZpcnN0LCByZXN0cnVjdHVyZSB0aGUgdG9wLWxldmVsIHNvIGl0J3Mgb3JnYW5pemVkIGJ5IHR5cGUKICAgICAgLy8gYW5kIHRoZSBjb21tZW50cyBhcmUgbGlzdGVkIHVuZGVyIGEgcG9zdCdzIGBjb21tZW50c2Aga2V5LgogICAgICBleHRyYWN0QXJyYXk6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBpZCwgcmVxdWVzdFR5cGUpIHsKICAgICAgICB2YXIgcG9zdHMgPSBwYXlsb2FkLl9lbWJlZGRlZC5wb3N0OwogICAgICAgIHZhciBjb21tZW50cyA9IFtdOwogICAgICAgIHZhciBwb3N0Q2FjaGUgPSB7fTsKCiAgICAgICAgcG9zdHMuZm9yRWFjaChmdW5jdGlvbihwb3N0KSB7CiAgICAgICAgICBwb3N0LmNvbW1lbnRzID0gW107CiAgICAgICAgICBwb3N0Q2FjaGVbcG9zdC5pZF0gPSBwb3N0OwogICAgICAgIH0pOwoKICAgICAgICBwYXlsb2FkLl9lbWJlZGRlZC5jb21tZW50LmZvckVhY2goZnVuY3Rpb24oY29tbWVudCkgewogICAgICAgICAgY29tbWVudHMucHVzaChjb21tZW50KTsKICAgICAgICAgIHBvc3RDYWNoZVtjb21tZW50LnBvc3RfaWRdLmNvbW1lbnRzLnB1c2goY29tbWVudCk7CiAgICAgICAgICBkZWxldGUgY29tbWVudC5wb3N0X2lkOwogICAgICAgIH0KCiAgICAgICAgcGF5bG9hZCA9IHsgY29tbWVudHM6IGNvbW1lbnRzLCBwb3N0czogcGF5bG9hZCB9OwoKICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIoc3RvcmUsIHR5cGUsIHBheWxvYWQsIGlkLCByZXF1ZXN0VHlwZSk7CiAgICAgIH0sCgogICAgICBub3JtYWxpemVIYXNoOiB7CiAgICAgICAgLy8gTmV4dCwgbm9ybWFsaXplIGluZGl2aWR1YWwgY29tbWVudHMsIHdoaWNoIChhZnRlciBgZXh0cmFjdGApCiAgICAgICAgLy8gYXJlIG5vdyBsb2NhdGVkIHVuZGVyIGBjb21tZW50c2AKICAgICAgICBjb21tZW50czogZnVuY3Rpb24oaGFzaCkgewogICAgICAgICAgaGFzaC5pZCA9IGhhc2guX2lkOwogICAgICAgICAgaGFzaC50aXRsZSA9IGhhc2guY29tbWVudF90aXRsZTsKICAgICAgICAgIGRlbGV0ZSBoYXNoLl9pZDsKICAgICAgICAgIGRlbGV0ZSBoYXNoLmNvbW1lbnRfdGl0bGU7CiAgICAgICAgICByZXR1cm4gaGFzaDsKICAgICAgICB9CiAgICAgIH0KICAgIH0pCiAgICBgYGAKCiAgICBXaGVuIHlvdSBjYWxsIHN1cGVyIGZyb20geW91ciBvd24gaW1wbGVtZW50YXRpb24gb2YgYGV4dHJhY3RBcnJheWAsIHRoZQogICAgYnVpbHQtaW4gaW1wbGVtZW50YXRpb24gd2lsbCBmaW5kIHRoZSBwcmltYXJ5IGFycmF5IGluIHlvdXIgbm9ybWFsaXplZAogICAgcGF5bG9hZCBhbmQgcHVzaCB0aGUgcmVtYWluaW5nIHJlY29yZHMgaW50byB0aGUgc3RvcmUuCgogICAgVGhlIHByaW1hcnkgYXJyYXkgaXMgdGhlIGFycmF5IGZvdW5kIHVuZGVyIGBwb3N0c2AuCgogICAgVGhlIHByaW1hcnkgcmVjb3JkIGhhcyBzcGVjaWFsIG1lYW5pbmcgd2hlbiByZXNwb25kaW5nIHRvIGBmaW5kUXVlcnlgCiAgICBvciBgZmluZEhhc01hbnlgLiBJbiBwYXJ0aWN1bGFyLCB0aGUgcHJpbWFyeSBhcnJheSB3aWxsIGJlY29tZSB0aGUKICAgIGxpc3Qgb2YgcmVjb3JkcyBpbiB0aGUgcmVjb3JkIGFycmF5IHRoYXQga2lja2VkIG9mZiB0aGUgcmVxdWVzdC4KCiAgICBJZiB5b3VyIHByaW1hcnkgYXJyYXkgY29udGFpbnMgc2Vjb25kYXJ5IChlbWJlZGRlZCkgcmVjb3JkcyBvZiB0aGUgc2FtZSB0eXBlLAogICAgeW91IGNhbm5vdCBwbGFjZSB0aGVzZSBpbnRvIHRoZSBwcmltYXJ5IGFycmF5IGBwb3N0c2AuIEluc3RlYWQsIHBsYWNlIHRoZQogICAgc2Vjb25kYXJ5IGl0ZW1zIGludG8gYW4gdW5kZXJzY29yZSBwcmVmaXhlZCBwcm9wZXJ0eSBgX3Bvc3RzYCwgd2hpY2ggd2lsbAogICAgcHVzaCB0aGVzZSBpdGVtcyBpbnRvIHRoZSBzdG9yZSBhbmQgd2lsbCBub3QgYWZmZWN0IHRoZSByZXN1bHRpbmcgcXVlcnkuCgogICAgQG1ldGhvZCBleHRyYWN0QXJyYXkKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICAgQHBhcmFtIHsnZmluZEFsbCd8J2ZpbmRNYW55J3wnZmluZEhhc01hbnknfCdmaW5kUXVlcnknfSByZXF1ZXN0VHlwZQogICAgQHJldHVybnMge0FycmF5fSBUaGUgcHJpbWFyeSBhcnJheSB0aGF0IHdhcyByZXR1cm5lZCBpbiByZXNwb25zZQogICAgICB0byB0aGUgb3JpZ2luYWwgcXVlcnkuCiAgKi8KICBleHRyYWN0QXJyYXk6IGZ1bmN0aW9uKHN0b3JlLCBwcmltYXJ5VHlwZSwgcGF5bG9hZCkgewogICAgcGF5bG9hZCA9IHRoaXMubm9ybWFsaXplUGF5bG9hZChwcmltYXJ5VHlwZSwgcGF5bG9hZCk7CgogICAgdmFyIHByaW1hcnlUeXBlTmFtZSA9IHByaW1hcnlUeXBlLnR5cGVLZXksCiAgICAgICAgcHJpbWFyeUFycmF5OwoKICAgIGZvciAodmFyIHByb3AgaW4gcGF5bG9hZCkgewogICAgICB2YXIgdHlwZUtleSA9IHByb3AsCiAgICAgICAgICBmb3JjZWRTZWNvbmRhcnkgPSBmYWxzZTsKCiAgICAgIGlmIChwcm9wLmNoYXJBdCgwKSA9PT0gJ18nKSB7CiAgICAgICAgZm9yY2VkU2Vjb25kYXJ5ID0gdHJ1ZTsKICAgICAgICB0eXBlS2V5ID0gcHJvcC5zdWJzdHIoMSk7CiAgICAgIH0KCiAgICAgIHZhciB0eXBlTmFtZSA9IHRoaXMudHlwZUZvclJvb3QodHlwZUtleSksCiAgICAgICAgICB0eXBlID0gc3RvcmUubW9kZWxGb3IodHlwZU5hbWUpLAogICAgICAgICAgdHlwZVNlcmlhbGl6ZXIgPSBzdG9yZS5zZXJpYWxpemVyRm9yKHR5cGUpLAogICAgICAgICAgaXNQcmltYXJ5ID0gKCFmb3JjZWRTZWNvbmRhcnkgJiYgKHR5cGVOYW1lID09PSBwcmltYXJ5VHlwZU5hbWUpKTsKCiAgICAgIC8qanNoaW50IGxvb3BmdW5jOnRydWUqLwogICAgICB2YXIgbm9ybWFsaXplZEFycmF5ID0gbWFwLmNhbGwocGF5bG9hZFtwcm9wXSwgZnVuY3Rpb24oaGFzaCkgewogICAgICAgIHJldHVybiB0eXBlU2VyaWFsaXplci5ub3JtYWxpemUodHlwZSwgaGFzaCwgcHJvcCk7CiAgICAgIH0sIHRoaXMpOwoKICAgICAgaWYgKGlzUHJpbWFyeSkgewogICAgICAgIHByaW1hcnlBcnJheSA9IG5vcm1hbGl6ZWRBcnJheTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdG9yZS5wdXNoTWFueSh0eXBlTmFtZSwgbm9ybWFsaXplZEFycmF5KTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBwcmltYXJ5QXJyYXk7CiAgfSwKCiAgLyoqCiAgICBUaGlzIG1ldGhvZCBhbGxvd3MgeW91IHRvIHB1c2ggYSBwYXlsb2FkIGNvbnRhaW5pbmcgdG9wLWxldmVsCiAgICBjb2xsZWN0aW9ucyBvZiByZWNvcmRzIG9yZ2FuaXplZCBwZXIgdHlwZS4KCiAgICBgYGBqcwogICAgewogICAgICAicG9zdHMiOiBbewogICAgICAgICJpZCI6ICIxIiwKICAgICAgICAidGl0bGUiOiAiUmFpbHMgaXMgb21ha2FzZSIsCiAgICAgICAgImF1dGhvciIsICIxIiwKICAgICAgICAiY29tbWVudHMiOiBbICIxIiBdCiAgICAgIH1dLAogICAgICAiY29tbWVudHMiOiBbewogICAgICAgICJpZCI6ICIxIiwKICAgICAgICAiYm9keSI6ICJGSVJTVCIKICAgICAgfV0sCiAgICAgICJ1c2VycyI6IFt7CiAgICAgICAgImlkIjogIjEiLAogICAgICAgICJuYW1lIjogIkBkMmgiCiAgICAgIH1dCiAgICB9CiAgICBgYGAKCiAgICBJdCB3aWxsIGZpcnN0IG5vcm1hbGl6ZSB0aGUgcGF5bG9hZCwgc28geW91IGNhbiB1c2UgdGhpcyB0byBwdXNoCiAgICBpbiBkYXRhIHN0cmVhbWluZyBpbiBmcm9tIHlvdXIgc2VydmVyIHN0cnVjdHVyZWQgdGhlIHNhbWUgd2F5CiAgICB0aGF0IGZldGNoZXMgYW5kIHNhdmVzIGFyZSBzdHJ1Y3R1cmVkLgoKICAgIEBtZXRob2QgcHVzaFBheWxvYWQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge09iamVjdH0gcGF5bG9hZAogICovCiAgcHVzaFBheWxvYWQ6IGZ1bmN0aW9uKHN0b3JlLCBwYXlsb2FkKSB7CiAgICBwYXlsb2FkID0gdGhpcy5ub3JtYWxpemVQYXlsb2FkKG51bGwsIHBheWxvYWQpOwoKICAgIGZvciAodmFyIHByb3AgaW4gcGF5bG9hZCkgewogICAgICB2YXIgdHlwZU5hbWUgPSB0aGlzLnR5cGVGb3JSb290KHByb3ApLAogICAgICAgICAgdHlwZSA9IHN0b3JlLm1vZGVsRm9yKHR5cGVOYW1lKTsKCiAgICAgIC8qanNoaW50IGxvb3BmdW5jOnRydWUqLwogICAgICB2YXIgbm9ybWFsaXplZEFycmF5ID0gbWFwLmNhbGwoRW1iZXIubWFrZUFycmF5KHBheWxvYWRbcHJvcF0pLCBmdW5jdGlvbihoYXNoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplKHR5cGUsIGhhc2gsIHByb3ApOwogICAgICB9LCB0aGlzKTsKCiAgICAgIHN0b3JlLnB1c2hNYW55KHR5cGVOYW1lLCBub3JtYWxpemVkQXJyYXkpOwogICAgfQogIH0sCgogIC8qKgogICAgWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gbm9ybWFsaXplIHRoZSBKU09OIHJvb3Qga2V5cyByZXR1cm5lZAogICAgaW50byB0aGUgbW9kZWwgdHlwZSBleHBlY3RlZCBieSB5b3VyIHN0b3JlLgoKICAgIEZvciBleGFtcGxlLCB5b3VyIHNlcnZlciBtYXkgcmV0dXJuIHVuZGVyc2NvcmVkIHJvb3Qga2V5cyByYXRoZXIgdGhhbgogICAgdGhlIGV4cGVjdGVkIGNhbWVsY2FzZWQgdmVyc2lvbnMuCgogICAgYGBganMKICAgIEFwcC5BcHBsaWNhdGlvblNlcmlhbGl6ZXIgPSBEUy5SRVNUU2VyaWFsaXplci5leHRlbmQoewogICAgICB0eXBlRm9yUm9vdDogZnVuY3Rpb24ocm9vdCkgewogICAgICAgIHZhciBjYW1lbGl6ZWQgPSBFbWJlci5TdHJpbmcuY2FtZWxpemUocm9vdCk7CiAgICAgICAgcmV0dXJuIEVtYmVyLlN0cmluZy5zaW5ndWxhcml6ZShjYW1lbGl6ZWQpOwogICAgICB9CiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2QgdHlwZUZvclJvb3QKICAgIEBwYXJhbSB7U3RyaW5nfSByb290CiAgICBAcmV0dXJucyB7U3RyaW5nfSB0aGUgbW9kZWwncyB0eXBlS2V5CiAgKi8KICB0eXBlRm9yUm9vdDogZnVuY3Rpb24ocm9vdCkgewogICAgcmV0dXJuIEVtYmVyLlN0cmluZy5zaW5ndWxhcml6ZShyb290KTsKICB9LAoKICAvLyBTRVJJQUxJWkUKCiAgLyoqCiAgICBDYWxsZWQgd2hlbiBhIHJlY29yZCBpcyBzYXZlZCBpbiBvcmRlciB0byBjb252ZXJ0IHRoZQogICAgcmVjb3JkIGludG8gSlNPTi4KCiAgICBCeSBkZWZhdWx0LCBpdCBjcmVhdGVzIGEgSlNPTiBvYmplY3Qgd2l0aCBhIGtleSBmb3IKICAgIGVhY2ggYXR0cmlidXRlIGFuZCBiZWxvbmdzVG8gcmVsYXRpb25zaGlwLgoKICAgIEZvciBleGFtcGxlLCBjb25zaWRlciB0aGlzIG1vZGVsOgoKICAgIGBgYGpzCiAgICBBcHAuQ29tbWVudCA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICAgIHRpdGxlOiBEUy5hdHRyKCksCiAgICAgIGJvZHk6IERTLmF0dHIoKSwKCiAgICAgIGF1dGhvcjogRFMuYmVsb25nc1RvKCd1c2VyJykKICAgIH0pOwogICAgYGBgCgogICAgVGhlIGRlZmF1bHQgc2VyaWFsaXphdGlvbiB3b3VsZCBjcmVhdGUgYSBKU09OIG9iamVjdCBsaWtlOgoKICAgIGBgYGpzCiAgICB7CiAgICAgICJ0aXRsZSI6ICJSYWlscyBpcyB1bmFnaSIsCiAgICAgICJib2R5IjogIlJhaWxzPyBPbWFrYXNlPyBPX08iLAogICAgICAiYXV0aG9yIjogMTIKICAgIH0KICAgIGBgYAoKICAgIEJ5IGRlZmF1bHQsIGF0dHJpYnV0ZXMgYXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzLCB1bmxlc3MKICAgIHlvdSBzcGVjaWZpZWQgYW4gYXR0cmlidXRlIHR5cGUgKGBEUy5hdHRyKCdkYXRlJylgKS4gSWYKICAgIHlvdSBzcGVjaWZ5IGEgdHJhbnNmb3JtLCB0aGUgSmF2YVNjcmlwdCB2YWx1ZSB3aWxsIGJlCiAgICBzZXJpYWxpemVkIHdoZW4gaW5zZXJ0ZWQgaW50byB0aGUgSlNPTiBoYXNoLgoKICAgIEJ5IGRlZmF1bHQsIGJlbG9uZ3MtdG8gcmVsYXRpb25zaGlwcyBhcmUgY29udmVydGVkIGludG8KICAgIElEcyB3aGVuIGluc2VydGVkIGludG8gdGhlIEpTT04gaGFzaC4KCiAgICAjIyBJRHMKCiAgICBgc2VyaWFsaXplYCB0YWtlcyBhbiBvcHRpb25zIGhhc2ggd2l0aCBhIHNpbmdsZSBvcHRpb246CiAgICBgaW5jbHVkZUlkYC4gSWYgdGhpcyBvcHRpb24gaXMgYHRydWVgLCBgc2VyaWFsaXplYCB3aWxsLAogICAgYnkgZGVmYXVsdCBpbmNsdWRlIHRoZSBJRCBpbiB0aGUgSlNPTiBvYmplY3QgaXQgYnVpbGRzLgoKICAgIFRoZSBhZGFwdGVyIHBhc3NlcyBpbiBgaW5jbHVkZUlkOiB0cnVlYCB3aGVuIHNlcmlhbGl6aW5nCiAgICBhIHJlY29yZCBmb3IgYGNyZWF0ZVJlY29yZGAsIGJ1dCBub3QgZm9yIGB1cGRhdGVSZWNvcmRgLgoKICAgICMjIEN1c3RvbWl6YXRpb24KCiAgICBZb3VyIHNlcnZlciBtYXkgZXhwZWN0IGEgZGlmZmVyZW50IEpTT04gZm9ybWF0IHRoYW4gdGhlCiAgICBidWlsdC1pbiBzZXJpYWxpemF0aW9uIGZvcm1hdC4KCiAgICBJbiB0aGF0IGNhc2UsIHlvdSBjYW4gaW1wbGVtZW50IGBzZXJpYWxpemVgIHlvdXJzZWxmIGFuZAogICAgcmV0dXJuIGEgSlNPTiBoYXNoIG9mIHlvdXIgY2hvb3NpbmcuCgogICAgYGBganMKICAgIEFwcC5Qb3N0U2VyaWFsaXplciA9IERTLlJFU1RTZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24ocG9zdCwgb3B0aW9ucykgewogICAgICAgIHZhciBqc29uID0gewogICAgICAgICAgUE9TVF9UVEw6IHBvc3QuZ2V0KCd0aXRsZScpLAogICAgICAgICAgUE9TVF9CRFk6IHBvc3QuZ2V0KCdib2R5JyksCiAgICAgICAgICBQT1NUX0NNUzogcG9zdC5nZXQoJ2NvbW1lbnRzJykubWFwUHJvcGVydHkoJ2lkJykKICAgICAgICB9CgogICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVJZCkgewogICAgICAgICAganNvbi5QT1NUX0lEXyA9IHBvc3QuZ2V0KCdpZCcpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGpzb247CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgIyMgQ3VzdG9taXppbmcgYW4gQXBwLVdpZGUgU2VyaWFsaXplcgoKICAgIElmIHlvdSB3YW50IHRvIGRlZmluZSBhIHNlcmlhbGl6ZXIgZm9yIHlvdXIgZW50aXJlCiAgICBhcHBsaWNhdGlvbiwgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlIGBlYWNoQXR0cmlidXRlYAogICAgYW5kIGBlYWNoUmVsYXRpb25zaGlwYCBvbiB0aGUgcmVjb3JkLgoKICAgIGBgYGpzCiAgICBBcHAuQXBwbGljYXRpb25TZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihyZWNvcmQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIganNvbiA9IHt9OwoKICAgICAgICByZWNvcmQuZWFjaEF0dHJpYnV0ZShmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICBqc29uW3NlcnZlckF0dHJpYnV0ZU5hbWUobmFtZSldID0gcmVjb3JkLmdldChuYW1lKTsKICAgICAgICB9KQoKICAgICAgICByZWNvcmQuZWFjaFJlbGF0aW9uc2hpcChmdW5jdGlvbihuYW1lLCByZWxhdGlvbnNoaXApIHsKICAgICAgICAgIGlmIChyZWxhdGlvbnNoaXAua2luZCA9PT0gJ2hhc01hbnknKSB7CiAgICAgICAgICAgIGpzb25bc2VydmVySGFzTWFueU5hbWUobmFtZSldID0gcmVjb3JkLmdldChuYW1lKS5tYXBCeSgnaWQnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZUlkKSB7CiAgICAgICAgICBqc29uLklEXyA9IHJlY29yZC5nZXQoJ2lkJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4ganNvbjsKICAgICAgfQogICAgfSk7CgogICAgZnVuY3Rpb24gc2VydmVyQXR0cmlidXRlTmFtZShhdHRyaWJ1dGUpIHsKICAgICAgcmV0dXJuIGF0dHJpYnV0ZS51bmRlcnNjb3JlKCkudG9VcHBlckNhc2UoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXJ2ZXJIYXNNYW55TmFtZShuYW1lKSB7CiAgICAgIHJldHVybiBzZXJ2ZXJBdHRyaWJ1dGVOYW1lKG5hbWUuc2luZ3VsYXJpemUoKSkgKyAiX0lEUyI7CiAgICB9CiAgICBgYGAKCiAgICBUaGlzIHNlcmlhbGl6ZXIgd2lsbCBnZW5lcmF0ZSBKU09OIHRoYXQgbG9va3MgbGlrZSB0aGlzOgoKICAgIGBgYGpzCiAgICB7CiAgICAgICJUSVRMRSI6ICJSYWlscyBpcyBvbWFrYXNlIiwKICAgICAgIkJPRFkiOiAiWWVwLiBPbWFrYXNlLiIsCiAgICAgICJDT01NRU5UX0lEUyI6IFsgMSwgMiwgMyBdCiAgICB9CiAgICBgYGAKCiAgICAjIyBUd2Vha2luZyB0aGUgRGVmYXVsdCBKU09OCgogICAgSWYgeW91IGp1c3Qgd2FudCB0byBkbyBzb21lIHNtYWxsIHR3ZWFrcyBvbiB0aGUgZGVmYXVsdCBKU09OLAogICAgeW91IGNhbiBjYWxsIHN1cGVyIGZpcnN0IGFuZCBtYWtlIHRoZSB0d2Vha3Mgb24gdGhlIHJldHVybmVkCiAgICBKU09OLgoKICAgIGBgYGpzCiAgICBBcHAuUG9zdFNlcmlhbGl6ZXIgPSBEUy5SRVNUU2VyaWFsaXplci5leHRlbmQoewogICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKHJlY29yZCwgb3B0aW9ucykgewogICAgICAgIHZhciBqc29uID0gdGhpcy5fc3VwZXIocmVjb3JkLCBvcHRpb25zKTsKCiAgICAgICAganNvbi5zdWJqZWN0ID0ganNvbi50aXRsZTsKICAgICAgICBkZWxldGUganNvbi50aXRsZTsKCiAgICAgICAgcmV0dXJuIGpzb247CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBzZXJpYWxpemUKICAgIEBwYXJhbSByZWNvcmQKICAgIEBwYXJhbSBvcHRpb25zCiAgKi8KICBzZXJpYWxpemU6IGZ1bmN0aW9uKHJlY29yZCwgb3B0aW9ucykgewogICAgcmV0dXJuIHRoaXMuX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfSwKCiAgLyoqCiAgICBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBjdXN0b21pemUgdGhlIHJvb3Qga2V5cyBzZXJpYWxpemVkIGludG8gdGhlIEpTT04uCiAgICBCeSBkZWZhdWx0IHRoZSBSRVNUIFNlcmlhbGl6ZXIgc2VuZHMgY2FtZWxpemVkIHJvb3Qga2V5cy4KICAgIEZvciBleGFtcGxlLCB5b3VyIHNlcnZlciBtYXkgZXhwZWN0IHVuZGVyc2NvcmVkIHJvb3Qgb2JqZWN0cy4KCiAgICBgYGBqcwogICAgQXBwLkFwcGxpY2F0aW9uU2VyaWFsaXplciA9IERTLlJFU1RTZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIHNlcmlhbGl6ZUludG9IYXNoOiBmdW5jdGlvbihkYXRhLCB0eXBlLCByZWNvcmQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgcm9vdCA9IEVtYmVyLlN0cmluZy5kZWNhbWVsaXplKHR5cGUudHlwZUtleSk7CiAgICAgICAgZGF0YVtyb290XSA9IHRoaXMuc2VyaWFsaXplKHJlY29yZCwgb3B0aW9ucyk7CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBzZXJpYWxpemVJbnRvSGFzaAogICAgQHBhcmFtIHtPYmplY3R9IGhhc2gKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICAqLwogIHNlcmlhbGl6ZUludG9IYXNoOiBmdW5jdGlvbihoYXNoLCB0eXBlLCByZWNvcmQsIG9wdGlvbnMpIHsKICAgIGhhc2hbdHlwZS50eXBlS2V5XSA9IHRoaXMuc2VyaWFsaXplKHJlY29yZCwgb3B0aW9ucyk7CiAgfSwKCiAgLyoqCiAgICBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBjdXN0b21pemUgaG93IHBvbHltb3JwaGljIG9iamVjdHMgYXJlIHNlcmlhbGl6ZWQuCiAgICBCeSBkZWZhdWx0IHRoZSBKU09OIFNlcmlhbGl6ZXIgY3JlYXRlcyB0aGUga2V5IGJ5IGFwcGVuZGluZyBgVHlwZWAgdG8KICAgIHRoZSBhdHRyaWJ1dGUgYW5kIHZhbHVlIGZyb20gdGhlIG1vZGVsJ3MgY2FtZWxjYXNlZCBtb2RlbCBuYW1lLgoKICAgIEBtZXRob2Qgc2VyaWFsaXplUG9seW1vcnBoaWNUeXBlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgIEBwYXJhbSB7T2JqZWN0fSBqc29uCiAgICBAcGFyYW0ge09iamVjdH0gcmVsYXRpb25zaGlwCiAgKi8KICBzZXJpYWxpemVQb2x5bW9ycGhpY1R5cGU6IGZ1bmN0aW9uKHJlY29yZCwganNvbiwgcmVsYXRpb25zaGlwKSB7CiAgICB2YXIga2V5ID0gcmVsYXRpb25zaGlwLmtleSwKICAgICAgICBiZWxvbmdzVG8gPSBnZXQocmVjb3JkLCBrZXkpOwogICAga2V5ID0gdGhpcy5rZXlGb3JBdHRyaWJ1dGUgPyB0aGlzLmtleUZvckF0dHJpYnV0ZShrZXkpIDoga2V5OwogICAganNvbltrZXkgKyAiVHlwZSJdID0gYmVsb25nc1RvLmNvbnN0cnVjdG9yLnR5cGVLZXk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQ7CnZhciBmb3JFYWNoID0gRW1iZXIuQXJyYXlQb2x5ZmlsbHMuZm9yRWFjaDsKCi8qKgogIFRoZSBSRVNUIGFkYXB0ZXIgYWxsb3dzIHlvdXIgc3RvcmUgdG8gY29tbXVuaWNhdGUgd2l0aCBhbiBIVFRQIHNlcnZlciBieQogIHRyYW5zbWl0dGluZyBKU09OIHZpYSBYSFIuIE1vc3QgRW1iZXIuanMgYXBwcyB0aGF0IGNvbnN1bWUgYSBKU09OIEFQSQogIHNob3VsZCB1c2UgdGhlIFJFU1QgYWRhcHRlci4KCiAgVGhpcyBhZGFwdGVyIGlzIGRlc2lnbmVkIGFyb3VuZCB0aGUgaWRlYSB0aGF0IHRoZSBKU09OIGV4Y2hhbmdlZCB3aXRoCiAgdGhlIHNlcnZlciBzaG91bGQgYmUgY29udmVudGlvbmFsLgoKICAjIyBKU09OIFN0cnVjdHVyZQoKICBUaGUgUkVTVCBhZGFwdGVyIGV4cGVjdHMgdGhlIEpTT04gcmV0dXJuZWQgZnJvbSB5b3VyIHNlcnZlciB0byBmb2xsb3cKICB0aGVzZSBjb252ZW50aW9ucy4KCiAgIyMjIE9iamVjdCBSb290CgogIFRoZSBKU09OIHBheWxvYWQgc2hvdWxkIGJlIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSByZWNvcmQgaW5zaWRlIGEKICByb290IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgaW4gcmVzcG9uc2UgdG8gYSBgR0VUYCByZXF1ZXN0IGZvcgogIGAvcG9zdHMvMWAsIHRoZSBKU09OIHNob3VsZCBsb29rIGxpa2UgdGhpczoKCiAgYGBganMKICB7CiAgICAicG9zdCI6IHsKICAgICAgInRpdGxlIjogIkknbSBSdW5uaW5nIHRvIFJlZm9ybSB0aGUgVzNDJ3MgVGFnIiwKICAgICAgImF1dGhvciI6ICJZZWh1ZGEgS2F0eiIKICAgIH0KICB9CiAgYGBgCgogICMjIyBDb252ZW50aW9uYWwgTmFtZXMKCiAgQXR0cmlidXRlIG5hbWVzIGluIHlvdXIgSlNPTiBwYXlsb2FkIHNob3VsZCBiZSB0aGUgY2FtZWxDYXNlZCB2ZXJzaW9ucyBvZgogIHRoZSBhdHRyaWJ1dGVzIGluIHlvdXIgRW1iZXIuanMgbW9kZWxzLgoKICBGb3IgZXhhbXBsZSwgaWYgeW91IGhhdmUgYSBgUGVyc29uYCBtb2RlbDoKCiAgYGBganMKICBBcHAuUGVyc29uID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIGZpcnN0TmFtZTogRFMuYXR0cignc3RyaW5nJyksCiAgICBsYXN0TmFtZTogRFMuYXR0cignc3RyaW5nJyksCiAgICBvY2N1cGF0aW9uOiBEUy5hdHRyKCdzdHJpbmcnKQogIH0pOwogIGBgYAoKICBUaGUgSlNPTiByZXR1cm5lZCBzaG91bGQgbG9vayBsaWtlIHRoaXM6CgogIGBgYGpzCiAgewogICAgInBlcnNvbiI6IHsKICAgICAgImZpcnN0TmFtZSI6ICJCYXJhY2siLAogICAgICAibGFzdE5hbWUiOiAiT2JhbWEiLAogICAgICAib2NjdXBhdGlvbiI6ICJQcmVzaWRlbnQiCiAgICB9CiAgfQogIGBgYAoKICAjIyBDdXN0b21pemF0aW9uCgogICMjIyBFbmRwb2ludCBwYXRoIGN1c3RvbWl6YXRpb24KCiAgRW5kcG9pbnQgcGF0aHMgY2FuIGJlIHByZWZpeGVkIHdpdGggYSBgbmFtZXNwYWNlYCBieSBzZXR0aW5nIHRoZSBuYW1lc3BhY2UKICBwcm9wZXJ0eSBvbiB0aGUgYWRhcHRlcjoKCiAgYGBganMKICBEUy5SRVNUQWRhcHRlci5yZW9wZW4oewogICAgbmFtZXNwYWNlOiAnYXBpLzEnCiAgfSk7CiAgYGBgCiAgUmVxdWVzdHMgZm9yIGBBcHAuUGVyc29uYCB3b3VsZCBub3cgdGFyZ2V0IGAvYXBpLzEvcGVvcGxlLzFgLgoKICAjIyMgSG9zdCBjdXN0b21pemF0aW9uCgogIEFuIGFkYXB0ZXIgY2FuIHRhcmdldCBvdGhlciBob3N0cyBieSBzZXR0aW5nIHRoZSBgaG9zdGAgcHJvcGVydHkuCgogIGBgYGpzCiAgRFMuUkVTVEFkYXB0ZXIucmVvcGVuKHsKICAgIGhvc3Q6ICdodHRwczovL2FwaS5leGFtcGxlLmNvbScKICB9KTsKICBgYGAKCiAgIyMjIEhlYWRlcnMgY3VzdG9taXphdGlvbgoKICBTb21lIEFQSXMgcmVxdWlyZSBIVFRQIGhlYWRlcnMsIGUuZy4gdG8gcHJvdmlkZSBhbiBBUEkga2V5LiBBbiBhcnJheSBvZgogIGhlYWRlcnMgY2FuIGJlIGFkZGVkIHRvIHRoZSBhZGFwdGVyIHdoaWNoIGFyZSBwYXNzZWQgd2l0aCBldmVyeSByZXF1ZXN0OgoKICBgYGBqcwogIERTLlJFU1RBZGFwdGVyLnJlb3Blbih7CiAgICBoZWFkZXJzOiB7CiAgICAgICJBUElfS0VZIjogInNlY3JldCBrZXkiLAogICAgICAiQU5PVEhFUl9IRUFERVIiOiAiU29tZSBoZWFkZXIgdmFsdWUiCiAgICB9CiAgfSk7CiAgYGBgCgogIEBjbGFzcyBSRVNUQWRhcHRlcgogIEBjb25zdHJ1Y3RvcgogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBEUy5BZGFwdGVyCiovCkRTLlJFU1RBZGFwdGVyID0gRFMuQWRhcHRlci5leHRlbmQoewogIGRlZmF1bHRTZXJpYWxpemVyOiAnX3Jlc3QnLAoKCiAgLyoqCiAgICBFbmRwb2ludCBwYXRocyBjYW4gYmUgcHJlZml4ZWQgd2l0aCBhIGBuYW1lc3BhY2VgIGJ5IHNldHRpbmcgdGhlIG5hbWVzcGFjZQogICAgcHJvcGVydHkgb24gdGhlIGFkYXB0ZXI6CgogICAgYGBgamF2YXNjcmlwdAogICAgRFMuUkVTVEFkYXB0ZXIucmVvcGVuKHsKICAgICAgbmFtZXNwYWNlOiAnYXBpLzEnCiAgICB9KTsKICAgIGBgYAoKICAgIFJlcXVlc3RzIGZvciBgQXBwLlBvc3RgIHdvdWxkIG5vdyB0YXJnZXQgYC9hcGkvMS9wb3N0L2AuCgogICAgQHByb3BlcnR5IG5hbWVzcGFjZQogICAgQHR5cGUge1N0cmluZ30KICAqLwoKICAvKioKICAgIEFuIGFkYXB0ZXIgY2FuIHRhcmdldCBvdGhlciBob3N0cyBieSBzZXR0aW5nIHRoZSBgaG9zdGAgcHJvcGVydHkuCgogICAgYGBgamF2YXNjcmlwdAogICAgRFMuUkVTVEFkYXB0ZXIucmVvcGVuKHsKICAgICAgaG9zdDogJ2h0dHBzOi8vYXBpLmV4YW1wbGUuY29tJwogICAgfSk7CiAgICBgYGAKCiAgICBSZXF1ZXN0cyBmb3IgYEFwcC5Qb3N0YCB3b3VsZCBub3cgdGFyZ2V0IGBodHRwczovL2FwaS5leGFtcGxlLmNvbS9wb3N0L2AuCgogICAgQHByb3BlcnR5IGhvc3QKICAgIEB0eXBlIHtTdHJpbmd9CiAgKi8KCiAgLyoqCiAgICBTb21lIEFQSXMgcmVxdWlyZSBIVFRQIGhlYWRlcnMsIGUuZy4gdG8gcHJvdmlkZSBhbiBBUEkga2V5LiBBbiBhcnJheSBvZgogICAgaGVhZGVycyBjYW4gYmUgYWRkZWQgdG8gdGhlIGFkYXB0ZXIgd2hpY2ggYXJlIHBhc3NlZCB3aXRoIGV2ZXJ5IHJlcXVlc3Q6CgogICAgYGBgamF2YXNjcmlwdAogICAgRFMuUkVTVEFkYXB0ZXIucmVvcGVuKHsKICAgICAgaGVhZGVyczogewogICAgICAgICJBUElfS0VZIjogInNlY3JldCBrZXkiLAogICAgICAgICJBTk9USEVSX0hFQURFUiI6ICJTb21lIGhlYWRlciB2YWx1ZSIKICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAgICBAcHJvcGVydHkgaGVhZGVycwogICAgQHR5cGUge09iamVjdH0KICAqLwoKICAvKioKICAgIENhbGxlZCBieSB0aGUgc3RvcmUgaW4gb3JkZXIgdG8gZmV0Y2ggdGhlIEpTT04gZm9yIGEgZ2l2ZW4KICAgIHR5cGUgYW5kIElELgoKICAgIFRoZSBgZmluZGAgbWV0aG9kIG1ha2VzIGFuIEFqYXggcmVxdWVzdCB0byBhIFVSTCBjb21wdXRlZCBieSBgYnVpbGRVUkxgLCBhbmQgcmV0dXJucyBhCiAgICBwcm9taXNlIGZvciB0aGUgcmVzdWx0aW5nIHBheWxvYWQuCgogICAgVGhpcyBtZXRob2QgcGVyZm9ybXMgYW4gSFRUUCBgR0VUYCByZXF1ZXN0IHdpdGggdGhlIGlkIHByb3ZpZGVkIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5c3RyaW5nLgoKICAgIEBtZXRob2QgZmluZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7U3RyaW5nfSBpZAogICAgQHJldHVybnMge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmQ6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCBpZCkgewogICAgcmV0dXJuIHRoaXMuYWpheCh0aGlzLmJ1aWxkVVJMKHR5cGUudHlwZUtleSwgaWQpLCAnR0VUJyk7CiAgfSwKCiAgLyoqCiAgICBDYWxsZWQgYnkgdGhlIHN0b3JlIGluIG9yZGVyIHRvIGZldGNoIGEgSlNPTiBhcnJheSBmb3IgYWxsCiAgICBvZiB0aGUgcmVjb3JkcyBmb3IgYSBnaXZlbiB0eXBlLgoKICAgIFRoZSBgZmluZEFsbGAgbWV0aG9kIG1ha2VzIGFuIEFqYXggKEhUVFAgR0VUKSByZXF1ZXN0IHRvIGEgVVJMIGNvbXB1dGVkIGJ5IGBidWlsZFVSTGAsIGFuZCByZXR1cm5zIGEKICAgIHByb21pc2UgZm9yIHRoZSByZXN1bHRpbmcgcGF5bG9hZC4KCiAgICBAcHJpdmF0ZQogICAgQG1ldGhvZCBmaW5kQWxsCiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtTdHJpbmd9IHNpbmNlVG9rZW4KICAgIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICBmaW5kQWxsOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgc2luY2VUb2tlbikgewogICAgdmFyIHF1ZXJ5OwoKICAgIGlmIChzaW5jZVRva2VuKSB7CiAgICAgIHF1ZXJ5ID0geyBzaW5jZTogc2luY2VUb2tlbiB9OwogICAgfQoKICAgIHJldHVybiB0aGlzLmFqYXgodGhpcy5idWlsZFVSTCh0eXBlLnR5cGVLZXkpLCAnR0VUJywgeyBkYXRhOiBxdWVyeSB9KTsKICB9LAoKICAvKioKICAgIENhbGxlZCBieSB0aGUgc3RvcmUgaW4gb3JkZXIgdG8gZmV0Y2ggYSBKU09OIGFycmF5IGZvcgogICAgdGhlIHJlY29yZHMgdGhhdCBtYXRjaCBhIHBhcnRpY3VsYXIgcXVlcnkuCgogICAgVGhlIGBmaW5kUXVlcnlgIG1ldGhvZCBtYWtlcyBhbiBBamF4IChIVFRQIEdFVCkgcmVxdWVzdCB0byBhIFVSTCBjb21wdXRlZCBieSBgYnVpbGRVUkxgLCBhbmQgcmV0dXJucyBhCiAgICBwcm9taXNlIGZvciB0aGUgcmVzdWx0aW5nIHBheWxvYWQuCgogICAgVGhlIGBxdWVyeWAgYXJndW1lbnQgaXMgYSBzaW1wbGUgSmF2YVNjcmlwdCBvYmplY3QgdGhhdCB3aWxsIGJlIHBhc3NlZCBkaXJlY3RseQogICAgdG8gdGhlIHNlcnZlciBhcyBwYXJhbWV0ZXJzLgoKICAgIEBwcml2YXRlCiAgICBAbWV0aG9kIGZpbmRRdWVyeQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBxdWVyeQogICAgQHJldHVybnMge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmRRdWVyeTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHF1ZXJ5KSB7CiAgICByZXR1cm4gdGhpcy5hamF4KHRoaXMuYnVpbGRVUkwodHlwZS50eXBlS2V5KSwgJ0dFVCcsIHsgZGF0YTogcXVlcnkgfSk7CiAgfSwKCiAgLyoqCiAgICBDYWxsZWQgYnkgdGhlIHN0b3JlIGluIG9yZGVyIHRvIGZldGNoIGEgSlNPTiBhcnJheSBmb3IKICAgIHRoZSB1bmxvYWRlZCByZWNvcmRzIGluIGEgaGFzLW1hbnkgcmVsYXRpb25zaGlwIHRoYXQgd2VyZSBvcmlnaW5hbGx5CiAgICBzcGVjaWZpZWQgYXMgSURzLgoKICAgIEZvciBleGFtcGxlLCBpZiB0aGUgb3JpZ2luYWwgcGF5bG9hZCBsb29rcyBsaWtlOgoKICAgIGBgYGpzCiAgICB7CiAgICAgICJpZCI6IDEsCiAgICAgICJ0aXRsZSI6ICJSYWlscyBpcyBvbWFrYXNlIiwKICAgICAgImNvbW1lbnRzIjogWyAxLCAyLCAzIF0KICAgIH0KICAgIGBgYAoKICAgIFRoZSBJRHMgd2lsbCBiZSBwYXNzZWQgYXMgYSBVUkwtZW5jb2RlZCBBcnJheSBvZiBJRHMsIGluIHRoaXMgZm9ybToKCiAgICBgYGAKICAgIGlkc1tdPTEmaWRzW109MiZpZHNbXT0zCiAgICBgYGAKCiAgICBNYW55IHNlcnZlcnMsIHN1Y2ggYXMgUmFpbHMgYW5kIFBIUCwgd2lsbCBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgdGhpcyBVUkwtZW5jb2RlZCBhcnJheQogICAgaW50byBhbiBBcnJheSBmb3IgeW91IG9uIHRoZSBzZXJ2ZXItc2lkZS4gSWYgeW91IHdhbnQgdG8gZW5jb2RlIHRoZQogICAgSURzLCBkaWZmZXJlbnRseSwganVzdCBvdmVycmlkZSB0aGlzIChvbmUtbGluZSkgbWV0aG9kLgoKICAgIFRoZSBgZmluZE1hbnlgIG1ldGhvZCBtYWtlcyBhbiBBamF4IChIVFRQIEdFVCkgcmVxdWVzdCB0byBhIFVSTCBjb21wdXRlZCBieSBgYnVpbGRVUkxgLCBhbmQgcmV0dXJucyBhCiAgICBwcm9taXNlIGZvciB0aGUgcmVzdWx0aW5nIHBheWxvYWQuCgogICAgQG1ldGhvZCBmaW5kTWFueQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7QXJyYXl9IGlkcwogICAgQHJldHVybnMge1Byb21pc2V9IHByb21pc2UKICAqLwogIGZpbmRNYW55OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgaWRzKSB7CiAgICByZXR1cm4gdGhpcy5hamF4KHRoaXMuYnVpbGRVUkwodHlwZS50eXBlS2V5KSwgJ0dFVCcsIHsgZGF0YTogeyBpZHM6IGlkcyB9IH0pOwogIH0sCgogIC8qKgogICAgQ2FsbGVkIGJ5IHRoZSBzdG9yZSBpbiBvcmRlciB0byBmZXRjaCBhIEpTT04gYXJyYXkgZm9yCiAgICB0aGUgdW5sb2FkZWQgcmVjb3JkcyBpbiBhIGhhcy1tYW55IHJlbGF0aW9uc2hpcCB0aGF0IHdlcmUgb3JpZ2luYWxseQogICAgc3BlY2lmaWVkIGFzIGEgVVJMIChpbnNpZGUgb2YgYGxpbmtzYCkuCgogICAgRm9yIGV4YW1wbGUsIGlmIHlvdXIgb3JpZ2luYWwgcGF5bG9hZCBsb29rcyBsaWtlIHRoaXM6CgogICAgYGBganMKICAgIHsKICAgICAgInBvc3QiOiB7CiAgICAgICAgImlkIjogMSwKICAgICAgICAidGl0bGUiOiAiUmFpbHMgaXMgb21ha2FzZSIsCiAgICAgICAgImxpbmtzIjogeyAiY29tbWVudHMiOiAiL3Bvc3RzLzEvY29tbWVudHMiIH0KICAgICAgfQogICAgfQogICAgYGBgCgogICAgVGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgcGFyZW50IHJlY29yZCBhbmQgYC9wb3N0cy8xL2NvbW1lbnRzYC4KCiAgICBUaGUgYGZpbmRIYXNNYW55YCBtZXRob2Qgd2lsbCBtYWtlIGFuIEFqYXggKEhUVFAgR0VUKSByZXF1ZXN0IHRvIHRoZSBvcmlnaW5hbGx5IHNwZWNpZmllZCBVUkwuCiAgICBJZiB0aGUgVVJMIGlzIGhvc3QtcmVsYXRpdmUgKHN0YXJ0aW5nIHdpdGggYSBzaW5nbGUgc2xhc2gpLCB0aGUKICAgIHJlcXVlc3Qgd2lsbCB1c2UgdGhlIGhvc3Qgc3BlY2lmaWVkIG9uIHRoZSBhZGFwdGVyIChpZiBhbnkpLgoKICAgIEBtZXRob2QgZmluZEhhc01hbnkKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgIEBwYXJhbSB7U3RyaW5nfSB1cmwKICAgIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICBmaW5kSGFzTWFueTogZnVuY3Rpb24oc3RvcmUsIHJlY29yZCwgdXJsKSB7CiAgICB2YXIgaG9zdCA9IGdldCh0aGlzLCAnaG9zdCcpLAogICAgICAgIGlkICAgPSBnZXQocmVjb3JkLCAnaWQnKSwKICAgICAgICB0eXBlID0gcmVjb3JkLmNvbnN0cnVjdG9yLnR5cGVLZXk7CgogICAgaWYgKGhvc3QgJiYgdXJsLmNoYXJBdCgwKSA9PT0gJy8nICYmIHVybC5jaGFyQXQoMSkgIT09ICcvJykgewogICAgICB1cmwgPSBob3N0ICsgdXJsOwogICAgfQoKICAgIHJldHVybiB0aGlzLmFqYXgodGhpcy51cmxQcmVmaXgodXJsLCB0aGlzLmJ1aWxkVVJMKHR5cGUsIGlkKSksICdHRVQnKTsKICB9LAoKICAvKioKICAgIENhbGxlZCBieSB0aGUgc3RvcmUgaW4gb3JkZXIgdG8gZmV0Y2ggYSBKU09OIGFycmF5IGZvcgogICAgdGhlIHVubG9hZGVkIHJlY29yZHMgaW4gYSBiZWxvbmdzLXRvIHJlbGF0aW9uc2hpcCB0aGF0IHdlcmUgb3JpZ2luYWxseQogICAgc3BlY2lmaWVkIGFzIGEgVVJMIChpbnNpZGUgb2YgYGxpbmtzYCkuCgogICAgRm9yIGV4YW1wbGUsIGlmIHlvdXIgb3JpZ2luYWwgcGF5bG9hZCBsb29rcyBsaWtlIHRoaXM6CgogICAgYGBganMKICAgIHsKICAgICAgInBlcnNvbiI6IHsKICAgICAgICAiaWQiOiAxLAogICAgICAgICJuYW1lIjogIlRvbSBEYWxlIiwKICAgICAgICAibGlua3MiOiB7ICJncm91cCI6ICIvcGVvcGxlLzEvZ3JvdXAiIH0KICAgICAgfQogICAgfQogICAgYGBgCgogICAgVGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgcGFyZW50IHJlY29yZCBhbmQgYC9wZW9wbGUvMS9ncm91cGAuCgogICAgVGhlIGBmaW5kQmVsb25nc1RvYCBtZXRob2Qgd2lsbCBtYWtlIGFuIEFqYXggKEhUVFAgR0VUKSByZXF1ZXN0IHRvIHRoZSBvcmlnaW5hbGx5IHNwZWNpZmllZCBVUkwuCgogICAgQG1ldGhvZCBmaW5kQmVsb25nc1RvCiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcGFyYW0ge1N0cmluZ30gdXJsCiAgICBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgZmluZEJlbG9uZ3NUbzogZnVuY3Rpb24oc3RvcmUsIHJlY29yZCwgdXJsKSB7CiAgICB2YXIgaWQgICA9IGdldChyZWNvcmQsICdpZCcpLAogICAgICAgIHR5cGUgPSByZWNvcmQuY29uc3RydWN0b3IudHlwZUtleTsKCiAgICByZXR1cm4gdGhpcy5hamF4KHRoaXMudXJsUHJlZml4KHVybCwgdGhpcy5idWlsZFVSTCh0eXBlLCBpZCkpLCAnR0VUJyk7CiAgfSwKCiAgLyoqCiAgICBDYWxsZWQgYnkgdGhlIHN0b3JlIHdoZW4gYSBuZXdseSBjcmVhdGVkIHJlY29yZCBpcwogICAgc2F2ZWQgdmlhIHRoZSBgc2F2ZWAgbWV0aG9kIG9uIGEgbW9kZWwgcmVjb3JkIGluc3RhbmNlLgoKICAgIFRoZSBgY3JlYXRlUmVjb3JkYCBtZXRob2Qgc2VyaWFsaXplcyB0aGUgcmVjb3JkIGFuZCBtYWtlcyBhbiBBamF4IChIVFRQIFBPU1QpIHJlcXVlc3QKICAgIHRvIGEgVVJMIGNvbXB1dGVkIGJ5IGBidWlsZFVSTGAuCgogICAgU2VlIGBzZXJpYWxpemVgIGZvciBpbmZvcm1hdGlvbiBvbiBob3cgdG8gY3VzdG9taXplIHRoZSBzZXJpYWxpemVkIGZvcm0KICAgIG9mIGEgcmVjb3JkLgoKICAgIEBtZXRob2QgY3JlYXRlUmVjb3JkCiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgY3JlYXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgZGF0YSA9IHt9OwogICAgdmFyIHNlcmlhbGl6ZXIgPSBzdG9yZS5zZXJpYWxpemVyRm9yKHR5cGUudHlwZUtleSk7CgogICAgc2VyaWFsaXplci5zZXJpYWxpemVJbnRvSGFzaChkYXRhLCB0eXBlLCByZWNvcmQsIHsgaW5jbHVkZUlkOiB0cnVlIH0pOwoKICAgIHJldHVybiB0aGlzLmFqYXgodGhpcy5idWlsZFVSTCh0eXBlLnR5cGVLZXkpLCAiUE9TVCIsIHsgZGF0YTogZGF0YSB9KTsKICB9LAoKICAvKioKICAgIENhbGxlZCBieSB0aGUgc3RvcmUgd2hlbiBhbiBleGlzdGluZyByZWNvcmQgaXMgc2F2ZWQKICAgIHZpYSB0aGUgYHNhdmVgIG1ldGhvZCBvbiBhIG1vZGVsIHJlY29yZCBpbnN0YW5jZS4KCiAgICBUaGUgYHVwZGF0ZVJlY29yZGAgbWV0aG9kIHNlcmlhbGl6ZXMgdGhlIHJlY29yZCBhbmQgbWFrZXMgYW4gQWpheCAoSFRUUCBQVVQpIHJlcXVlc3QKICAgIHRvIGEgVVJMIGNvbXB1dGVkIGJ5IGBidWlsZFVSTGAuCgogICAgU2VlIGBzZXJpYWxpemVgIGZvciBpbmZvcm1hdGlvbiBvbiBob3cgdG8gY3VzdG9taXplIHRoZSBzZXJpYWxpemVkIGZvcm0KICAgIG9mIGEgcmVjb3JkLgoKICAgIEBtZXRob2QgdXBkYXRlUmVjb3JkCiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZQogICovCiAgdXBkYXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgZGF0YSA9IHt9OwogICAgdmFyIHNlcmlhbGl6ZXIgPSBzdG9yZS5zZXJpYWxpemVyRm9yKHR5cGUudHlwZUtleSk7CgogICAgc2VyaWFsaXplci5zZXJpYWxpemVJbnRvSGFzaChkYXRhLCB0eXBlLCByZWNvcmQpOwoKICAgIHZhciBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgIHJldHVybiB0aGlzLmFqYXgodGhpcy5idWlsZFVSTCh0eXBlLnR5cGVLZXksIGlkKSwgIlBVVCIsIHsgZGF0YTogZGF0YSB9KTsKICB9LAoKICAvKioKICAgIENhbGxlZCBieSB0aGUgc3RvcmUgd2hlbiBhIHJlY29yZCBpcyBkZWxldGVkLgoKICAgIFRoZSBgZGVsZXRlUmVjb3JkYCBtZXRob2QgIG1ha2VzIGFuIEFqYXggKEhUVFAgREVMRVRFKSByZXF1ZXN0IHRvIGEgVVJMIGNvbXB1dGVkIGJ5IGBidWlsZFVSTGAuCgogICAgQG1ldGhvZCBkZWxldGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICBkZWxldGVSZWNvcmQ6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCByZWNvcmQpIHsKICAgIHZhciBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgIHJldHVybiB0aGlzLmFqYXgodGhpcy5idWlsZFVSTCh0eXBlLnR5cGVLZXksIGlkKSwgIkRFTEVURSIpOwogIH0sCgogIC8qKgogICAgQnVpbGRzIGEgVVJMIGZvciBhIGdpdmVuIHR5cGUgYW5kIG9wdGlvbmFsIElELgoKICAgIEJ5IGRlZmF1bHQsIGl0IHBsdXJhbGl6ZXMgdGhlIHR5cGUncyBuYW1lIChmb3IgZXhhbXBsZSwgJ3Bvc3QnCiAgICBiZWNvbWVzICdwb3N0cycgYW5kICdwZXJzb24nIGJlY29tZXMgJ3Blb3BsZScpLiBUbyBvdmVycmlkZSB0aGUKICAgIHBsdXJhbGl6YXRpb24gc2VlIFtwYXRoRm9yVHlwZV0oI21ldGhvZF9wYXRoRm9yVHlwZSkuCgogICAgSWYgYW4gSUQgaXMgc3BlY2lmaWVkLCBpdCBhZGRzIHRoZSBJRCB0byB0aGUgcGF0aCBnZW5lcmF0ZWQKICAgIGZvciB0aGUgdHlwZSwgc2VwYXJhdGVkIGJ5IGEgYC9gLgoKICAgIEBtZXRob2QgYnVpbGRVUkwKICAgIEBwYXJhbSB7U3RyaW5nfSB0eXBlCiAgICBAcGFyYW0ge1N0cmluZ30gaWQKICAgIEByZXR1cm5zIHtTdHJpbmd9IHVybAogICovCiAgYnVpbGRVUkw6IGZ1bmN0aW9uKHR5cGUsIGlkKSB7CiAgICB2YXIgdXJsID0gW10sCiAgICAgICAgaG9zdCA9IGdldCh0aGlzLCAnaG9zdCcpLAogICAgICAgIHByZWZpeCA9IHRoaXMudXJsUHJlZml4KCk7CgogICAgaWYgKHR5cGUpIHsgdXJsLnB1c2godGhpcy5wYXRoRm9yVHlwZSh0eXBlKSk7IH0KICAgIGlmIChpZCkgeyB1cmwucHVzaChpZCk7IH0KCiAgICBpZiAocHJlZml4KSB7IHVybC51bnNoaWZ0KHByZWZpeCk7IH0KCiAgICB1cmwgPSB1cmwuam9pbignLycpOwogICAgaWYgKCFob3N0ICYmIHVybCkgeyB1cmwgPSAnLycgKyB1cmw7IH0KCiAgICByZXR1cm4gdXJsOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCB1cmxQcmVmaXgKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge1N0cmluZ30gcGF0aAogICAgQHBhcmFtIHtTdHJpbmd9IHBhcmVudFVybAogICAgQHJldHVybiB7U3RyaW5nfSB1cmxQcmVmaXgKICAqLwogIHVybFByZWZpeDogZnVuY3Rpb24ocGF0aCwgcGFyZW50VVJMKSB7CiAgICB2YXIgaG9zdCA9IGdldCh0aGlzLCAnaG9zdCcpLAogICAgICAgIG5hbWVzcGFjZSA9IGdldCh0aGlzLCAnbmFtZXNwYWNlJyksCiAgICAgICAgdXJsID0gW107CgogICAgaWYgKHBhdGgpIHsKICAgICAgLy8gQWJzb2x1dGUgcGF0aAogICAgICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykgewogICAgICAgIGlmIChob3N0KSB7CiAgICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgxKTsKICAgICAgICAgIHVybC5wdXNoKGhvc3QpOwogICAgICAgIH0KICAgICAgLy8gUmVsYXRpdmUgcGF0aAogICAgICB9IGVsc2UgaWYgKCEvXmh0dHAocyk/OlwvXC8vLnRlc3QocGF0aCkpIHsKICAgICAgICB1cmwucHVzaChwYXJlbnRVUkwpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAoaG9zdCkgeyB1cmwucHVzaChob3N0KTsgfQogICAgICBpZiAobmFtZXNwYWNlKSB7IHVybC5wdXNoKG5hbWVzcGFjZSk7IH0KICAgIH0KCiAgICBpZiAocGF0aCkgewogICAgICB1cmwucHVzaChwYXRoKTsKICAgIH0KCiAgICByZXR1cm4gdXJsLmpvaW4oJy8nKTsKICB9LAoKICAvKioKICAgIERldGVybWluZXMgdGhlIHBhdGhuYW1lIGZvciBhIGdpdmVuIHR5cGUuCgogICAgQnkgZGVmYXVsdCwgaXQgcGx1cmFsaXplcyB0aGUgdHlwZSdzIG5hbWUgKGZvciBleGFtcGxlLAogICAgJ3Bvc3QnIGJlY29tZXMgJ3Bvc3RzJyBhbmQgJ3BlcnNvbicgYmVjb21lcyAncGVvcGxlJykuCgogICAgIyMjIFBhdGhuYW1lIGN1c3RvbWl6YXRpb24KCiAgICBGb3IgZXhhbXBsZSBpZiB5b3UgaGF2ZSBhbiBvYmplY3QgTGluZUl0ZW0gd2l0aCBhbgogICAgZW5kcG9pbnQgb2YgIi9saW5lX2l0ZW1zLyIuCgogICAgYGBganMKICAgIERTLlJFU1RBZGFwdGVyLnJlb3Blbih7CiAgICAgIHBhdGhGb3JUeXBlOiBmdW5jdGlvbih0eXBlKSB7CiAgICAgICAgdmFyIGRlY2FtZWxpemVkID0gRW1iZXIuU3RyaW5nLmRlY2FtZWxpemUodHlwZSk7CiAgICAgICAgcmV0dXJuIEVtYmVyLlN0cmluZy5wbHVyYWxpemUoZGVjYW1lbGl6ZWQpOwogICAgICB9OwogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIHBhdGhGb3JUeXBlCiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgQHJldHVybnMge1N0cmluZ30gcGF0aAogICoqLwogIHBhdGhGb3JUeXBlOiBmdW5jdGlvbih0eXBlKSB7CiAgICByZXR1cm4gRW1iZXIuU3RyaW5nLnBsdXJhbGl6ZSh0eXBlKTsKICB9LAoKICAvKioKICAgIFRha2VzIGFuIGFqYXggcmVzcG9uc2UsIGFuZCByZXR1cm5zIGEgcmVsYXZhbnQgZXJyb3IuCgogICAgUmV0dXJuaW5nIGEgYERTLkludmFsaWRFcnJvcmAgZnJvbSB0aGlzIG1ldGhvZCB3aWxsIGNhdXNlIHRoZQogICAgcmVjb3JkIHRvIHRyYW5zaXRpb24gaW50byB0aGUgYGludmFsaWRgIHN0YXRlIGFuZCBtYWtlIHRoZQogICAgYGVycm9yc2Agb2JqZWN0IGF2YWlsYWJsZSBvbiB0aGUgcmVjb3JkLgoKICAgIGBgYGphdmFzY3JpcHQKICAgIEFwcC5BcHBsaWNhdGlvbkFkYXB0ZXIgPSBEUy5SRVNUQWRhcHRlci5leHRlbmQoewogICAgICBhamF4RXJyb3I6IGZ1bmN0aW9uKGpxWEhSKSB7CiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fc3VwZXIoanFYSFIpOwoKICAgICAgICBpZiAoanFYSFIgJiYganFYSFIuc3RhdHVzID09PSA0MjIpIHsKICAgICAgICAgIHZhciBqc29uRXJyb3JzID0gRW1iZXIuJC5wYXJzZUpTT04oanFYSFIucmVzcG9uc2VUZXh0KVsiZXJyb3JzIl07CgogICAgICAgICAgcmV0dXJuIG5ldyBEUy5JbnZhbGlkRXJyb3IoanNvbkVycm9ycyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgTm90ZTogQXMgYSBjb3JyZWN0bmVzcyBvcHRpbWl6YXRpb24sIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mCiAgICB0aGUgYGFqYXhFcnJvcmAgbWV0aG9kIHN0cmlwcyBvdXQgdGhlIGB0aGVuYCBtZXRob2QgZnJvbSBqcXVlcnkncwogICAgYWpheCByZXNwb25zZSAoanFYSFIpLiBUaGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIHRoZSBqcVhIUidzCiAgICBgdGhlbmAgbWV0aG9kIGZ1bGZpbGxzIHRoZSBwcm9taXNlIHdpdGggaXRzZWxmIHJlc3VsdGluZyBpbiBhCiAgICBjaXJjdWxhciAidGhlbmFibGUiIGNoYWluIHdoaWNoIG1heSBjYXVzZSBwcm9ibGVtcyBmb3Igc29tZQogICAgcHJvbWlzZSBsaWJyYXJpZXMuCgogICAgQG1ldGhvZCBhamF4RXJyb3IKICAgIEBwYXJhbSAge09iamVjdH0ganFYSFIKICAgIEByZXR1cm4ge09iamVjdH0ganFYSFIKICAqLwogIGFqYXhFcnJvcjogZnVuY3Rpb24oanFYSFIpIHsKICAgIGlmIChqcVhIUikgewogICAgICBqcVhIUi50aGVuID0gbnVsbDsKICAgIH0KCiAgICByZXR1cm4ganFYSFI7CiAgfSwKCiAgLyoqCiAgICBUYWtlcyBhIFVSTCwgYW4gSFRUUCBtZXRob2QgYW5kIGEgaGFzaCBvZiBkYXRhLCBhbmQgbWFrZXMgYW4KICAgIEhUVFAgcmVxdWVzdC4KCiAgICBXaGVuIHRoZSBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCBhIHBheWxvYWQsIEVtYmVyIERhdGEgd2lsbCBjYWxsIGludG8gYGV4dHJhY3RTaW5nbGVgCiAgICBvciBgZXh0cmFjdEFycmF5YCAoZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIG9yaWdpbmFsIHF1ZXJ5IHdhcyBmb3Igb25lIHJlY29yZCBvcgogICAgbWFueSByZWNvcmRzKS4KCiAgICBCeSBkZWZhdWx0LCBgYWpheGAgbWV0aG9kIGhhcyB0aGUgZm9sbG93aW5nIGJlaGF2aW9yOgoKICAgICogSXQgc2V0cyB0aGUgcmVzcG9uc2UgYGRhdGFUeXBlYCB0byBgImpzb24iYAogICAgKiBJZiB0aGUgSFRUUCBtZXRob2QgaXMgbm90IGAiR0VUImAsIGl0IHNldHMgdGhlIGBDb250ZW50LVR5cGVgIHRvIGJlCiAgICAgIGBhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04YAogICAgKiBJZiB0aGUgSFRUUCBtZXRob2QgaXMgbm90IGAiR0VUImAsIGl0IHN0cmluZ2lmaWVzIHRoZSBkYXRhIHBhc3NlZCBpbi4gVGhlCiAgICAgIGRhdGEgaXMgdGhlIHNlcmlhbGl6ZWQgcmVjb3JkIGluIHRoZSBjYXNlIG9mIGEgc2F2ZS4KICAgICogUmVnaXN0ZXJzIHN1Y2Nlc3MgYW5kIGZhaWx1cmUgaGFuZGxlcnMuCgogICAgQG1ldGhvZCBhamF4CiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtTdHJpbmd9IHVybAogICAgQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHJlcXVlc3QgdHlwZSBHRVQsIFBPU1QsIFBVVCwgREVMRVRFIGVjdC4KICAgIEBwYXJhbSB7T2JqZWN0fSBoYXNoCiAgICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlCiAgKi8KICBhamF4OiBmdW5jdGlvbih1cmwsIHR5cGUsIGhhc2gpIHsKICAgIHZhciBhZGFwdGVyID0gdGhpczsKCiAgICByZXR1cm4gbmV3IEVtYmVyLlJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgaGFzaCA9IGFkYXB0ZXIuYWpheE9wdGlvbnModXJsLCB0eXBlLCBoYXNoKTsKCiAgICAgIGhhc2guc3VjY2VzcyA9IGZ1bmN0aW9uKGpzb24pIHsKICAgICAgICBFbWJlci5ydW4obnVsbCwgcmVzb2x2ZSwganNvbik7CiAgICAgIH07CgogICAgICBoYXNoLmVycm9yID0gZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7CiAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlamVjdCwgYWRhcHRlci5hamF4RXJyb3IoanFYSFIpKTsKICAgICAgfTsKCiAgICAgIEVtYmVyLiQuYWpheChoYXNoKTsKICAgIH0sICJEUzogUmVzdEFkYXB0ZXIjYWpheCAiICsgdHlwZSArICIgdG8gIiArIHVybCk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGFqYXhPcHRpb25zCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtTdHJpbmd9IHVybAogICAgQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHJlcXVlc3QgdHlwZSBHRVQsIFBPU1QsIFBVVCwgREVMRVRFIGVjdC4KICAgIEBwYXJhbSB7T2JqZWN0fSBoYXNoCiAgICBAcmV0dXJuIHtPYmplY3R9IGhhc2gKICAqLwogIGFqYXhPcHRpb25zOiBmdW5jdGlvbih1cmwsIHR5cGUsIGhhc2gpIHsKICAgIGhhc2ggPSBoYXNoIHx8IHt9OwogICAgaGFzaC51cmwgPSB1cmw7CiAgICBoYXNoLnR5cGUgPSB0eXBlOwogICAgaGFzaC5kYXRhVHlwZSA9ICdqc29uJzsKICAgIGhhc2guY29udGV4dCA9IHRoaXM7CgogICAgaWYgKGhhc2guZGF0YSAmJiB0eXBlICE9PSAnR0VUJykgewogICAgICBoYXNoLmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnOwogICAgICBoYXNoLmRhdGEgPSBKU09OLnN0cmluZ2lmeShoYXNoLmRhdGEpOwogICAgfQoKICAgIGlmICh0aGlzLmhlYWRlcnMgIT09IHVuZGVmaW5lZCkgewogICAgICB2YXIgaGVhZGVycyA9IHRoaXMuaGVhZGVyczsKICAgICAgaGFzaC5iZWZvcmVTZW5kID0gZnVuY3Rpb24gKHhocikgewogICAgICAgIGZvckVhY2guY2FsbChFbWJlci5rZXlzKGhlYWRlcnMpLCBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KCgogICAgcmV0dXJuIGhhc2g7CiAgfQoKfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewpEUy5Nb2RlbC5yZW9wZW4oewoKICAvKioKICAgIFByb3ZpZGVzIGluZm8gYWJvdXQgdGhlIG1vZGVsIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMKICAgIGJ5IGdyb3VwaW5nIHRoZSBwcm9wZXJ0aWVzIGludG8gbW9yZSBzZW1hbnRpYyBncm91cHMuCgogICAgTWVhbnQgdG8gYmUgdXNlZCBieSBkZWJ1Z2dpbmcgdG9vbHMgc3VjaCBhcyB0aGUgQ2hyb21lIEVtYmVyIEV4dGVuc2lvbi4KCiAgICAtIEdyb3VwcyBhbGwgYXR0cmlidXRlcyBpbiAiQXR0cmlidXRlcyIgZ3JvdXAuCiAgICAtIEdyb3VwcyBhbGwgYmVsb25nc1RvIHJlbGF0aW9uc2hpcHMgaW4gIkJlbG9uZ3MgVG8iIGdyb3VwLgogICAgLSBHcm91cHMgYWxsIGhhc01hbnkgcmVsYXRpb25zaGlwcyBpbiAiSGFzIE1hbnkiIGdyb3VwLgogICAgLSBHcm91cHMgYWxsIGZsYWdzIGluICJGbGFncyIgZ3JvdXAuCiAgICAtIEZsYWdzIHJlbGF0aW9uc2hpcCBDUHMgYXMgZXhwZW5zaXZlIHByb3BlcnRpZXMuCgogICAgQG1ldGhvZCBfZGVidWdJbmZvCiAgICBAZm9yIERTLk1vZGVsCiAgICBAcHJpdmF0ZQogICovCiAgX2RlYnVnSW5mbzogZnVuY3Rpb24oKSB7CiAgICB2YXIgYXR0cmlidXRlcyA9IFsnaWQnXSwKICAgICAgICByZWxhdGlvbnNoaXBzID0geyBiZWxvbmdzVG86IFtdLCBoYXNNYW55OiBbXSB9LAogICAgICAgIGV4cGVuc2l2ZVByb3BlcnRpZXMgPSBbXTsKCiAgICB0aGlzLmVhY2hBdHRyaWJ1dGUoZnVuY3Rpb24obmFtZSwgbWV0YSkgewogICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSk7CiAgICB9LCB0aGlzKTsKCiAgICB0aGlzLmVhY2hSZWxhdGlvbnNoaXAoZnVuY3Rpb24obmFtZSwgcmVsYXRpb25zaGlwKSB7CiAgICAgIHJlbGF0aW9uc2hpcHNbcmVsYXRpb25zaGlwLmtpbmRdLnB1c2gobmFtZSk7CiAgICAgIGV4cGVuc2l2ZVByb3BlcnRpZXMucHVzaChuYW1lKTsKICAgIH0pOwoKICAgIHZhciBncm91cHMgPSBbCiAgICAgIHsKICAgICAgICBuYW1lOiAnQXR0cmlidXRlcycsCiAgICAgICAgcHJvcGVydGllczogYXR0cmlidXRlcywKICAgICAgICBleHBhbmQ6IHRydWUKICAgICAgfSwKICAgICAgewogICAgICAgIG5hbWU6ICdCZWxvbmdzIFRvJywKICAgICAgICBwcm9wZXJ0aWVzOiByZWxhdGlvbnNoaXBzLmJlbG9uZ3NUbywKICAgICAgICBleHBhbmQ6IHRydWUKICAgICAgfSwKICAgICAgewogICAgICAgIG5hbWU6ICdIYXMgTWFueScsCiAgICAgICAgcHJvcGVydGllczogcmVsYXRpb25zaGlwcy5oYXNNYW55LAogICAgICAgIGV4cGFuZDogdHJ1ZQogICAgICB9LAogICAgICB7CiAgICAgICAgbmFtZTogJ0ZsYWdzJywKICAgICAgICBwcm9wZXJ0aWVzOiBbJ2lzTG9hZGVkJywgJ2lzRGlydHknLCAnaXNTYXZpbmcnLCAnaXNEZWxldGVkJywgJ2lzRXJyb3InLCAnaXNOZXcnLCAnaXNWYWxpZCddCiAgICAgIH0KICAgIF07CgogICAgcmV0dXJuIHsKICAgICAgcHJvcGVydHlJbmZvOiB7CiAgICAgICAgLy8gaW5jbHVkZSBhbGwgb3RoZXIgbWl4aW5zIC8gcHJvcGVydGllcyAobm90IGp1c3QgdGhlIGdyb3VwZWQgb25lcykKICAgICAgICBpbmNsdWRlT3RoZXJQcm9wZXJ0aWVzOiB0cnVlLAogICAgICAgIGdyb3VwczogZ3JvdXBzLAogICAgICAgIC8vIGRvbid0IHByZS1jYWxjdWxhdGUgdW5sZXNzIGNhY2hlZAogICAgICAgIGV4cGVuc2l2ZVByb3BlcnRpZXM6IGV4cGVuc2l2ZVByb3BlcnRpZXMKICAgICAgfQogICAgfTsKICB9Cgp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEVtYmVyIERhdGEKCiAgQG1vZHVsZSBlbWJlci1kYXRhCiAgQG1haW4gZW1iZXItZGF0YQoqLwoKfSkoKTsKCihmdW5jdGlvbigpIHsKRW1iZXIuU3RyaW5nLnBsdXJhbGl6ZSA9IGZ1bmN0aW9uKHdvcmQpIHsKICByZXR1cm4gRW1iZXIuSW5mbGVjdG9yLmluZmxlY3Rvci5wbHVyYWxpemUod29yZCk7Cn07CgpFbWJlci5TdHJpbmcuc2luZ3VsYXJpemUgPSBmdW5jdGlvbih3b3JkKSB7CiAgcmV0dXJuIEVtYmVyLkluZmxlY3Rvci5pbmZsZWN0b3Iuc2luZ3VsYXJpemUod29yZCk7Cn07Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7CnZhciBCTEFOS19SRUdFWCA9IC9eXHMqJC87CgpmdW5jdGlvbiBsb2FkVW5jb3VudGFibGUocnVsZXMsIHVuY291bnRhYmxlKSB7CiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHVuY291bnRhYmxlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICBydWxlcy51bmNvdW50YWJsZVt1bmNvdW50YWJsZVtpXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7CiAgfQp9CgpmdW5jdGlvbiBsb2FkSXJyZWd1bGFyKHJ1bGVzLCBpcnJlZ3VsYXJQYWlycykgewogIHZhciBwYWlyOwoKICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gaXJyZWd1bGFyUGFpcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgIHBhaXIgPSBpcnJlZ3VsYXJQYWlyc1tpXTsKCiAgICBydWxlcy5pcnJlZ3VsYXJbcGFpclswXS50b0xvd2VyQ2FzZSgpXSA9IHBhaXJbMV07CiAgICBydWxlcy5pcnJlZ3VsYXJJbnZlcnNlW3BhaXJbMV0udG9Mb3dlckNhc2UoKV0gPSBwYWlyWzBdOwogIH0KfQoKLyoqCiAgSW5mbGVjdG9yLkVtYmVyIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBzdXBwbHlpbmcgaW5mbGVjdGlvbiBydWxlcyBmb3IgeW91cgogIGFwcGxpY2F0aW9uLiBFbWJlciBpbmNsdWRlcyBhIGRlZmF1bHQgc2V0IG9mIGluZmxlY3Rpb24gcnVsZXMsIGFuZCBwcm92aWRlcyBhbgogIEFQSSBmb3IgcHJvdmlkaW5nIGFkZGl0aW9uYWwgcnVsZXMuCgogIEV4YW1wbGVzOgoKICBDcmVhdGluZyBhbiBpbmZsZWN0b3Igd2l0aCBubyBydWxlcy4KCiAgYGBganMKICB2YXIgaW5mbGVjdG9yID0gbmV3IEVtYmVyLkluZmxlY3RvcigpOwogIGBgYAoKICBDcmVhdGluZyBhbiBpbmZsZWN0b3Igd2l0aCB0aGUgZGVmYXVsdCBlbWJlciBydWxlc2V0LgoKICBgYGBqcwogIHZhciBpbmZsZWN0b3IgPSBuZXcgRW1iZXIuSW5mbGVjdG9yKEVtYmVyLkluZmxlY3Rvci5kZWZhdWx0UnVsZXMpOwoKICBpbmZsZWN0b3IucGx1cmFsaXplKCdjb3cnKSAvLz0+ICdraW5lJwogIGluZmxlY3Rvci5zaW5ndWxhcml6ZSgna2luZScpIC8vPT4gJ2NvdycKICBgYGAKCiAgQ3JlYXRpbmcgYW4gaW5mbGVjdG9yIGFuZCBhZGRpbmcgcnVsZXMgbGF0ZXIuCgogIGBgYGphdmFzY3JpcHQKICB2YXIgaW5mbGVjdG9yID0gRW1iZXIuSW5mbGVjdG9yLmluZmxlY3RvcjsKCiAgaW5mbGVjdG9yLnBsdXJhbGl6ZSgnYWR2aWNlJykgLy8gPT4gJ2FkdmljZXMnCiAgaW5mbGVjdG9yLnVuY291bnRhYmxlKCdhZHZpY2UnKTsKICBpbmZsZWN0b3IucGx1cmFsaXplKCdhZHZpY2UnKSAvLyA9PiAnYWR2aWNlJwoKICBpbmZsZWN0b3IucGx1cmFsaXplKCdmb3JtdWxhJykgLy8gPT4gJ2Zvcm11bGFzJwogIGluZmxlY3Rvci5pcnJlZ3VsYXIoJ2Zvcm11bGEnLCAnZm9ybXVsYWUnKTsKICBpbmZsZWN0b3IucGx1cmFsaXplKCdmb3JtdWxhJykgLy8gPT4gJ2Zvcm11bGFlJwoKICAvLyB5b3Ugd291bGQgbm90IG5lZWQgdG8gYWRkIHRoZXNlIGFzIHRoZXkgYXJlIHRoZSBkZWZhdWx0IHJ1bGVzCiAgaW5mbGVjdG9yLnBsdXJhbCgvJC8sICdzJyk7CiAgaW5mbGVjdG9yLnNpbmd1bGFyKC9zJC9pLCAnJyk7CiAgYGBgCgogIENyZWF0aW5nIGFuIGluZmxlY3RvciB3aXRoIGEgbm9uZGVmYXVsdCBydWxlc2V0LgoKICBgYGBqYXZhc2NyaXB0CiAgdmFyIHJ1bGVzID0gewogICAgcGx1cmFsczogIFsgLyQvLCAncycgXSwKICAgIHNpbmd1bGFyOiBbIC9ccyQvLCAnJyBdLAogICAgaXJyZWd1bGFyUGFpcnM6IFsKICAgICAgWyAnY293JywgJ2tpbmUnIF0KICAgIF0sCiAgICB1bmNvdW50YWJsZTogWyAnZmlzaCcgXQogIH07CgogIHZhciBpbmZsZWN0b3IgPSBuZXcgRW1iZXIuSW5mbGVjdG9yKHJ1bGVzKTsKICBgYGAKCiAgQGNsYXNzIEluZmxlY3RvcgogIEBuYW1lc3BhY2UgRW1iZXIKKi8KZnVuY3Rpb24gSW5mbGVjdG9yKHJ1bGVTZXQpIHsKICBydWxlU2V0ID0gcnVsZVNldCB8fCB7fTsKICBydWxlU2V0LnVuY291bnRhYmxlID0gcnVsZVNldC51bmNvdW50YWJsZSB8fCB7fTsKICBydWxlU2V0LmlycmVndWxhclBhaXJzID0gcnVsZVNldC5pcnJlZ3VsYXJQYWlycyB8fCB7fTsKCiAgdmFyIHJ1bGVzID0gdGhpcy5ydWxlcyA9IHsKICAgIHBsdXJhbHM6ICBydWxlU2V0LnBsdXJhbHMgfHwgW10sCiAgICBzaW5ndWxhcjogcnVsZVNldC5zaW5ndWxhciB8fCBbXSwKICAgIGlycmVndWxhcjoge30sCiAgICBpcnJlZ3VsYXJJbnZlcnNlOiB7fSwKICAgIHVuY291bnRhYmxlOiB7fQogIH07CgogIGxvYWRVbmNvdW50YWJsZShydWxlcywgcnVsZVNldC51bmNvdW50YWJsZSk7CiAgbG9hZElycmVndWxhcihydWxlcywgcnVsZVNldC5pcnJlZ3VsYXJQYWlycyk7Cn0KCkluZmxlY3Rvci5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICBAbWV0aG9kIHBsdXJhbAogICAgQHBhcmFtIHtSZWdFeHB9IHJlZ2V4CiAgICBAcGFyYW0ge1N0cmluZ30gc3RyaW5nCiAgKi8KICBwbHVyYWw6IGZ1bmN0aW9uKHJlZ2V4LCBzdHJpbmcpIHsKICAgIHRoaXMucnVsZXMucGx1cmFscy5wdXNoKFtyZWdleCwgc3RyaW5nLnRvTG93ZXJDYXNlKCldKTsKICB9LAoKICAvKioKICAgIEBtZXRob2Qgc2luZ3VsYXIKICAgIEBwYXJhbSB7UmVnRXhwfSByZWdleAogICAgQHBhcmFtIHtTdHJpbmd9IHN0cmluZwogICovCiAgc2luZ3VsYXI6IGZ1bmN0aW9uKHJlZ2V4LCBzdHJpbmcpIHsKICAgIHRoaXMucnVsZXMuc2luZ3VsYXIucHVzaChbcmVnZXgsIHN0cmluZy50b0xvd2VyQ2FzZSgpXSk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHVuY291bnRhYmxlCiAgICBAcGFyYW0ge1N0cmluZ30gcmVnZXgKICAqLwogIHVuY291bnRhYmxlOiBmdW5jdGlvbihzdHJpbmcpIHsKICAgIGxvYWRVbmNvdW50YWJsZSh0aGlzLnJ1bGVzLCBbc3RyaW5nLnRvTG93ZXJDYXNlKCldKTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgaXJyZWd1bGFyCiAgICBAcGFyYW0ge1N0cmluZ30gc2luZ3VsYXIKICAgIEBwYXJhbSB7U3RyaW5nfSBwbHVyYWwKICAqLwogIGlycmVndWxhcjogZnVuY3Rpb24gKHNpbmd1bGFyLCBwbHVyYWwpIHsKICAgIGxvYWRJcnJlZ3VsYXIodGhpcy5ydWxlcywgW1tzaW5ndWxhciwgcGx1cmFsXV0pOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBwbHVyYWxpemUKICAgIEBwYXJhbSB7U3RyaW5nfSB3b3JkCiAgKi8KICBwbHVyYWxpemU6IGZ1bmN0aW9uKHdvcmQpIHsKICAgIHJldHVybiB0aGlzLmluZmxlY3Qod29yZCwgdGhpcy5ydWxlcy5wbHVyYWxzLCB0aGlzLnJ1bGVzLmlycmVndWxhcik7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHNpbmd1bGFyaXplCiAgICBAcGFyYW0ge1N0cmluZ30gd29yZAogICovCiAgc2luZ3VsYXJpemU6IGZ1bmN0aW9uKHdvcmQpIHsKICAgIHJldHVybiB0aGlzLmluZmxlY3Qod29yZCwgdGhpcy5ydWxlcy5zaW5ndWxhciwgIHRoaXMucnVsZXMuaXJyZWd1bGFySW52ZXJzZSk7CiAgfSwKCiAgLyoqCiAgICBAcHJvdGVjdGVkCgogICAgQG1ldGhvZCBpbmZsZWN0CiAgICBAcGFyYW0ge1N0cmluZ30gd29yZAogICAgQHBhcmFtIHtPYmplY3R9IHR5cGVSdWxlcwogICAgQHBhcmFtIHtPYmplY3R9IGlycmVndWxhcgogICovCiAgaW5mbGVjdDogZnVuY3Rpb24od29yZCwgdHlwZVJ1bGVzLCBpcnJlZ3VsYXIpIHsKICAgIHZhciBpbmZsZWN0aW9uLCBzdWJzdGl0dXRpb24sIHJlc3VsdCwgbG93ZXJjYXNlLCBpc0JsYW5rLAogICAgaXNVbmNvdW50YWJsZSwgaXNJcnJlZ3VsYXIsIGlzSXJyZWd1bGFySW52ZXJzZSwgcnVsZTsKCiAgICBpc0JsYW5rID0gQkxBTktfUkVHRVgudGVzdCh3b3JkKTsKCiAgICBpZiAoaXNCbGFuaykgewogICAgICByZXR1cm4gd29yZDsKICAgIH0KCiAgICBsb3dlcmNhc2UgPSB3b3JkLnRvTG93ZXJDYXNlKCk7CgogICAgaXNVbmNvdW50YWJsZSA9IHRoaXMucnVsZXMudW5jb3VudGFibGVbbG93ZXJjYXNlXTsKCiAgICBpZiAoaXNVbmNvdW50YWJsZSkgewogICAgICByZXR1cm4gd29yZDsKICAgIH0KCiAgICBpc0lycmVndWxhciA9IGlycmVndWxhciAmJiBpcnJlZ3VsYXJbbG93ZXJjYXNlXTsKCiAgICBpZiAoaXNJcnJlZ3VsYXIpIHsKICAgICAgcmV0dXJuIGlzSXJyZWd1bGFyOwogICAgfQoKICAgIGZvciAodmFyIGkgPSB0eXBlUnVsZXMubGVuZ3RoLCBtaW4gPSAwOyBpID4gbWluOyBpLS0pIHsKICAgICAgIGluZmxlY3Rpb24gPSB0eXBlUnVsZXNbaS0xXTsKICAgICAgIHJ1bGUgPSBpbmZsZWN0aW9uWzBdOwoKICAgICAgaWYgKHJ1bGUudGVzdCh3b3JkKSkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgaW5mbGVjdGlvbiA9IGluZmxlY3Rpb24gfHwgW107CgogICAgcnVsZSA9IGluZmxlY3Rpb25bMF07CiAgICBzdWJzdGl0dXRpb24gPSBpbmZsZWN0aW9uWzFdOwoKICAgIHJlc3VsdCA9IHdvcmQucmVwbGFjZShydWxlLCBzdWJzdGl0dXRpb24pOwoKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9OwoKRW1iZXIuSW5mbGVjdG9yID0gSW5mbGVjdG9yOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewpFbWJlci5JbmZsZWN0b3IuZGVmYXVsdFJ1bGVzID0gewogIHBsdXJhbHM6IFsKICAgIFsvJC8sICdzJ10sCiAgICBbL3MkL2ksICdzJ10sCiAgICBbL14oYXh8dGVzdClpcyQvaSwgJyQxZXMnXSwKICAgIFsvKG9jdG9wfHZpcil1cyQvaSwgJyQxaSddLAogICAgWy8ob2N0b3B8dmlyKWkkL2ksICckMWknXSwKICAgIFsvKGFsaWFzfHN0YXR1cykkL2ksICckMWVzJ10sCiAgICBbLyhidSlzJC9pLCAnJDFzZXMnXSwKICAgIFsvKGJ1ZmZhbHx0b21hdClvJC9pLCAnJDFvZXMnXSwKICAgIFsvKFt0aV0pdW0kL2ksICckMWEnXSwKICAgIFsvKFt0aV0pYSQvaSwgJyQxYSddLAogICAgWy9zaXMkL2ksICdzZXMnXSwKICAgIFsvKD86KFteZl0pZmV8KFtscl0pZikkL2ksICckMSQydmVzJ10sCiAgICBbLyhoaXZlKSQvaSwgJyQxcyddLAogICAgWy8oW15hZWlvdXldfHF1KXkkL2ksICckMWllcyddLAogICAgWy8oeHxjaHxzc3xzaCkkL2ksICckMWVzJ10sCiAgICBbLyhtYXRyfHZlcnR8aW5kKSg/Oml4fGV4KSQvaSwgJyQxaWNlcyddLAogICAgWy9eKG18bClvdXNlJC9pLCAnJDFpY2UnXSwKICAgIFsvXihtfGwpaWNlJC9pLCAnJDFpY2UnXSwKICAgIFsvXihveCkkL2ksICckMWVuJ10sCiAgICBbL14ob3hlbikkL2ksICckMSddLAogICAgWy8ocXVpeikkL2ksICckMXplcyddCiAgXSwKCiAgc2luZ3VsYXI6IFsKICAgIFsvcyQvaSwgJyddLAogICAgWy8oc3MpJC9pLCAnJDEnXSwKICAgIFsvKG4pZXdzJC9pLCAnJDFld3MnXSwKICAgIFsvKFt0aV0pYSQvaSwgJyQxdW0nXSwKICAgIFsvKChhKW5hbHl8KGIpYXwoZClpYWdub3wocClhcmVudGhlfChwKXJvZ25vfChzKXlub3B8KHQpaGUpKHNpc3xzZXMpJC9pLCAnJDFzaXMnXSwKICAgIFsvKF5hbmFseSkoc2lzfHNlcykkL2ksICckMXNpcyddLAogICAgWy8oW15mXSl2ZXMkL2ksICckMWZlJ10sCiAgICBbLyhoaXZlKXMkL2ksICckMSddLAogICAgWy8odGl2ZSlzJC9pLCAnJDEnXSwKICAgIFsvKFtscl0pdmVzJC9pLCAnJDFmJ10sCiAgICBbLyhbXmFlaW91eV18cXUpaWVzJC9pLCAnJDF5J10sCiAgICBbLyhzKWVyaWVzJC9pLCAnJDFlcmllcyddLAogICAgWy8obSlvdmllcyQvaSwgJyQxb3ZpZSddLAogICAgWy8oeHxjaHxzc3xzaCllcyQvaSwgJyQxJ10sCiAgICBbL14obXxsKWljZSQvaSwgJyQxb3VzZSddLAogICAgWy8oYnVzKShlcyk/JC9pLCAnJDEnXSwKICAgIFsvKG8pZXMkL2ksICckMSddLAogICAgWy8oc2hvZSlzJC9pLCAnJDEnXSwKICAgIFsvKGNyaXN8dGVzdCkoaXN8ZXMpJC9pLCAnJDFpcyddLAogICAgWy9eKGEpeFtpZV1zJC9pLCAnJDF4aXMnXSwKICAgIFsvKG9jdG9wfHZpcikodXN8aSkkL2ksICckMXVzJ10sCiAgICBbLyhhbGlhc3xzdGF0dXMpKGVzKT8kL2ksICckMSddLAogICAgWy9eKG94KWVuL2ksICckMSddLAogICAgWy8odmVydHxpbmQpaWNlcyQvaSwgJyQxZXgnXSwKICAgIFsvKG1hdHIpaWNlcyQvaSwgJyQxaXgnXSwKICAgIFsvKHF1aXopemVzJC9pLCAnJDEnXSwKICAgIFsvKGRhdGFiYXNlKXMkL2ksICckMSddCiAgXSwKCiAgaXJyZWd1bGFyUGFpcnM6IFsKICAgIFsncGVyc29uJywgJ3Blb3BsZSddLAogICAgWydtYW4nLCAnbWVuJ10sCiAgICBbJ2NoaWxkJywgJ2NoaWxkcmVuJ10sCiAgICBbJ3NleCcsICdzZXhlcyddLAogICAgWydtb3ZlJywgJ21vdmVzJ10sCiAgICBbJ2NvdycsICdraW5lJ10sCiAgICBbJ3pvbWJpZScsICd6b21iaWVzJ10KICBdLAoKICB1bmNvdW50YWJsZTogWwogICAgJ2VxdWlwbWVudCcsCiAgICAnaW5mb3JtYXRpb24nLAogICAgJ3JpY2UnLAogICAgJ21vbmV5JywKICAgICdzcGVjaWVzJywKICAgICdzZXJpZXMnLAogICAgJ2Zpc2gnLAogICAgJ3NoZWVwJywKICAgICdqZWFucycsCiAgICAncG9saWNlJwogIF0KfTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKaWYgKEVtYmVyLkVYVEVORF9QUk9UT1RZUEVTID09PSB0cnVlIHx8IEVtYmVyLkVYVEVORF9QUk9UT1RZUEVTLlN0cmluZykgewogIC8qKgogICAgU2VlIHt7I2Nyb3NzTGluayAiRW1iZXIuU3RyaW5nL3BsdXJhbGl6ZSJ9fXt7L2Nyb3NzTGlua319CgogICAgQG1ldGhvZCBwbHVyYWxpemUKICAgIEBmb3IgU3RyaW5nCiAgKi8KICBTdHJpbmcucHJvdG90eXBlLnBsdXJhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIEVtYmVyLlN0cmluZy5wbHVyYWxpemUodGhpcyk7CiAgfTsKCiAgLyoqCiAgICBTZWUge3sjY3Jvc3NMaW5rICJFbWJlci5TdHJpbmcvc2luZ3VsYXJpemUifX17ey9jcm9zc0xpbmt9fQoKICAgIEBtZXRob2Qgc2luZ3VsYXJpemUKICAgIEBmb3IgU3RyaW5nCiAgKi8KICBTdHJpbmcucHJvdG90eXBlLnNpbmd1bGFyaXplID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gRW1iZXIuU3RyaW5nLnNpbmd1bGFyaXplKHRoaXMpOwogIH07Cn0KCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKRW1iZXIuSW5mbGVjdG9yLmluZmxlY3RvciA9IG5ldyBFbWJlci5JbmZsZWN0b3IoRW1iZXIuSW5mbGVjdG9yLmRlZmF1bHRSdWxlcyk7DQoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewoKfSkoKTsKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0Owp2YXIgZm9yRWFjaCA9IEVtYmVyLkVudW1lcmFibGVVdGlscy5mb3JFYWNoOwoKRFMuQWN0aXZlTW9kZWxTZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAvLyBTRVJJQUxJWkUKCiAgLyoqCiAgICBDb252ZXJ0cyBjYW1lbGNhc2VkIGF0dHJpYnV0ZXMgdG8gdW5kZXJzY29yZWQgd2hlbiBzZXJpYWxpemluZy4KCiAgICBAbWV0aG9kIGtleUZvckF0dHJpYnV0ZQogICAgQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZQogICAgQHJldHVybnMgU3RyaW5nCiAgKi8KICBrZXlGb3JBdHRyaWJ1dGU6IGZ1bmN0aW9uKGF0dHIpIHsKICAgIHJldHVybiBFbWJlci5TdHJpbmcuZGVjYW1lbGl6ZShhdHRyKTsKICB9LAoKICAvKioKICAgIFVuZGVyc2NvcmVzIHJlbGF0aW9uc2hpcCBuYW1lcyBhbmQgYXBwZW5kcyAiX2lkIiBvciAiX2lkcyIgd2hlbiBzZXJpYWxpemluZwogICAgcmVsYXRpb25zaGlwIGtleXMuCgogICAgQG1ldGhvZCBrZXlGb3JSZWxhdGlvbnNoaXAKICAgIEBwYXJhbSB7U3RyaW5nfSBrZXkKICAgIEBwYXJhbSB7U3RyaW5nfSBraW5kCiAgICBAcmV0dXJucyBTdHJpbmcKICAqLwogIGtleUZvclJlbGF0aW9uc2hpcDogZnVuY3Rpb24oa2V5LCBraW5kKSB7CiAgICBrZXkgPSBFbWJlci5TdHJpbmcuZGVjYW1lbGl6ZShrZXkpOwogICAgaWYgKGtpbmQgPT09ICJiZWxvbmdzVG8iKSB7CiAgICAgIHJldHVybiBrZXkgKyAiX2lkIjsKICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gImhhc01hbnkiKSB7CiAgICAgIHJldHVybiBFbWJlci5TdHJpbmcuc2luZ3VsYXJpemUoa2V5KSArICJfaWRzIjsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBrZXk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICBEb2VzIG5vdCBzZXJpYWxpemUgaGFzTWFueSByZWxhdGlvbnNoaXBzIGJ5IGRlZmF1bHQuCiAgKi8KICBzZXJpYWxpemVIYXNNYW55OiBFbWJlci5LLAoKICAvKioKICAgIFVuZGVyc2NvcmVzIHRoZSBKU09OIHJvb3Qga2V5cyB3aGVuIHNlcmlhbGl6aW5nLgoKICAgIEBtZXRob2Qgc2VyaWFsaXplSW50b0hhc2gKICAgIEBwYXJhbSB7T2JqZWN0fSBoYXNoCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCiAgKi8KICBzZXJpYWxpemVJbnRvSGFzaDogZnVuY3Rpb24oZGF0YSwgdHlwZSwgcmVjb3JkLCBvcHRpb25zKSB7CiAgICB2YXIgcm9vdCA9IEVtYmVyLlN0cmluZy5kZWNhbWVsaXplKHR5cGUudHlwZUtleSk7CiAgICBkYXRhW3Jvb3RdID0gdGhpcy5zZXJpYWxpemUocmVjb3JkLCBvcHRpb25zKTsKICB9LAoKICAvKioKICAgIFNlcmlhbGl6ZXMgYSBwb2x5bW9ycGhpYyB0eXBlIGFzIGEgZnVsbHkgY2FwaXRhbGl6ZWQgbW9kZWwgbmFtZS4KCiAgICBAbWV0aG9kIHNlcmlhbGl6ZVBvbHltb3JwaGljVHlwZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcGFyYW0ge09iamVjdH0ganNvbgogICAgQHBhcmFtIHJlbGF0aW9uc2hpcAogICovCiAgc2VyaWFsaXplUG9seW1vcnBoaWNUeXBlOiBmdW5jdGlvbihyZWNvcmQsIGpzb24sIHJlbGF0aW9uc2hpcCkgewogICAgdmFyIGtleSA9IHJlbGF0aW9uc2hpcC5rZXksCiAgICAgICAgYmVsb25nc1RvID0gZ2V0KHJlY29yZCwga2V5KTsKICAgIGtleSA9IHRoaXMua2V5Rm9yQXR0cmlidXRlKGtleSk7CiAgICBqc29uW2tleSArICJfdHlwZSJdID0gRW1iZXIuU3RyaW5nLmNhcGl0YWxpemUoYmVsb25nc1RvLmNvbnN0cnVjdG9yLnR5cGVLZXkpOwogIH0sCgogIC8vIEVYVFJBQ1QKCiAgLyoqCiAgICBFeHRyYWN0cyB0aGUgbW9kZWwgdHlwZUtleSBmcm9tIHVuZGVyc2NvcmVkIHJvb3Qgb2JqZWN0cy4KCiAgICBAbWV0aG9kIHR5cGVGb3JSb290CiAgICBAcGFyYW0ge1N0cmluZ30gcm9vdAogICAgQHJldHVybnMgU3RyaW5nIHRoZSBtb2RlbCdzIHR5cGVLZXkKICAqLwogIHR5cGVGb3JSb290OiBmdW5jdGlvbihyb290KSB7CiAgICB2YXIgY2FtZWxpemVkID0gRW1iZXIuU3RyaW5nLmNhbWVsaXplKHJvb3QpOwogICAgcmV0dXJuIEVtYmVyLlN0cmluZy5zaW5ndWxhcml6ZShjYW1lbGl6ZWQpOwogIH0sCgogIC8qKgogICAgQWRkIGV4dHJhIHN0ZXAgdG8gYERTLlJFU1RTZXJpYWxpemVyLm5vcm1hbGl6ZWAgc28gbGlua3MgYXJlCiAgICBub3JtYWxpemVkLgoKICAgIElmIHlvdXIgcGF5bG9hZCBsb29rcyBsaWtlIHRoaXMKCiAgICBgYGBqcwogICAgewogICAgICAicG9zdCI6IHsKICAgICAgICAiaWQiOiAxLAogICAgICAgICJ0aXRsZSI6ICJSYWlscyBpcyBvbWFrYXNlIiwKICAgICAgICAibGlua3MiOiB7ICJmbGFnZ2VkX2NvbW1lbnRzIjogImFwaS9jb21tZW50cy9mbGFnZ2VkIiB9CiAgICAgIH0KICAgIH0KICAgIGBgYAogICAgVGhlIG5vcm1hbGl6ZWQgdmVyc2lvbiB3b3VsZCBsb29rIGxpa2UgdGhpcwoKICAgIGBgYGpzCiAgICB7CiAgICAgICJwb3N0IjogewogICAgICAgICJpZCI6IDEsCiAgICAgICAgInRpdGxlIjogIlJhaWxzIGlzIG9tYWthc2UiLAogICAgICAgICJsaW5rcyI6IHsgImZsYWdnZWRDb21tZW50cyI6ICJhcGkvY29tbWVudHMvZmxhZ2dlZCIgfQogICAgICB9CiAgICB9CiAgICBgYGAKCiAgICBAbWV0aG9kIG5vcm1hbGl6ZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IGhhc2gKICAgIEBwYXJhbSB7U3RyaW5nfSBwcm9wCiAgICBAcmV0dXJucyBPYmplY3QKICAqLwoKICBub3JtYWxpemU6IGZ1bmN0aW9uKHR5cGUsIGhhc2gsIHByb3ApIHsKICAgIHRoaXMubm9ybWFsaXplTGlua3MoaGFzaCk7CgogICAgcmV0dXJuIHRoaXMuX3N1cGVyKHR5cGUsIGhhc2gsIHByb3ApOwogIH0sCgogIC8qKgogICAgQ29udmVydCBgc25ha2VfY2FzZWRgIGxpbmtzICB0byBgY2FtZWxDYXNlYAoKICAgIEBtZXRob2Qgbm9ybWFsaXplTGlua3MKICAgIEBwYXJhbSB7T2JqZWN0fSBoYXNoCiAgKi8KCiAgbm9ybWFsaXplTGlua3M6IGZ1bmN0aW9uKGRhdGEpewogICAgaWYgKGRhdGEubGlua3MpIHsKICAgICAgdmFyIGxpbmtzID0gZGF0YS5saW5rczsKCiAgICAgIGZvciAodmFyIGxpbmsgaW4gbGlua3MpIHsKICAgICAgICB2YXIgY2FtZWxpemVkTGluayA9IEVtYmVyLlN0cmluZy5jYW1lbGl6ZShsaW5rKTsKCiAgICAgICAgaWYgKGNhbWVsaXplZExpbmsgIT09IGxpbmspIHsKICAgICAgICAgIGxpbmtzW2NhbWVsaXplZExpbmtdID0gbGlua3NbbGlua107CiAgICAgICAgICBkZWxldGUgbGlua3NbbGlua107CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICBOb3JtYWxpemUgdGhlIHBvbHltb3JwaGljIHR5cGUgZnJvbSB0aGUgSlNPTi4KCiAgICBOb3JtYWxpemU6CiAgICBgYGBqcwogICAgICB7CiAgICAgICAgaWQ6ICIxIgogICAgICAgIG1pbmlvbjogeyB0eXBlOiAiZXZpbF9taW5pb24iLCBpZDogIjEyIn0KICAgICAgfQogICAgYGBgCgogICAgVG86CiAgICBgYGBqcwogICAgICB7CiAgICAgICAgaWQ6ICIxIgogICAgICAgIG1pbmlvbjogeyB0eXBlOiAiZXZpbE1pbmlvbiIsIGlkOiAiMTIifQogICAgICB9CiAgICBgYGAKCiAgICBAbWV0aG9kIG5vcm1hbGl6ZVJlbGF0aW9uc2hpcHMKICAgIEBwcml2YXRlCiAgKi8KICBub3JtYWxpemVSZWxhdGlvbnNoaXBzOiBmdW5jdGlvbih0eXBlLCBoYXNoKSB7CiAgICB2YXIgcGF5bG9hZEtleSwgcGF5bG9hZDsKCiAgICBpZiAodGhpcy5rZXlGb3JSZWxhdGlvbnNoaXApIHsKICAgICAgdHlwZS5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9uKGtleSwgcmVsYXRpb25zaGlwKSB7CiAgICAgICAgaWYgKHJlbGF0aW9uc2hpcC5vcHRpb25zLnBvbHltb3JwaGljKSB7CiAgICAgICAgICBwYXlsb2FkS2V5ID0gdGhpcy5rZXlGb3JBdHRyaWJ1dGUoa2V5KTsKICAgICAgICAgIHBheWxvYWQgPSBoYXNoW3BheWxvYWRLZXldOwogICAgICAgICAgaWYgKHBheWxvYWQgJiYgcGF5bG9hZC50eXBlKSB7CiAgICAgICAgICAgIHBheWxvYWQudHlwZSA9IHRoaXMudHlwZUZvclJvb3QocGF5bG9hZC50eXBlKTsKICAgICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZCAmJiByZWxhdGlvbnNoaXAua2luZCA9PT0gImhhc01hbnkiKSB7CiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgZm9yRWFjaChwYXlsb2FkLCBmdW5jdGlvbihzaW5nbGUpIHsKICAgICAgICAgICAgICBzaW5nbGUudHlwZSA9IHNlbGYudHlwZUZvclJvb3Qoc2luZ2xlLnR5cGUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcGF5bG9hZEtleSA9IHRoaXMua2V5Rm9yUmVsYXRpb25zaGlwKGtleSwgcmVsYXRpb25zaGlwLmtpbmQpOwogICAgICAgICAgcGF5bG9hZCA9IGhhc2hbcGF5bG9hZEtleV07CiAgICAgICAgfQoKICAgICAgICBoYXNoW2tleV0gPSBwYXlsb2FkOwoKICAgICAgICBpZiAoa2V5ICE9PSBwYXlsb2FkS2V5KSB7CiAgICAgICAgICBkZWxldGUgaGFzaFtwYXlsb2FkS2V5XTsKICAgICAgICB9CiAgICAgIH0sIHRoaXMpOwogICAgfQogIH0KfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7CnZhciBnZXQgPSBFbWJlci5nZXQ7CnZhciBmb3JFYWNoID0gRW1iZXIuRW51bWVyYWJsZVV0aWxzLmZvckVhY2g7CgovKioKICBUaGUgRW1iZWRkZWRSZWNvcmRzTWl4aW4gYWxsb3dzIHlvdSB0byBhZGQgZW1iZWRkZWQgcmVjb3JkIHN1cHBvcnQgdG8geW91cgogIHNlcmlhbGl6ZXJzLgogIFRvIHNldCB1cCBlbWJlZGRlZCByZWNvcmRzLCB5b3UgaW5jbHVkZSB0aGUgbWl4aW4gaW50byB0aGUgc2VyaWFsaXplciBhbmQgdGhlbgogIGRlZmluZSB5b3VyIGVtYmVkZGVkIHJlbGF0aW9ucy4KCiAgYGBganMKICBBcHAuUG9zdFNlcmlhbGl6ZXIgPSBEUy5BY3RpdmVNb2RlbFNlcmlhbGl6ZXIuZXh0ZW5kKERTLkVtYmVkZGVkUmVjb3Jkc01peGluLCB7CiAgICBhdHRyczogewogICAgICBjb21tZW50czoge2VtYmVkZGVkOiAnYWx3YXlzJ30KICAgIH0KICB9KQogIGBgYAoKICBDdXJyZW50bHkgb25seSBge2VtYmVkZGVkOiAnYWx3YXlzJ31gIHJlY29yZHMgYXJlIHN1cHBvcnRlZC4KCiAgQGNsYXNzIEVtYmVkZGVkUmVjb3Jkc01peGluCiAgQG5hbWVzcGFjZSBEUwoqLwpEUy5FbWJlZGRlZFJlY29yZHNNaXhpbiA9IEVtYmVyLk1peGluLmNyZWF0ZSh7CgogIC8qKgogICAgU2VyaWFsaXplIGhhcy1tYXkgcmVsYXRpb25zaGlwIHdoZW4gaXQgaXMgY29uZmlndXJlZCBhcyBlbWJlZGRlZCBvYmplY3RzLgoKICAgIEBtZXRob2Qgc2VyaWFsaXplSGFzTWFueQogICovCiAgc2VyaWFsaXplSGFzTWFueTogZnVuY3Rpb24ocmVjb3JkLCBqc29uLCByZWxhdGlvbnNoaXApIHsKICAgIHZhciBrZXkgICA9IHJlbGF0aW9uc2hpcC5rZXksCiAgICAgICAgYXR0cnMgPSBnZXQodGhpcywgJ2F0dHJzJyksCiAgICAgICAgZW1iZWQgPSBhdHRycyAmJiBhdHRyc1trZXldICYmIGF0dHJzW2tleV0uZW1iZWRkZWQgPT09ICdhbHdheXMnOwoKICAgIGlmIChlbWJlZCkgewogICAgICBqc29uW3RoaXMua2V5Rm9yQXR0cmlidXRlKGtleSldID0gZ2V0KHJlY29yZCwga2V5KS5tYXAoZnVuY3Rpb24ocmVsYXRpb24pIHsKICAgICAgICB2YXIgZGF0YSA9IHJlbGF0aW9uLnNlcmlhbGl6ZSgpLAogICAgICAgICAgICBwcmltYXJ5S2V5ID0gZ2V0KHRoaXMsICdwcmltYXJ5S2V5Jyk7CgogICAgICAgIGRhdGFbcHJpbWFyeUtleV0gPSBnZXQocmVsYXRpb24sIHByaW1hcnlLZXkpOwoKICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgfSwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICBFeHRyYWN0IGVtYmVkZGVkIG9iamVjdHMgb3V0IG9mIHRoZSBwYXlsb2FkIGZvciBhIHNpbmdsZSBvYmplY3QKICAgIGFuZCBhZGQgdGhlbSBhcyBzaWRlbG9hZGVkIG9iamVjdHMgaW5zdGVhZC4KCiAgICBAbWV0aG9kIGV4dHJhY3RTaW5nbGUKICAqLwogIGV4dHJhY3RTaW5nbGU6IGZ1bmN0aW9uKHN0b3JlLCBwcmltYXJ5VHlwZSwgcGF5bG9hZCwgcmVjb3JkSWQsIHJlcXVlc3RUeXBlKSB7CiAgICB2YXIgcm9vdCA9IHRoaXMua2V5Rm9yQXR0cmlidXRlKHByaW1hcnlUeXBlLnR5cGVLZXkpLAogICAgICAgIHBhcnRpYWwgPSBwYXlsb2FkW3Jvb3RdOwoKICAgIHVwZGF0ZVBheWxvYWRXaXRoRW1iZWRkZWQoc3RvcmUsIHRoaXMsIHByaW1hcnlUeXBlLCBwYXJ0aWFsLCBwYXlsb2FkKTsKCiAgICByZXR1cm4gdGhpcy5fc3VwZXIoc3RvcmUsIHByaW1hcnlUeXBlLCBwYXlsb2FkLCByZWNvcmRJZCwgcmVxdWVzdFR5cGUpOwogIH0sCgogIC8qKgogICAgRXh0cmFjdCBlbWJlZGRlZCBvYmplY3RzIG91dCBvZiBhIHN0YW5kYXJkIHBheWxvYWQKICAgIGFuZCBhZGQgdGhlbSBhcyBzaWRlbG9hZGVkIG9iamVjdHMgaW5zdGVhZC4KCiAgICBAbWV0aG9kIGV4dHJhY3RBcnJheQogICovCiAgZXh0cmFjdEFycmF5OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9hZCkgewogICAgdmFyIHJvb3QgPSB0aGlzLmtleUZvckF0dHJpYnV0ZSh0eXBlLnR5cGVLZXkpLAogICAgICAgIHBhcnRpYWxzID0gcGF5bG9hZFtFbWJlci5TdHJpbmcucGx1cmFsaXplKHJvb3QpXTsKCiAgICBmb3JFYWNoKHBhcnRpYWxzLCBmdW5jdGlvbihwYXJ0aWFsKSB7CiAgICAgIHVwZGF0ZVBheWxvYWRXaXRoRW1iZWRkZWQoc3RvcmUsIHRoaXMsIHR5cGUsIHBhcnRpYWwsIHBheWxvYWQpOwogICAgfSwgdGhpcyk7CgogICAgcmV0dXJuIHRoaXMuX3N1cGVyKHN0b3JlLCB0eXBlLCBwYXlsb2FkKTsKICB9Cn0pOwoKZnVuY3Rpb24gdXBkYXRlUGF5bG9hZFdpdGhFbWJlZGRlZChzdG9yZSwgc2VyaWFsaXplciwgdHlwZSwgcGFydGlhbCwgcGF5bG9hZCkgewogIHZhciBhdHRycyA9IGdldChzZXJpYWxpemVyLCAnYXR0cnMnKTsKCiAgaWYgKCFhdHRycykgewogICAgcmV0dXJuOwogIH0KCiAgdHlwZS5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9uKGtleSwgcmVsYXRpb25zaGlwKSB7CiAgICB2YXIgZXhwYW5kZWRLZXksIGVtYmVkZGVkVHlwZUtleSwgYXR0cmlidXRlLCBpZHMsCiAgICAgICAgY29uZmlnID0gYXR0cnNba2V5XSwKICAgICAgICBzZXJpYWxpemVyID0gc3RvcmUuc2VyaWFsaXplckZvcihyZWxhdGlvbnNoaXAudHlwZS50eXBlS2V5KSwKICAgICAgICBwcmltYXJ5S2V5ID0gZ2V0KHNlcmlhbGl6ZXIsICJwcmltYXJ5S2V5Iik7CgogICAgaWYgKHJlbGF0aW9uc2hpcC5raW5kICE9PSAiaGFzTWFueSIpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChjb25maWcgJiYgKGNvbmZpZy5lbWJlZGRlZCA9PT0gJ2Fsd2F5cycgfHwgY29uZmlnLmVtYmVkZGVkID09PSAnbG9hZCcpKSB7CiAgICAgIC8vIHVuZGVyc2NvcmUgZm9yY2VzIHRoZSBlbWJlZGRlZCByZWNvcmRzIHRvIGJlIHNpZGUgbG9hZGVkLgogICAgICAvLyBpdCBpcyBuZWVkZWQgd2hlbiBtYWluIHR5cGUgPT09IHJlbGF0aW9uc2hpcC50eXBlCiAgICAgIGVtYmVkZGVkVHlwZUtleSA9ICdfJyArIEVtYmVyLlN0cmluZy5wbHVyYWxpemUocmVsYXRpb25zaGlwLnR5cGUudHlwZUtleSk7CiAgICAgIGV4cGFuZGVkS2V5ID0gdGhpcy5rZXlGb3JSZWxhdGlvbnNoaXAoa2V5LCByZWxhdGlvbnNoaXAua2luZCk7CiAgICAgIGF0dHJpYnV0ZSAgPSB0aGlzLmtleUZvckF0dHJpYnV0ZShrZXkpOwogICAgICBpZHMgPSBbXTsKCiAgICAgIGlmICghcGFydGlhbFthdHRyaWJ1dGVdKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBwYXlsb2FkW2VtYmVkZGVkVHlwZUtleV0gPSBwYXlsb2FkW2VtYmVkZGVkVHlwZUtleV0gfHwgW107CgogICAgICBmb3JFYWNoKHBhcnRpYWxbYXR0cmlidXRlXSwgZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciBlbWJlZGRlZFR5cGUgPSBzdG9yZS5tb2RlbEZvcihyZWxhdGlvbnNoaXAudHlwZS50eXBlS2V5KTsKICAgICAgICB1cGRhdGVQYXlsb2FkV2l0aEVtYmVkZGVkKHN0b3JlLCBzZXJpYWxpemVyLCBlbWJlZGRlZFR5cGUsIGRhdGEsIHBheWxvYWQpOwogICAgICAgIGlkcy5wdXNoKGRhdGFbcHJpbWFyeUtleV0pOwogICAgICAgIHBheWxvYWRbZW1iZWRkZWRUeXBlS2V5XS5wdXNoKGRhdGEpOwogICAgICB9KTsKCiAgICAgIHBhcnRpYWxbZXhwYW5kZWRLZXldID0gaWRzOwogICAgICBkZWxldGUgcGFydGlhbFthdHRyaWJ1dGVdOwogICAgfQogIH0sIHNlcmlhbGl6ZXIpOwp9Cn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZm9yRWFjaCA9IEVtYmVyLkVudW1lcmFibGVVdGlscy5mb3JFYWNoOwoKLyoqCiAgVGhlIEFjdGl2ZU1vZGVsQWRhcHRlciBpcyBhIHN1YmNsYXNzIG9mIHRoZSBSRVNUQWRhcHRlciBkZXNpZ25lZCB0byBpbnRlZ3JhdGUKICB3aXRoIGEgSlNPTiBBUEkgdGhhdCB1c2VzIGFuIHVuZGVyc2NvcmVkIG5hbWluZyBjb252ZW50aW9uIGluc3RlYWQgb2YgY2FtZWxjYXNpbmcuCiAgSXQgaGFzIGJlZW4gZGVzaWduZWQgdG8gd29yayBvdXQgb2YgdGhlIGJveCB3aXRoIHRoZQogIFthY3RpdmVfbW9kZWxfc2VyaWFsaXplcnNdKGh0dHA6Ly9naXRodWIuY29tL3JhaWxzLWFwaS9hY3RpdmVfbW9kZWxfc2VyaWFsaXplcnMpCiAgUnVieSBnZW0uCgogIFRoaXMgYWRhcHRlciBleHRlbmRzIHRoZSBEUy5SRVNUQWRhcHRlciBieSBtYWtpbmcgY29uc2lzdGVudCB1c2Ugb2YgdGhlIGNhbWVsaXphdGlvbiwKICBkZWNhbWVsaXphdGlvbiBhbmQgcGx1cmFsaXphdGlvbiBtZXRob2RzIHRvIG5vcm1hbGl6ZSB0aGUgc2VyaWFsaXplZCBKU09OIGludG8gYQogIGZvcm1hdCB0aGF0IGlzIGNvbXBhdGlibGUgd2l0aCBhIGNvbnZlbnRpb25hbCBSYWlscyBiYWNrZW5kIGFuZCBFbWJlciBEYXRhLgoKICAjIyBKU09OIFN0cnVjdHVyZQoKICBUaGUgQWN0aXZlTW9kZWxBZGFwdGVyIGV4cGVjdHMgdGhlIEpTT04gcmV0dXJuZWQgZnJvbSB5b3VyIHNlcnZlciB0byBmb2xsb3cKICB0aGUgUkVTVCBhZGFwdGVyIGNvbnZlbnRpb25zIHN1YnN0aXR1dGluZyB1bmRlcnNjb3JlZCBrZXlzIGZvciBjYW1lbGNhc2VkIG9uZXMuCgogICMjIyBDb252ZW50aW9uYWwgTmFtZXMKCiAgQXR0cmlidXRlIG5hbWVzIGluIHlvdXIgSlNPTiBwYXlsb2FkIHNob3VsZCBiZSB0aGUgdW5kZXJzY29yZWQgdmVyc2lvbnMgb2YKICB0aGUgYXR0cmlidXRlcyBpbiB5b3VyIEVtYmVyLmpzIG1vZGVscy4KCiAgRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZlIGEgYFBlcnNvbmAgbW9kZWw6CgogIGBgYGpzCiAgQXBwLkZhbW91c1BlcnNvbiA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICBmaXJzdE5hbWU6IERTLmF0dHIoJ3N0cmluZycpLAogICAgbGFzdE5hbWU6IERTLmF0dHIoJ3N0cmluZycpLAogICAgb2NjdXBhdGlvbjogRFMuYXR0cignc3RyaW5nJykKICB9KTsKICBgYGAKCiAgVGhlIEpTT04gcmV0dXJuZWQgc2hvdWxkIGxvb2sgbGlrZSB0aGlzOgoKICBgYGBqcwogIHsKICAgICJmYW1vdXNfcGVyc29uIjogewogICAgICAiZmlyc3RfbmFtZSI6ICJCYXJhY2siLAogICAgICAibGFzdF9uYW1lIjogIk9iYW1hIiwKICAgICAgIm9jY3VwYXRpb24iOiAiUHJlc2lkZW50IgogICAgfQogIH0KICBgYGAKCiAgQGNsYXNzIEFjdGl2ZU1vZGVsQWRhcHRlcgogIEBjb25zdHJ1Y3RvcgogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBEUy5BZGFwdGVyCioqLwoKRFMuQWN0aXZlTW9kZWxBZGFwdGVyID0gRFMuUkVTVEFkYXB0ZXIuZXh0ZW5kKHsKICBkZWZhdWx0U2VyaWFsaXplcjogJ19hbXMnLAogIC8qKgogICAgVGhlIEFjdGl2ZU1vZGVsQWRhcHRlciBvdmVycmlkZXMgdGhlIGBwYXRoRm9yVHlwZWAgbWV0aG9kIHRvIGJ1aWxkCiAgICB1bmRlcnNjb3JlZCBVUkxzIGJ5IGRlY2FtZWxpemluZyBhbmQgcGx1cmFsaXppbmcgdGhlIG9iamVjdCB0eXBlIG5hbWUuCgogICAgYGBganMKICAgICAgdGhpcy5wYXRoRm9yVHlwZSgiZmFtb3VzUGVyc29uIik7CiAgICAgIC8vPT4gImZhbW91c19wZW9wbGUiCiAgICBgYGAKCiAgICBAbWV0aG9kIHBhdGhGb3JUeXBlCiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgQHJldHVybnMgU3RyaW5nCiAgKi8KICBwYXRoRm9yVHlwZTogZnVuY3Rpb24odHlwZSkgewogICAgdmFyIGRlY2FtZWxpemVkID0gRW1iZXIuU3RyaW5nLmRlY2FtZWxpemUodHlwZSk7CiAgICByZXR1cm4gRW1iZXIuU3RyaW5nLnBsdXJhbGl6ZShkZWNhbWVsaXplZCk7CiAgfSwKCiAgLyoqCiAgICBUaGUgQWN0aXZlTW9kZWxBZGFwdGVyIG92ZXJyaWRlcyB0aGUgYGFqYXhFcnJvcmAgbWV0aG9kCiAgICB0byByZXR1cm4gYSBEUy5JbnZhbGlkRXJyb3IgZm9yIGFsbCA0MjIgVW5wcm9jZXNzYWJsZSBFbnRpdHkKICAgIHJlc3BvbnNlcy4KCiAgICBBIDQyMiBIVFRQIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBnZW5lcmFsbHkgaW1wbGllcyB0aGF0IHRoZSByZXF1ZXN0CiAgICB3YXMgd2VsbCBmb3JtZWQgYnV0IHRoZSBBUEkgd2FzIHVuYWJsZSB0byBwcm9jZXNzIGl0IGJlY2F1c2UgdGhlCiAgICBjb250ZW50IHdhcyBub3Qgc2VtYW50aWNhbGx5IGNvcnJlY3Qgb3IgbWVhbmluZ2Z1bCBwZXIgdGhlIEFQSS4KCiAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiA0MjIgSFRUUCBFcnJvciBjb2RlIHNlZSAxMS4yIFdlYkRBViBSRkMgNDkxOAogICAgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ5MTgjc2VjdGlvbi0xMS4yCgogICAgQG1ldGhvZCBhamF4RXJyb3IKICAgIEBwYXJhbSBqcVhIUgogICAgQHJldHVybnMgZXJyb3IKICAqLwogIGFqYXhFcnJvcjogZnVuY3Rpb24oanFYSFIpIHsKICAgIHZhciBlcnJvciA9IHRoaXMuX3N1cGVyKGpxWEhSKTsKCiAgICBpZiAoanFYSFIgJiYganFYSFIuc3RhdHVzID09PSA0MjIpIHsKICAgICAgdmFyIGpzb25FcnJvcnMgPSBFbWJlci4kLnBhcnNlSlNPTihqcVhIUi5yZXNwb25zZVRleHQpWyJlcnJvcnMiXSwKICAgICAgICAgIGVycm9ycyA9IHt9OwoKICAgICAgZm9yRWFjaChFbWJlci5rZXlzKGpzb25FcnJvcnMpLCBmdW5jdGlvbihrZXkpIHsKICAgICAgICBlcnJvcnNbRW1iZXIuU3RyaW5nLmNhbWVsaXplKGtleSldID0ganNvbkVycm9yc1trZXldOwogICAgICB9KTsKCiAgICAgIHJldHVybiBuZXcgRFMuSW52YWxpZEVycm9yKGVycm9ycyk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZXJyb3I7CiAgICB9CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKRW1iZXIub25Mb2FkKCdFbWJlci5BcHBsaWNhdGlvbicsIGZ1bmN0aW9uKEFwcGxpY2F0aW9uKSB7CiAgQXBwbGljYXRpb24uaW5pdGlhbGl6ZXIoewogICAgbmFtZTogImFjdGl2ZU1vZGVsQWRhcHRlciIsCgogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY29udGFpbmVyLCBhcHBsaWNhdGlvbikgewogICAgICBhcHBsaWNhdGlvbi5yZWdpc3Rlcignc2VyaWFsaXplcjpfYW1zJywgRFMuQWN0aXZlTW9kZWxTZXJpYWxpemVyKTsKICAgICAgYXBwbGljYXRpb24ucmVnaXN0ZXIoJ2FkYXB0ZXI6X2FtcycsIERTLkFjdGl2ZU1vZGVsQWRhcHRlcik7CiAgICB9CiAgfSk7Cn0pOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewoKfSkoKTsKCgp9KSgpOwo=</content>
    <filesize>278834</filesize>
  </attachment>
  <attachment>
    <filename>ember.js</filename>
    <author>XWiki.Admin</author>
    <date>1498975668000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>1149896</filesize>
  </attachment>
  <attachment>
    <filename>handlebars-v1.2.1.js</filename>
    <author>XWiki.Admin</author>
    <date>1498975668000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>84981</filesize>
  </attachment>
  <object>
    <name>TodoLists.TodoListMacro</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>744f736f-3e5c-4c3f-9786-19023587257e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>requirejs.config({
    //By default load any module IDs from js/lib
    baseUrl: '${xwiki.getDocument("TodoLists.TodoListMacro").getURL("download")}/',
    //except, if the module ID starts with "app",
    //load it from the js/app directory. paths
    //config is relative to the baseUrl, and
    //never includes a ".js" extension since
    //the paths config could be for a directory.
    paths: {
    },
    shim: {
        'ember-data': {
            deps: ['ember', 'jquery']
        },
        'ember': {
            deps: ['jquery']
        }
    }
});
require(['jquery', 'handlebars-v1.2.1', 'ember-data', 'ember' ], function ($) {

// create app
window.Todos = Ember.Application.create({
  rootElement: '#todoappdiv'
});

// define the todolist store that will write to the TodoListsService
Todos.ApplicationAdapter = DS.Adapter.extend({
  createRecord: function(store, type, record) {
    console.log("createRecord");
    var query = { create: "1", content : JSON.stringify(record) };
    return new Ember.RSVP.Promise(function(resolve, reject) {
      jQuery.getJSON("${xwiki.getURL("TodoLists.TodoListsService")}?page=" + XWiki.currentSpace + "." + XWiki.currentPage + "&amp;xpage=plain&amp;outputSyntax=plain", query).then(function(data) {
        Ember.run(null, resolve, data);
      }, function(jqXHR) {
        jqXHR.then = null; // tame jQuery's ill mannered promises
        Ember.run(null, reject, jqXHR);
      });
    });
  },
  deleteRecord: function(store, type, record) {
    console.log("deleteRecord");
    return this.saveAll(store.recordArrayManager.recordArraysForRecord(record).list[0].content);
  },
  find: function(store, type, id) {
    console.log("find");
    return;
  },
  findAll: function(store, type, sinceToken) {
    console.log("findAll");
    var query = { since: sinceToken };
    return new Ember.RSVP.Promise(function(resolve, reject) {
      jQuery.getJSON("${xwiki.getURL("TodoLists.TodoListsService")}?page=" + XWiki.currentSpace + "." + XWiki.currentPage + "&amp;xpage=plain&amp;outputSyntax=plain", query).then(function(data) {
        Ember.run(null, resolve, data);
      }, function(jqXHR) {
        jqXHR.then = null; // tame jQuery's ill mannered promises
        Ember.run(null, reject, jqXHR);
      });
    });
  },
  updateRecord: function(store, type, record) {
    return this.saveAll(store.recordArrayManager.recordArraysForRecord(record).list[0].content);
  },
  saveAll: function(alldata) {
    console.log("updateRecord");
    var query = { save: "1", content : JSON.stringify(alldata) };
    return new Ember.RSVP.Promise(function(resolve, reject) {
      jQuery.getJSON("${xwiki.getURL("TodoLists.TodoListsService")}?page=" + XWiki.currentSpace + "." + XWiki.currentPage + "&amp;xpage=plain&amp;outputSyntax=plain", query).then(function(data) {
        Ember.run(null, resolve, data);
      }, function(jqXHR) {
        jqXHR.then = null; // tame jQuery's ill mannered promises
        Ember.run(null, reject, jqXHR);
      });
    });
  }
});

// use my own store
Todos.store = DS.Store.create({
  adapter: 'ApplicationAdapter'
});

// Todos.ApplicationAdapter = DS.FixtureAdapter.extend();

// routing
Todos.Router.map(function() {
  this.resource('todos', { path: '' }, function() {
     this.route('active');
     this.route('completed');
  });
});

Todos.TodosRoute = Ember.Route.extend({
  model: function() {
    return this.store.find('todo');
  }
});

Todos.TodosIndexRoute = Ember.Route.extend({
  model: function() {
    return this.modelFor('todos');
  }
});

// ... additional lines truncated for brevity ...
Todos.TodosActiveRoute = Ember.Route.extend({
  model: function(){
    return this.store.filter('todo', function(todo) {
      return !todo.get('isCompleted');
    });
  },
  renderTemplate: function(controller) {
    this.render('todos/index', {controller: controller});
  }
});

Todos.TodosCompletedRoute = Ember.Route.extend({
  model: function(){
    return this.store.filter('todo', function (todo) {
      return todo.get('isCompleted');
    });
  },
  renderTemplate: function(controller){
    this.render('todos/index', {controller: controller});
  }
});

// data model
Todos.Todo = DS.Model.extend({
  title: DS.attr('string'),
  priority: DS.attr('string'),
  assignee: DS.attr('string'),
  isCompleted: DS.attr('boolean')
});

// ... additional lines truncated for brevity ...
Todos.Todo.FIXTURES = [
 {
   id: 1,
   title: 'Learn Ember.js X',
   isCompleted: true
 },
 {
   id: 2,
   title: '...',
   isCompleted: false
 },
 {
   id: 3,
   title: 'Profit!',
   isCompleted: false
 }
];

// controler
Todos.TodoController = Ember.ObjectController.extend({
  actions: {
    editTodo: function () {
      this.set('isEditing', true);
    },
    acceptChanges: function() {
    this.set('isEditing', false);

    if (Ember.isEmpty(this.get('model.title'))) {
      this.send('removeTodo');
    } else {
      this.get('model').save();
    }
   },
   removeTodo: function() {
    var todo = this.get('model');
    todo.deleteRecord();
    todo.save();
  }
  },

  isEditing: false,

  isCompleted: function(key, value){
    var model = this.get('model');

    if (value === undefined) {
      // property being used as a getter
      return model.get('isCompleted');
    } else {
      // property being used as  setter
      model.set('isCompleted', value);
      model.save();
      return value;
    }
  }.property('model.isCompleted')
});

Todos.TodosController = Ember.ArrayController.extend({
  actions: {
    createTodo: function () {
      // Get the todo title set by the "New Todo" text field
      var title = this.get('newTitle');
      if (!title.trim()) { return; }

      // Create the new Todo model
      var todo = this.store.createRecord('todo', {
        title: title,
        priority: "P3",
        assignee: "all",
        isCompleted: false
      });

      // Clear the "New Todo" text field
      this.set('newTitle', '');

      // Save the new model
      todo.save();
    },
    clearCompleted: function () {
      var completed = this.filterProperty('isCompleted', true);
      completed.invoke('deleteRecord');
      completed.invoke('save');
    }
  },

  remaining: function () {
    return this.filterProperty('isCompleted', false).get('length');
  }.property('@each.isCompleted'),

  inflection: function () {
    var remaining = this.get('remaining');
    return remaining === 1 ? 'item' : 'items';
  }.property('remaining'),
  hasCompleted: function () {
    return this.get('completed') &gt; 0;
  }.property('completed'),

  completed: function () {
    return this.filterProperty('isCompleted', true).get('length');
  }.property('@each.isCompleted'),

 allAreDone: function(key, value) {
  if (value === undefined) {
    return !!this.get('length') &amp;&amp; this.everyProperty('isCompleted', true);
  } else {
    this.setEach('isCompleted', value);
    this.invoke('save');
    return value;
  }
}.property('@each.isCompleted')
});

// editing
Todos.EditTodoView = Ember.TextField.extend({
  didInsertElement: function() {
    this.$().focus();
  }
});

Ember.Handlebars.helper('edit-todo', Todos.EditTodoView);
});</code>
    </property>
    <property>
      <name>js</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>TodoLists.TodoListMacro</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>c5c8b484-e711-4c9d-9a54-61133f496596</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

button {
	margin: 0;
	padding: 0;
	border: 0;
	background: none;
	font-size: 100%;
	vertical-align: baseline;
	font-family: inherit;
	color: inherit;
	-webkit-appearance: none;
	/*-moz-appearance: none;*/
	-ms-appearance: none;
	-o-appearance: none;
	appearance: none;
}

#todoapp {
	background: #fff;
	background: rgba(255, 255, 255, 0.9);
	border: 1px solid #ccc;
	position: relative;
        margin-bottom: 60px;
	border-top-left-radius: 2px;
	border-top-right-radius: 2px;
	box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.2),
				0 25px 50px 0 rgba(0, 0, 0, 0.15);
}

#todoappdiv {
        width: 70%;
}

#todoapp:before {
	content: '';
	border-left: 1px solid $theme.borderColor;
	border-right: 1px solid $theme.borderColor;
	width: 2px;
	position: absolute;
	top: 0;
	left: 40px;
	height: 100%;
}

#todoapp input::-webkit-input-placeholder {
	font-style: italic;
}

#todoapp input:-moz-placeholder {
	font-style: italic;
	color: #a9a9a9;
}

#header {
	padding-top: 5px;
	border-radius: inherit;
}

#header:before {
	content: '';
	position: absolute;
	top: 0;
	right: 0;
	left: 0;
	height: 5px;
	z-index: 2;
	border-bottom: 1px solid #6c615c;
  #css3_backgroundLinearGradient({
     'to': 'bottom',
     'colors': [
      {'color': $theme.menuGradientColor, 'position': '0%'},
      {'color': $theme.menuBackgroundColor, 'position': '50%'}
    ]
  })
  box-shadow: 0px 1px 2px $theme.menuGradientColor;
	border-top-left-radius: 1px;
	border-top-right-radius: 1px;
}

#new-todo,
.edit {
	position: relative;
	margin: 0;
	width: 100%;
	font-size: 14px;
	font-family: inherit;
	line-height: 1.4em;
	border: 0;
	outline: none;
	color: inherit;
	padding: 6px;
	border: 1px solid #999;
	box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	-ms-box-sizing: border-box;
	-o-box-sizing: border-box;
	box-sizing: border-box;
	-webkit-font-smoothing: antialiased;
	-moz-font-smoothing: antialiased;
	-ms-font-smoothing: antialiased;
	-o-font-smoothing: antialiased;
	font-smoothing: antialiased;
}

#new-todo {
	padding: 16px 16px 16px 60px;
	border: none;
	background: rgba(0, 0, 0, 0.02);
	z-index: 2;
	box-shadow: none;
}

#main {
	position: relative;
	z-index: 2;
	border-top: 1px dotted #adadad;
}

label[for='toggle-all'] {
	display: none;
}

#toggle-all {
	position: absolute;
	top: -42px;
	left: -4px;
	width: 40px;
	text-align: center;
	border: none; /* Mobile Safari */
}

#toggle-all:before {
	content: '»';
	font-size: 14px;
	color: #d9d9d9;
	padding: 0 25px 7px;
}

#toggle-all:checked:before {
	color: #737373;
}

#todo-list {
	margin: 0;
	padding: 0;
	list-style: none;
}

#todo-list li {
	position: relative;
	font-size: 14px;
	border-bottom: 1px dotted #ccc;
        line-height: 1;
}

#todo-list li:last-child {
	border-bottom: none;
}

#todo-list li.editing {
	border-bottom: none;
	padding: 0;
}

#todo-list li.editing .edit {
	display: block;
	width: 506px;
	padding: 13px 17px 12px 17px;
	margin: 0 0 0 43px;
}

#todo-list li.editing .view {
	display: none;
}

#todo-list li .toggle {
	text-align: center;
	width: 40px;
	/* auto, since non-WebKit browsers doesn't support input styling */
	height: auto;
	position: absolute;
	top: 0;
	bottom: 0;
	margin: auto 0;
	border: none; /* Mobile Safari */
	-webkit-appearance: none;
	/*-moz-appearance: none;*/
	-ms-appearance: none;
	-o-appearance: none;
	appearance: none;
}

#todo-list li .toggle:after {
	content: '✔';
	line-height: 43px; /* 40 + a couple of pixels visual adjustment */
	font-size: 14px;
	color: #d9d9d9;
	text-shadow: 0 -1px 0 #bfbfbf;
}

#todo-list li .toggle:checked:after {
	color: #85ada7;
	text-shadow: 0 1px 0 #669991;
	bottom: 1px;
	position: relative;
}

#todo-list li label {
        font-weight: normal;
	word-break: break-word;
        padding-top: 5px;
	margin-left: 45px;
	line-height: 1;
	-webkit-transition: color 0.4s;
	-moz-transition: color 0.4s;
	-ms-transition: color 0.4s;
	-o-transition: color 0.4s;
	transition: color 0.4s;
}

#todo-list li.completed label {
	color: #a9a9a9;
	text-decoration: line-through;
}

#todo-list li .destroy {
	display: none;
	position: absolute;
	top: 0;
	right: 10px;
	bottom: 0;
	width: 40px;
	height: 40px;
	margin: auto 0;
	font-size: 14px;
	color: #a88a8a;
	-webkit-transition: all 0.2s;
	-moz-transition: all 0.2s;
	-ms-transition: all 0.2s;
	-o-transition: all 0.2s;
	transition: all 0.2s;
}

#todo-list li .destroy:hover {
	text-shadow: 0 0 1px #000,
				 0 0 10px rgba(199, 107, 107, 0.8);
	-webkit-transform: scale(1.3);
	-moz-transform: scale(1.3);
	-ms-transform: scale(1.3);
	-o-transform: scale(1.3);
	transform: scale(1.3);
}

#todo-list li .destroy:after {
	content: '✖';
}

#todo-list li:hover .destroy {
	display: block;
}

#todo-list li .edit {
	display: none;
}

#todo-list li.editing:last-child {
	margin-bottom: -1px;
}

#footer {
	color: #777;
	padding: 0 15px;
	position: absolute;
	right: 0;
	bottom: -31px;
	left: 0;
	height: 20px;
	z-index: 1;
	text-align: center;
}

#footer:before {
	content: '';
	position: absolute;
	right: 0;
	bottom: 31px;
	left: 0;
	height: 50px;
	z-index: -1;
	box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),
				0 6px 0 -3px rgba(255, 255, 255, 0.8),
				0 7px 1px -3px rgba(0, 0, 0, 0.3),
				0 43px 0 -6px rgba(255, 255, 255, 0.8),
				0 44px 2px -6px rgba(0, 0, 0, 0.2);
}

#todo-count {
	float: left;
	text-align: left;
}

#filters {
	margin: 0;
	padding: 0;
	list-style: none;
	position: absolute;
	right: 0;
	left: 0;
}

#filters li {
	display: inline;
}

#filters li a {
	color: #83756f;
	margin: 2px;
	text-decoration: none;
}

#filters li a.selected {
	font-weight: normal;
}

#clear-completed {
	float: right;
	position: relative;
	line-height: 14px;
	text-decoration: none;
	background: rgba(0, 0, 0, 0.1);
	font-size: 11px;
	padding: 0 10px;
	border-radius: 3px;
	box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.2);
}

#clear-completed:hover {
	background: rgba(0, 0, 0, 0.15);
	box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.3);
}

#info {
	margin: 65px auto 0;
	color: #a6a6a6;
	font-size: 12px;
	text-shadow: 0 1px 0 rgba(255, 255, 255, 0.7);
	text-align: center;
}

#info a {
	color: inherit;
}

/*
	Hack to remove background from Mobile Safari.
	Can't use it globally since it destroys checkboxes in Firefox and Opera
*/
@media screen and (-webkit-min-device-pixel-ratio:0) {
	#toggle-all,
	#todo-list li .toggle {
		background: none;
	}

	#todo-list li .toggle {
		height: 40px;
	}

	#toggle-all {
		top: -56px;
		left: -15px;
		width: 65px;
		height: 41px;
		-webkit-transform: rotate(90deg);
		transform: rotate(90deg);
		-webkit-appearance: none;
		appearance: none;
	}
}

.hidden{
	display:none;
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>css</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>TodoLists.TodoListMacro</name>
    <number>0</number>
    <className>XWiki.WikiMacroClass</className>
    <guid>c5210a93-0aad-425e-8bb2-fc48b6dbdaa2</guid>
    <class>
      <name>XWiki.WikiMacroClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <code>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>code</name>
        <number>9</number>
        <prettyName>Macro code</prettyName>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentDescription>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>contentDescription</name>
        <number>8</number>
        <prettyName>Content description (Not applicable for "No content" type)</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </contentDescription>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>7</number>
        <prettyName>Macro content type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Optional|Mandatory|No content</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <defaultCategory>
        <disabled>0</disabled>
        <name>defaultCategory</name>
        <number>4</number>
        <prettyName>Default category</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultCategory>
      <description>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>description</name>
        <number>3</number>
        <prettyName>Macro description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <id>
        <disabled>0</disabled>
        <name>id</name>
        <number>1</number>
        <prettyName>Macro id</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </id>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Macro name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <supportsInlineMode>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>supportsInlineMode</name>
        <number>5</number>
        <prettyName>Supports inline mode</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </supportsInlineMode>
      <visibility>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>visibility</name>
        <number>6</number>
        <prettyName>Macro visibility</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Current User|Current Wiki|Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </visibility>
    </class>
    <property>
      <code>{{velocity}}
#set($width = $xcontext.macro.params.width)
#set($class = $xcontext.macro.params.class)
#set($center = $xcontext.macro.params.center)
#set($ok = $services.localization.use('document', 'TodoLists.TodoListsTranslations'))
## Add js and css
#set($ok = $xwiki.jsx.use("TodoLists.TodoListMacro", { "minify" : false}))
#set($ok = $xwiki.ssx.use("TodoLists.TodoListMacro"))
{{html clean="false"}}
&lt;div id="todoappdiv" style="#if($width &amp;&amp; $width!="")width: ${width};#end #if($center=="1" || $center=="true")margin: auto;#end" #if($class &amp;&amp; $clazss!="") class="${class}" #end&gt;&lt;/div&gt;
&lt;script type="text/x-handlebars" data-template-name="todos"&gt;
&lt;section id="todoapp"&gt;
      &lt;header id="header"&gt;
        {{input type="text" id="new-todo" placeholder="${services.localization.render('todolists.whatneedstobedone')}" 
              value=newTitle action="createTodo"}}
      &lt;/header&gt;

&lt;section id="main"&gt;
  {{outlet}}
  {{input type="checkbox" id="toggle-all" checked=allAreDone}}
&lt;/section&gt;
     &lt;footer id="footer"&gt;
&lt;span id="todo-count"&gt;
  &lt;strong&gt;{{remaining}}&lt;/strong&gt; {{inflection}} left
&lt;/span&gt;
        &lt;ul id="filters"&gt;
&lt;li&gt;
  {{#link-to "todos.index" activeClass="selected"}}${services.localization.render('todolists.all')}{{/link-to}}
&lt;/li&gt;
&lt;li&gt;
  {{#link-to "todos.active" activeClass="selected"}}${services.localization.render('todolists.active')}{{/link-to}}
&lt;/li&gt;
&lt;li&gt;
  {{#link-to "todos.completed" activeClass="selected"}}${services.localization.render('todolists.completed')}{{/link-to}}
&lt;/li&gt;
        &lt;/ul&gt;
{{\#if hasCompleted}}
  &lt;button id="clear-completed" {{action "clearCompleted"}}&gt;
    ${services.localization.render('todolists.clearcompleted')} ({{completed}})
  &lt;/button&gt;
{{/if}}
      &lt;/footer&gt;
    &lt;/section&gt;
&lt;/script&gt;
&lt;script type="text/x-handlebars" data-template-name="todos/index"&gt;
  &lt;ul id="todo-list"&gt;
    {{#each itemController="todo"}}
      &lt;li {{bind-attr class="isCompleted:completed isEditing:editing"}}&gt;
        {{\#if isEditing}}
          {{edit-todo class="edit" value=title focus-out="acceptChanges" insert-newline="acceptChanges"}}
        {{else}}
          {{input type="checkbox" checked=isCompleted class="toggle"}}
          &lt;label {{action "editTodo" on="doubleClick"}}&gt;{{title}}&lt;/label&gt;
          &lt;button {{action "removeTodo"}} class="destroy"&gt;&lt;/button&gt;
        {{/if}}
      &lt;/li&gt;
    {{/each}}
  &lt;/ul&gt;
&lt;/script&gt;
{{/html}}
{{/velocity}}</code>
    </property>
    <property>
      <contentDescription>List of todos in format 
Text|1
Text|0
Text|0</contentDescription>
    </property>
    <property>
      <contentType>Optional</contentType>
    </property>
    <property>
      <defaultCategory>content</defaultCategory>
    </property>
    <property>
      <description>TodoList with Javascript UI</description>
    </property>
    <property>
      <id>todolist</id>
    </property>
    <property>
      <name>todolist</name>
    </property>
    <property>
      <supportsInlineMode>0</supportsInlineMode>
    </property>
    <property>
      <visibility>Current Wiki</visibility>
    </property>
  </object>
  <object>
    <name>TodoLists.TodoListMacro</name>
    <number>0</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>18e69281-58b1-4a2c-9c81-567720bcc4ce</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Width of the todolist area in percentage or pixels</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>width</name>
    </property>
  </object>
  <object>
    <name>TodoLists.TodoListMacro</name>
    <number>1</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>d8942386-3d6e-4000-80f4-b414fad7d9a4</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Style Class to be used</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>class</name>
    </property>
  </object>
  <object>
    <name>TodoLists.TodoListMacro</name>
    <number>2</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>c9e568af-a555-4e06-8df0-ef90514ea2ad</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Wether the macro should be centered or not (1 or true)</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>center</name>
    </property>
  </object>
</xwikidoc>
